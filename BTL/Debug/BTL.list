
BTL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004038  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08004144  08004144  00005144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004260  08004260  0000608c  2**0
                  CONTENTS
  4 .ARM          00000000  08004260  08004260  0000608c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004260  08004260  0000608c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004260  08004260  00005260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004264  08004264  00005264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  08004268  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ec  2000008c  080042f4  0000608c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000378  080042f4  00006378  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f2ed  00000000  00000000  000060b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002597  00000000  00000000  000153a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb0  00000000  00000000  00017940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c43  00000000  00000000  000188f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000192d5  00000000  00000000  00019533  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015363  00000000  00000000  00032808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cfcb  00000000  00000000  00047b6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d4b36  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004598  00000000  00000000  000d4b7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  000d9114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000008c 	.word	0x2000008c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800412c 	.word	0x0800412c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000090 	.word	0x20000090
 8000148:	0800412c 	.word	0x0800412c

0800014c <isButtonPressed>:
int KeyReg0[3] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};
int KeyReg1[3] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};
int KeyReg2[3] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};
int KeyRegb[3];

int isButtonPressed(int index) {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
    if(button_flag[index] == 1) {
 8000154:	4a09      	ldr	r2, [pc, #36]	@ (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
        button_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	@ (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
    }
    return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	200000b4 	.word	0x200000b4

08000180 <subKeyProcess>:

void subKeyProcess(int index) {
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
    button_flag[index] = 1;
 8000188:	4a04      	ldr	r2, [pc, #16]	@ (800019c <subKeyProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	200000b4 	.word	0x200000b4

080001a0 <getKeyInput>:

void getKeyInput() {
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
    KeyRegb[0] = HAL_GPIO_ReadPin(A0_GPIO_Port, A0_Pin);
 80001a6:	2101      	movs	r1, #1
 80001a8:	486e      	ldr	r0, [pc, #440]	@ (8000364 <getKeyInput+0x1c4>)
 80001aa:	f001 fd41 	bl	8001c30 <HAL_GPIO_ReadPin>
 80001ae:	4603      	mov	r3, r0
 80001b0:	461a      	mov	r2, r3
 80001b2:	4b6d      	ldr	r3, [pc, #436]	@ (8000368 <getKeyInput+0x1c8>)
 80001b4:	601a      	str	r2, [r3, #0]
    KeyRegb[1] = HAL_GPIO_ReadPin(A1_GPIO_Port, A1_Pin);
 80001b6:	2102      	movs	r1, #2
 80001b8:	486a      	ldr	r0, [pc, #424]	@ (8000364 <getKeyInput+0x1c4>)
 80001ba:	f001 fd39 	bl	8001c30 <HAL_GPIO_ReadPin>
 80001be:	4603      	mov	r3, r0
 80001c0:	461a      	mov	r2, r3
 80001c2:	4b69      	ldr	r3, [pc, #420]	@ (8000368 <getKeyInput+0x1c8>)
 80001c4:	605a      	str	r2, [r3, #4]
    KeyRegb[2] = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 80001c6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001ca:	4868      	ldr	r0, [pc, #416]	@ (800036c <getKeyInput+0x1cc>)
 80001cc:	f001 fd30 	bl	8001c30 <HAL_GPIO_ReadPin>
 80001d0:	4603      	mov	r3, r0
 80001d2:	461a      	mov	r2, r3
 80001d4:	4b64      	ldr	r3, [pc, #400]	@ (8000368 <getKeyInput+0x1c8>)
 80001d6:	609a      	str	r2, [r3, #8]

//    int anyButtonPressed = 0;

    for(int i = 0; i < 3; i++) {
 80001d8:	2300      	movs	r3, #0
 80001da:	607b      	str	r3, [r7, #4]
 80001dc:	e0b8      	b.n	8000350 <getKeyInput+0x1b0>
        KeyReg2[i] = KeyReg1[i];
 80001de:	4a64      	ldr	r2, [pc, #400]	@ (8000370 <getKeyInput+0x1d0>)
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001e6:	4963      	ldr	r1, [pc, #396]	@ (8000374 <getKeyInput+0x1d4>)
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        KeyReg1[i] = KeyReg0[i];
 80001ee:	4a62      	ldr	r2, [pc, #392]	@ (8000378 <getKeyInput+0x1d8>)
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f6:	495e      	ldr	r1, [pc, #376]	@ (8000370 <getKeyInput+0x1d0>)
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        KeyReg0[i] = KeyRegb[i];
 80001fe:	4a5a      	ldr	r2, [pc, #360]	@ (8000368 <getKeyInput+0x1c8>)
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000206:	495c      	ldr	r1, [pc, #368]	@ (8000378 <getKeyInput+0x1d8>)
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        switch(buttonState[i]) {
 800020e:	4a5b      	ldr	r2, [pc, #364]	@ (800037c <getKeyInput+0x1dc>)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000216:	3b06      	subs	r3, #6
 8000218:	2b03      	cmp	r3, #3
 800021a:	f200 808d 	bhi.w	8000338 <getKeyInput+0x198>
 800021e:	a201      	add	r2, pc, #4	@ (adr r2, 8000224 <getKeyInput+0x84>)
 8000220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000224:	08000235 	.word	0x08000235
 8000228:	08000281 	.word	0x08000281
 800022c:	080002d7 	.word	0x080002d7
 8000230:	08000321 	.word	0x08000321
            case IDLE:
                if (KeyReg0[i] == PRESSED_STATE && KeyReg1[i] == KeyReg0[i] && KeyReg2[i] == KeyReg1[i]) {
 8000234:	4a50      	ldr	r2, [pc, #320]	@ (8000378 <getKeyInput+0x1d8>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800023c:	2b00      	cmp	r3, #0
 800023e:	f040 8081 	bne.w	8000344 <getKeyInput+0x1a4>
 8000242:	4a4b      	ldr	r2, [pc, #300]	@ (8000370 <getKeyInput+0x1d0>)
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800024a:	494b      	ldr	r1, [pc, #300]	@ (8000378 <getKeyInput+0x1d8>)
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000252:	429a      	cmp	r2, r3
 8000254:	d176      	bne.n	8000344 <getKeyInput+0x1a4>
 8000256:	4a47      	ldr	r2, [pc, #284]	@ (8000374 <getKeyInput+0x1d4>)
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800025e:	4944      	ldr	r1, [pc, #272]	@ (8000370 <getKeyInput+0x1d0>)
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000266:	429a      	cmp	r2, r3
 8000268:	d16c      	bne.n	8000344 <getKeyInput+0x1a4>
                    buttonState[i] = DEBOUNCE;
 800026a:	4a44      	ldr	r2, [pc, #272]	@ (800037c <getKeyInput+0x1dc>)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	2107      	movs	r1, #7
 8000270:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    TimeOutForKeyPress[i] = DEBOUNCE_DURATION;
 8000274:	4a42      	ldr	r2, [pc, #264]	@ (8000380 <getKeyInput+0x1e0>)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	2100      	movs	r1, #0
 800027a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                }
                break;
 800027e:	e061      	b.n	8000344 <getKeyInput+0x1a4>
            case DEBOUNCE:
                if (TimeOutForKeyPress[i] > 0) {
 8000280:	4a3f      	ldr	r2, [pc, #252]	@ (8000380 <getKeyInput+0x1e0>)
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000288:	2b00      	cmp	r3, #0
 800028a:	dd09      	ble.n	80002a0 <getKeyInput+0x100>
                    TimeOutForKeyPress[i]--;
 800028c:	4a3c      	ldr	r2, [pc, #240]	@ (8000380 <getKeyInput+0x1e0>)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000294:	1e5a      	subs	r2, r3, #1
 8000296:	493a      	ldr	r1, [pc, #232]	@ (8000380 <getKeyInput+0x1e0>)
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                        subKeyProcess(i);
                    } else {
                        buttonState[i] = IDLE;
                    }
                }
                break;
 800029e:	e054      	b.n	800034a <getKeyInput+0x1aa>
                    if (KeyReg0[i] == PRESSED_STATE) {
 80002a0:	4a35      	ldr	r2, [pc, #212]	@ (8000378 <getKeyInput+0x1d8>)
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d10e      	bne.n	80002ca <getKeyInput+0x12a>
                        buttonState[i] = PRESSED;
 80002ac:	4a33      	ldr	r2, [pc, #204]	@ (800037c <getKeyInput+0x1dc>)
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	2108      	movs	r1, #8
 80002b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                        TimeOutForKeyPress[i] = LONG_PRESS_DURATION;
 80002b6:	4a32      	ldr	r2, [pc, #200]	@ (8000380 <getKeyInput+0x1e0>)
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80002be:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                        subKeyProcess(i);
 80002c2:	6878      	ldr	r0, [r7, #4]
 80002c4:	f7ff ff5c 	bl	8000180 <subKeyProcess>
                break;
 80002c8:	e03f      	b.n	800034a <getKeyInput+0x1aa>
                        buttonState[i] = IDLE;
 80002ca:	4a2c      	ldr	r2, [pc, #176]	@ (800037c <getKeyInput+0x1dc>)
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	2106      	movs	r1, #6
 80002d0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                break;
 80002d4:	e039      	b.n	800034a <getKeyInput+0x1aa>
            case PRESSED:
                if (KeyReg0[i] == NORMAL_STATE) {
 80002d6:	4a28      	ldr	r2, [pc, #160]	@ (8000378 <getKeyInput+0x1d8>)
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002de:	2b01      	cmp	r3, #1
 80002e0:	d105      	bne.n	80002ee <getKeyInput+0x14e>
                    buttonState[i] = IDLE;
 80002e2:	4a26      	ldr	r2, [pc, #152]	@ (800037c <getKeyInput+0x1dc>)
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	2106      	movs	r1, #6
 80002e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    } else {
                        buttonState[i] = LONG_PRESSED;
                        subKeyProcess(i);
                    }
                }
                break;
 80002ec:	e02d      	b.n	800034a <getKeyInput+0x1aa>
                    if (TimeOutForKeyPress[i] > 0) {
 80002ee:	4a24      	ldr	r2, [pc, #144]	@ (8000380 <getKeyInput+0x1e0>)
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	dd09      	ble.n	800030e <getKeyInput+0x16e>
                        TimeOutForKeyPress[i]--;
 80002fa:	4a21      	ldr	r2, [pc, #132]	@ (8000380 <getKeyInput+0x1e0>)
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000302:	1e5a      	subs	r2, r3, #1
 8000304:	491e      	ldr	r1, [pc, #120]	@ (8000380 <getKeyInput+0x1e0>)
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                break;
 800030c:	e01d      	b.n	800034a <getKeyInput+0x1aa>
                        buttonState[i] = LONG_PRESSED;
 800030e:	4a1b      	ldr	r2, [pc, #108]	@ (800037c <getKeyInput+0x1dc>)
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	2109      	movs	r1, #9
 8000314:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                        subKeyProcess(i);
 8000318:	6878      	ldr	r0, [r7, #4]
 800031a:	f7ff ff31 	bl	8000180 <subKeyProcess>
                break;
 800031e:	e014      	b.n	800034a <getKeyInput+0x1aa>
            case LONG_PRESSED:
                if (KeyReg0[i] == NORMAL_STATE) {
 8000320:	4a15      	ldr	r2, [pc, #84]	@ (8000378 <getKeyInput+0x1d8>)
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000328:	2b01      	cmp	r3, #1
 800032a:	d10d      	bne.n	8000348 <getKeyInput+0x1a8>
                    buttonState[i] = IDLE;
 800032c:	4a13      	ldr	r2, [pc, #76]	@ (800037c <getKeyInput+0x1dc>)
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	2106      	movs	r1, #6
 8000332:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                }
                break;
 8000336:	e007      	b.n	8000348 <getKeyInput+0x1a8>
            default:
                buttonState[i] = IDLE;
 8000338:	4a10      	ldr	r2, [pc, #64]	@ (800037c <getKeyInput+0x1dc>)
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	2106      	movs	r1, #6
 800033e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                break;
 8000342:	e002      	b.n	800034a <getKeyInput+0x1aa>
                break;
 8000344:	bf00      	nop
 8000346:	e000      	b.n	800034a <getKeyInput+0x1aa>
                break;
 8000348:	bf00      	nop
    for(int i = 0; i < 3; i++) {
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	3301      	adds	r3, #1
 800034e:	607b      	str	r3, [r7, #4]
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	2b02      	cmp	r3, #2
 8000354:	f77f af43 	ble.w	80001de <getKeyInput+0x3e>
        }
    }
}
 8000358:	bf00      	nop
 800035a:	bf00      	nop
 800035c:	3708      	adds	r7, #8
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	40010800 	.word	0x40010800
 8000368:	200000c0 	.word	0x200000c0
 800036c:	40011000 	.word	0x40011000
 8000370:	20000018 	.word	0x20000018
 8000374:	20000024 	.word	0x20000024
 8000378:	2000000c 	.word	0x2000000c
 800037c:	20000000 	.word	0x20000000
 8000380:	200000a8 	.word	0x200000a8

08000384 <set>:

int count_set;
int seg1;
int seg2;

void set() {
 8000384:	b480      	push	{r7}
 8000386:	af00      	add	r7, sp, #0
	count_set = 0;
 8000388:	4b06      	ldr	r3, [pc, #24]	@ (80003a4 <set+0x20>)
 800038a:	2200      	movs	r2, #0
 800038c:	601a      	str	r2, [r3, #0]
	seg1 = 0;
 800038e:	4b06      	ldr	r3, [pc, #24]	@ (80003a8 <set+0x24>)
 8000390:	2200      	movs	r2, #0
 8000392:	601a      	str	r2, [r3, #0]
	seg2 = 0;
 8000394:	4b05      	ldr	r3, [pc, #20]	@ (80003ac <set+0x28>)
 8000396:	2200      	movs	r2, #0
 8000398:	601a      	str	r2, [r3, #0]
}
 800039a:	bf00      	nop
 800039c:	46bd      	mov	sp, r7
 800039e:	bc80      	pop	{r7}
 80003a0:	4770      	bx	lr
 80003a2:	bf00      	nop
 80003a4:	200000cc 	.word	0x200000cc
 80003a8:	200000d0 	.word	0x200000d0
 80003ac:	200000d4 	.word	0x200000d4

080003b0 <updateCountSet>:

void updateCountSet() {
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
	if (timer_flag[1] == 1) {
 80003b4:	4b07      	ldr	r3, [pc, #28]	@ (80003d4 <updateCountSet+0x24>)
 80003b6:	685b      	ldr	r3, [r3, #4]
 80003b8:	2b01      	cmp	r3, #1
 80003ba:	d109      	bne.n	80003d0 <updateCountSet+0x20>
		count_set++;
 80003bc:	4b06      	ldr	r3, [pc, #24]	@ (80003d8 <updateCountSet+0x28>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	3301      	adds	r3, #1
 80003c2:	4a05      	ldr	r2, [pc, #20]	@ (80003d8 <updateCountSet+0x28>)
 80003c4:	6013      	str	r3, [r2, #0]
		setTimer(1, 1000);
 80003c6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80003ca:	2001      	movs	r0, #1
 80003cc:	f001 f800 	bl	80013d0 <setTimer>
	}
}
 80003d0:	bf00      	nop
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	200001d8 	.word	0x200001d8
 80003d8:	200000cc 	.word	0x200000cc

080003dc <fsm_auto_run>:


void fsm_auto_run() {
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
	switch (status) {
 80003e0:	4b9f      	ldr	r3, [pc, #636]	@ (8000660 <fsm_auto_run+0x284>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	3b01      	subs	r3, #1
 80003e6:	2b04      	cmp	r3, #4
 80003e8:	f200 81a1 	bhi.w	800072e <fsm_auto_run+0x352>
 80003ec:	a201      	add	r2, pc, #4	@ (adr r2, 80003f4 <fsm_auto_run+0x18>)
 80003ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003f2:	bf00      	nop
 80003f4:	08000409 	.word	0x08000409
 80003f8:	08000443 	.word	0x08000443
 80003fc:	080004f7 	.word	0x080004f7
 8000400:	080005ab 	.word	0x080005ab
 8000404:	0800067d 	.word	0x0800067d
	case INIT:
		Light1(RESET, RESET);
 8000408:	2100      	movs	r1, #0
 800040a:	2000      	movs	r0, #0
 800040c:	f001 f864 	bl	80014d8 <Light1>
		Light2(RESET, RESET);
 8000410:	2100      	movs	r1, #0
 8000412:	2000      	movs	r0, #0
 8000414:	f001 f87a 	bl	800150c <Light2>
		Light3(RESET, RESET);
 8000418:	2100      	movs	r1, #0
 800041a:	2000      	movs	r0, #0
 800041c:	f001 f892 	bl	8001544 <Light3>
		Light4(RESET, RESET);
 8000420:	2100      	movs	r1, #0
 8000422:	2000      	movs	r0, #0
 8000424:	f001 f8aa 	bl	800157c <Light4>
		setTimer(1, 1000);
 8000428:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800042c:	2001      	movs	r0, #1
 800042e:	f000 ffcf 	bl	80013d0 <setTimer>
		set();
 8000432:	f7ff ffa7 	bl	8000384 <set>
        lcd_clear_display();
 8000436:	f000 fca0 	bl	8000d7a <lcd_clear_display>
		status = AUTO_RED_GREEN;
 800043a:	4b89      	ldr	r3, [pc, #548]	@ (8000660 <fsm_auto_run+0x284>)
 800043c:	2202      	movs	r2, #2
 800043e:	601a      	str	r2, [r3, #0]
		break;
 8000440:	e17e      	b.n	8000740 <fsm_auto_run+0x364>

	case AUTO_RED_GREEN:
		Light1(SET, SET);
 8000442:	2101      	movs	r1, #1
 8000444:	2001      	movs	r0, #1
 8000446:	f001 f847 	bl	80014d8 <Light1>
		Light2(SET, RESET);
 800044a:	2100      	movs	r1, #0
 800044c:	2001      	movs	r0, #1
 800044e:	f001 f85d 	bl	800150c <Light2>
		Light3(SET, SET);
 8000452:	2101      	movs	r1, #1
 8000454:	2001      	movs	r0, #1
 8000456:	f001 f875 	bl	8001544 <Light3>
		Light4(SET, RESET);
 800045a:	2100      	movs	r1, #0
 800045c:	2001      	movs	r0, #1
 800045e:	f001 f88d 	bl	800157c <Light4>

		seg1 = red_value - count_set;
 8000462:	4b80      	ldr	r3, [pc, #512]	@ (8000664 <fsm_auto_run+0x288>)
 8000464:	681a      	ldr	r2, [r3, #0]
 8000466:	4b80      	ldr	r3, [pc, #512]	@ (8000668 <fsm_auto_run+0x28c>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	1ad3      	subs	r3, r2, r3
 800046c:	4a7f      	ldr	r2, [pc, #508]	@ (800066c <fsm_auto_run+0x290>)
 800046e:	6013      	str	r3, [r2, #0]
		seg2 = green_value - count_set;
 8000470:	4b7f      	ldr	r3, [pc, #508]	@ (8000670 <fsm_auto_run+0x294>)
 8000472:	681a      	ldr	r2, [r3, #0]
 8000474:	4b7c      	ldr	r3, [pc, #496]	@ (8000668 <fsm_auto_run+0x28c>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	1ad3      	subs	r3, r2, r3
 800047a:	4a7e      	ldr	r2, [pc, #504]	@ (8000674 <fsm_auto_run+0x298>)
 800047c:	6013      	str	r3, [r2, #0]
		lcd_display_value(1, 0, seg1);
 800047e:	4b7b      	ldr	r3, [pc, #492]	@ (800066c <fsm_auto_run+0x290>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	461a      	mov	r2, r3
 8000484:	2100      	movs	r1, #0
 8000486:	2001      	movs	r0, #1
 8000488:	f000 fc7e 	bl	8000d88 <lcd_display_value>
		lcd_display_value(2, 0, seg2);
 800048c:	4b79      	ldr	r3, [pc, #484]	@ (8000674 <fsm_auto_run+0x298>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	461a      	mov	r2, r3
 8000492:	2100      	movs	r1, #0
 8000494:	2002      	movs	r0, #2
 8000496:	f000 fc77 	bl	8000d88 <lcd_display_value>

		updateCountSet();
 800049a:	f7ff ff89 	bl	80003b0 <updateCountSet>
		if (count_set >= red_value - yellow_value) {
 800049e:	4b71      	ldr	r3, [pc, #452]	@ (8000664 <fsm_auto_run+0x288>)
 80004a0:	681a      	ldr	r2, [r3, #0]
 80004a2:	4b75      	ldr	r3, [pc, #468]	@ (8000678 <fsm_auto_run+0x29c>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	1ad2      	subs	r2, r2, r3
 80004a8:	4b6f      	ldr	r3, [pc, #444]	@ (8000668 <fsm_auto_run+0x28c>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	429a      	cmp	r2, r3
 80004ae:	dc05      	bgt.n	80004bc <fsm_auto_run+0xe0>
			count_set = 0;
 80004b0:	4b6d      	ldr	r3, [pc, #436]	@ (8000668 <fsm_auto_run+0x28c>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	601a      	str	r2, [r3, #0]
			status = AUTO_RED_YELLOW;
 80004b6:	4b6a      	ldr	r3, [pc, #424]	@ (8000660 <fsm_auto_run+0x284>)
 80004b8:	2203      	movs	r2, #3
 80004ba:	601a      	str	r2, [r3, #0]
		}
		if (isButtonPressed(0) == 1) {
 80004bc:	2000      	movs	r0, #0
 80004be:	f7ff fe45 	bl	800014c <isButtonPressed>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b01      	cmp	r3, #1
 80004c6:	f040 8134 	bne.w	8000732 <fsm_auto_run+0x356>
			set();
 80004ca:	f7ff ff5b 	bl	8000384 <set>
			status = MAN_RED;
 80004ce:	4b64      	ldr	r3, [pc, #400]	@ (8000660 <fsm_auto_run+0x284>)
 80004d0:	220c      	movs	r2, #12
 80004d2:	601a      	str	r2, [r3, #0]
			Light1(RESET, RESET);
 80004d4:	2100      	movs	r1, #0
 80004d6:	2000      	movs	r0, #0
 80004d8:	f000 fffe 	bl	80014d8 <Light1>
			Light2(RESET, RESET);
 80004dc:	2100      	movs	r1, #0
 80004de:	2000      	movs	r0, #0
 80004e0:	f001 f814 	bl	800150c <Light2>
			Light3(RESET, RESET);
 80004e4:	2100      	movs	r1, #0
 80004e6:	2000      	movs	r0, #0
 80004e8:	f001 f82c 	bl	8001544 <Light3>
			Light4(RESET, RESET);
 80004ec:	2100      	movs	r1, #0
 80004ee:	2000      	movs	r0, #0
 80004f0:	f001 f844 	bl	800157c <Light4>
		}
		break;
 80004f4:	e11d      	b.n	8000732 <fsm_auto_run+0x356>

	case AUTO_RED_YELLOW:
		Light1(SET, SET);
 80004f6:	2101      	movs	r1, #1
 80004f8:	2001      	movs	r0, #1
 80004fa:	f000 ffed 	bl	80014d8 <Light1>
		Light2(RESET, SET);
 80004fe:	2101      	movs	r1, #1
 8000500:	2000      	movs	r0, #0
 8000502:	f001 f803 	bl	800150c <Light2>
		Light3(SET, SET);
 8000506:	2101      	movs	r1, #1
 8000508:	2001      	movs	r0, #1
 800050a:	f001 f81b 	bl	8001544 <Light3>
		Light4(RESET, SET);
 800050e:	2101      	movs	r1, #1
 8000510:	2000      	movs	r0, #0
 8000512:	f001 f833 	bl	800157c <Light4>

		seg1 = yellow_value - count_set;
 8000516:	4b58      	ldr	r3, [pc, #352]	@ (8000678 <fsm_auto_run+0x29c>)
 8000518:	681a      	ldr	r2, [r3, #0]
 800051a:	4b53      	ldr	r3, [pc, #332]	@ (8000668 <fsm_auto_run+0x28c>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	1ad3      	subs	r3, r2, r3
 8000520:	4a52      	ldr	r2, [pc, #328]	@ (800066c <fsm_auto_run+0x290>)
 8000522:	6013      	str	r3, [r2, #0]
		seg2 = yellow_value - count_set;
 8000524:	4b54      	ldr	r3, [pc, #336]	@ (8000678 <fsm_auto_run+0x29c>)
 8000526:	681a      	ldr	r2, [r3, #0]
 8000528:	4b4f      	ldr	r3, [pc, #316]	@ (8000668 <fsm_auto_run+0x28c>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	1ad3      	subs	r3, r2, r3
 800052e:	4a51      	ldr	r2, [pc, #324]	@ (8000674 <fsm_auto_run+0x298>)
 8000530:	6013      	str	r3, [r2, #0]
		lcd_display_value(1, 0, seg1);
 8000532:	4b4e      	ldr	r3, [pc, #312]	@ (800066c <fsm_auto_run+0x290>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	461a      	mov	r2, r3
 8000538:	2100      	movs	r1, #0
 800053a:	2001      	movs	r0, #1
 800053c:	f000 fc24 	bl	8000d88 <lcd_display_value>
		lcd_display_value(2, 0, seg2);
 8000540:	4b4c      	ldr	r3, [pc, #304]	@ (8000674 <fsm_auto_run+0x298>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	461a      	mov	r2, r3
 8000546:	2100      	movs	r1, #0
 8000548:	2002      	movs	r0, #2
 800054a:	f000 fc1d 	bl	8000d88 <lcd_display_value>

		updateCountSet();
 800054e:	f7ff ff2f 	bl	80003b0 <updateCountSet>
		if (count_set >= red_value - green_value) {
 8000552:	4b44      	ldr	r3, [pc, #272]	@ (8000664 <fsm_auto_run+0x288>)
 8000554:	681a      	ldr	r2, [r3, #0]
 8000556:	4b46      	ldr	r3, [pc, #280]	@ (8000670 <fsm_auto_run+0x294>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	1ad2      	subs	r2, r2, r3
 800055c:	4b42      	ldr	r3, [pc, #264]	@ (8000668 <fsm_auto_run+0x28c>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	429a      	cmp	r2, r3
 8000562:	dc05      	bgt.n	8000570 <fsm_auto_run+0x194>
			count_set = 0;
 8000564:	4b40      	ldr	r3, [pc, #256]	@ (8000668 <fsm_auto_run+0x28c>)
 8000566:	2200      	movs	r2, #0
 8000568:	601a      	str	r2, [r3, #0]
			status = AUTO_GREEN_RED;
 800056a:	4b3d      	ldr	r3, [pc, #244]	@ (8000660 <fsm_auto_run+0x284>)
 800056c:	2204      	movs	r2, #4
 800056e:	601a      	str	r2, [r3, #0]
		}
		if (isButtonPressed(0) == 1) {
 8000570:	2000      	movs	r0, #0
 8000572:	f7ff fdeb 	bl	800014c <isButtonPressed>
 8000576:	4603      	mov	r3, r0
 8000578:	2b01      	cmp	r3, #1
 800057a:	f040 80dc 	bne.w	8000736 <fsm_auto_run+0x35a>
			set();
 800057e:	f7ff ff01 	bl	8000384 <set>
			status = MAN_RED;
 8000582:	4b37      	ldr	r3, [pc, #220]	@ (8000660 <fsm_auto_run+0x284>)
 8000584:	220c      	movs	r2, #12
 8000586:	601a      	str	r2, [r3, #0]
			Light1(RESET, RESET);
 8000588:	2100      	movs	r1, #0
 800058a:	2000      	movs	r0, #0
 800058c:	f000 ffa4 	bl	80014d8 <Light1>
			Light2(RESET, RESET);
 8000590:	2100      	movs	r1, #0
 8000592:	2000      	movs	r0, #0
 8000594:	f000 ffba 	bl	800150c <Light2>
			Light3(RESET, RESET);
 8000598:	2100      	movs	r1, #0
 800059a:	2000      	movs	r0, #0
 800059c:	f000 ffd2 	bl	8001544 <Light3>
			Light4(RESET, RESET);
 80005a0:	2100      	movs	r1, #0
 80005a2:	2000      	movs	r0, #0
 80005a4:	f000 ffea 	bl	800157c <Light4>
		}
		break;
 80005a8:	e0c5      	b.n	8000736 <fsm_auto_run+0x35a>

	case AUTO_GREEN_RED:
		Light1(SET, RESET);
 80005aa:	2100      	movs	r1, #0
 80005ac:	2001      	movs	r0, #1
 80005ae:	f000 ff93 	bl	80014d8 <Light1>
		Light2(SET, SET);
 80005b2:	2101      	movs	r1, #1
 80005b4:	2001      	movs	r0, #1
 80005b6:	f000 ffa9 	bl	800150c <Light2>
		Light3(SET, RESET);
 80005ba:	2100      	movs	r1, #0
 80005bc:	2001      	movs	r0, #1
 80005be:	f000 ffc1 	bl	8001544 <Light3>
		Light4(SET, SET);
 80005c2:	2101      	movs	r1, #1
 80005c4:	2001      	movs	r0, #1
 80005c6:	f000 ffd9 	bl	800157c <Light4>
		seg1 = green_value - count_set;
 80005ca:	4b29      	ldr	r3, [pc, #164]	@ (8000670 <fsm_auto_run+0x294>)
 80005cc:	681a      	ldr	r2, [r3, #0]
 80005ce:	4b26      	ldr	r3, [pc, #152]	@ (8000668 <fsm_auto_run+0x28c>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	1ad3      	subs	r3, r2, r3
 80005d4:	4a25      	ldr	r2, [pc, #148]	@ (800066c <fsm_auto_run+0x290>)
 80005d6:	6013      	str	r3, [r2, #0]
		seg2 = red_value - count_set;
 80005d8:	4b22      	ldr	r3, [pc, #136]	@ (8000664 <fsm_auto_run+0x288>)
 80005da:	681a      	ldr	r2, [r3, #0]
 80005dc:	4b22      	ldr	r3, [pc, #136]	@ (8000668 <fsm_auto_run+0x28c>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	1ad3      	subs	r3, r2, r3
 80005e2:	4a24      	ldr	r2, [pc, #144]	@ (8000674 <fsm_auto_run+0x298>)
 80005e4:	6013      	str	r3, [r2, #0]
		lcd_display_value(1, 0, seg1);
 80005e6:	4b21      	ldr	r3, [pc, #132]	@ (800066c <fsm_auto_run+0x290>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	461a      	mov	r2, r3
 80005ec:	2100      	movs	r1, #0
 80005ee:	2001      	movs	r0, #1
 80005f0:	f000 fbca 	bl	8000d88 <lcd_display_value>
		lcd_display_value(2, 0, seg2);
 80005f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000674 <fsm_auto_run+0x298>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	461a      	mov	r2, r3
 80005fa:	2100      	movs	r1, #0
 80005fc:	2002      	movs	r0, #2
 80005fe:	f000 fbc3 	bl	8000d88 <lcd_display_value>

		updateCountSet();
 8000602:	f7ff fed5 	bl	80003b0 <updateCountSet>
		if (count_set >= red_value - yellow_value) {
 8000606:	4b17      	ldr	r3, [pc, #92]	@ (8000664 <fsm_auto_run+0x288>)
 8000608:	681a      	ldr	r2, [r3, #0]
 800060a:	4b1b      	ldr	r3, [pc, #108]	@ (8000678 <fsm_auto_run+0x29c>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	1ad2      	subs	r2, r2, r3
 8000610:	4b15      	ldr	r3, [pc, #84]	@ (8000668 <fsm_auto_run+0x28c>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	429a      	cmp	r2, r3
 8000616:	dc05      	bgt.n	8000624 <fsm_auto_run+0x248>
			count_set = 0;
 8000618:	4b13      	ldr	r3, [pc, #76]	@ (8000668 <fsm_auto_run+0x28c>)
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
			status = AUTO_YELLOW_RED;
 800061e:	4b10      	ldr	r3, [pc, #64]	@ (8000660 <fsm_auto_run+0x284>)
 8000620:	2205      	movs	r2, #5
 8000622:	601a      	str	r2, [r3, #0]
		}
		if (isButtonPressed(0) == 1) {
 8000624:	2000      	movs	r0, #0
 8000626:	f7ff fd91 	bl	800014c <isButtonPressed>
 800062a:	4603      	mov	r3, r0
 800062c:	2b01      	cmp	r3, #1
 800062e:	f040 8084 	bne.w	800073a <fsm_auto_run+0x35e>
			set();
 8000632:	f7ff fea7 	bl	8000384 <set>
			status = MAN_RED;
 8000636:	4b0a      	ldr	r3, [pc, #40]	@ (8000660 <fsm_auto_run+0x284>)
 8000638:	220c      	movs	r2, #12
 800063a:	601a      	str	r2, [r3, #0]
			Light1(RESET, RESET);
 800063c:	2100      	movs	r1, #0
 800063e:	2000      	movs	r0, #0
 8000640:	f000 ff4a 	bl	80014d8 <Light1>
			Light2(RESET, RESET);
 8000644:	2100      	movs	r1, #0
 8000646:	2000      	movs	r0, #0
 8000648:	f000 ff60 	bl	800150c <Light2>
			Light3(RESET, RESET);
 800064c:	2100      	movs	r1, #0
 800064e:	2000      	movs	r0, #0
 8000650:	f000 ff78 	bl	8001544 <Light3>
			Light4(RESET, RESET);
 8000654:	2100      	movs	r1, #0
 8000656:	2000      	movs	r0, #0
 8000658:	f000 ff90 	bl	800157c <Light4>
		}
		break;
 800065c:	e06d      	b.n	800073a <fsm_auto_run+0x35e>
 800065e:	bf00      	nop
 8000660:	200000d8 	.word	0x200000d8
 8000664:	200000dc 	.word	0x200000dc
 8000668:	200000cc 	.word	0x200000cc
 800066c:	200000d0 	.word	0x200000d0
 8000670:	200000e0 	.word	0x200000e0
 8000674:	200000d4 	.word	0x200000d4
 8000678:	200000e4 	.word	0x200000e4

	case AUTO_YELLOW_RED:
		Light1(RESET, SET);
 800067c:	2101      	movs	r1, #1
 800067e:	2000      	movs	r0, #0
 8000680:	f000 ff2a 	bl	80014d8 <Light1>
		Light2(SET, SET);
 8000684:	2101      	movs	r1, #1
 8000686:	2001      	movs	r0, #1
 8000688:	f000 ff40 	bl	800150c <Light2>
		Light3(RESET, SET);
 800068c:	2101      	movs	r1, #1
 800068e:	2000      	movs	r0, #0
 8000690:	f000 ff58 	bl	8001544 <Light3>
		Light4(SET, SET);
 8000694:	2101      	movs	r1, #1
 8000696:	2001      	movs	r0, #1
 8000698:	f000 ff70 	bl	800157c <Light4>
		seg1 = yellow_value - count_set;
 800069c:	4b29      	ldr	r3, [pc, #164]	@ (8000744 <fsm_auto_run+0x368>)
 800069e:	681a      	ldr	r2, [r3, #0]
 80006a0:	4b29      	ldr	r3, [pc, #164]	@ (8000748 <fsm_auto_run+0x36c>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	1ad3      	subs	r3, r2, r3
 80006a6:	4a29      	ldr	r2, [pc, #164]	@ (800074c <fsm_auto_run+0x370>)
 80006a8:	6013      	str	r3, [r2, #0]
		seg2 = yellow_value - count_set;
 80006aa:	4b26      	ldr	r3, [pc, #152]	@ (8000744 <fsm_auto_run+0x368>)
 80006ac:	681a      	ldr	r2, [r3, #0]
 80006ae:	4b26      	ldr	r3, [pc, #152]	@ (8000748 <fsm_auto_run+0x36c>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	1ad3      	subs	r3, r2, r3
 80006b4:	4a26      	ldr	r2, [pc, #152]	@ (8000750 <fsm_auto_run+0x374>)
 80006b6:	6013      	str	r3, [r2, #0]
		lcd_display_value(1, 0, seg1);
 80006b8:	4b24      	ldr	r3, [pc, #144]	@ (800074c <fsm_auto_run+0x370>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	461a      	mov	r2, r3
 80006be:	2100      	movs	r1, #0
 80006c0:	2001      	movs	r0, #1
 80006c2:	f000 fb61 	bl	8000d88 <lcd_display_value>
		lcd_display_value(2, 0, seg2);
 80006c6:	4b22      	ldr	r3, [pc, #136]	@ (8000750 <fsm_auto_run+0x374>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	461a      	mov	r2, r3
 80006cc:	2100      	movs	r1, #0
 80006ce:	2002      	movs	r0, #2
 80006d0:	f000 fb5a 	bl	8000d88 <lcd_display_value>

		updateCountSet();
 80006d4:	f7ff fe6c 	bl	80003b0 <updateCountSet>
		if (count_set >= red_value - green_value) {
 80006d8:	4b1e      	ldr	r3, [pc, #120]	@ (8000754 <fsm_auto_run+0x378>)
 80006da:	681a      	ldr	r2, [r3, #0]
 80006dc:	4b1e      	ldr	r3, [pc, #120]	@ (8000758 <fsm_auto_run+0x37c>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	1ad2      	subs	r2, r2, r3
 80006e2:	4b19      	ldr	r3, [pc, #100]	@ (8000748 <fsm_auto_run+0x36c>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	429a      	cmp	r2, r3
 80006e8:	dc05      	bgt.n	80006f6 <fsm_auto_run+0x31a>
			count_set = 0;
 80006ea:	4b17      	ldr	r3, [pc, #92]	@ (8000748 <fsm_auto_run+0x36c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
			status = AUTO_RED_GREEN;
 80006f0:	4b1a      	ldr	r3, [pc, #104]	@ (800075c <fsm_auto_run+0x380>)
 80006f2:	2202      	movs	r2, #2
 80006f4:	601a      	str	r2, [r3, #0]
		}
		if (isButtonPressed(0) == 1) {
 80006f6:	2000      	movs	r0, #0
 80006f8:	f7ff fd28 	bl	800014c <isButtonPressed>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b01      	cmp	r3, #1
 8000700:	d11d      	bne.n	800073e <fsm_auto_run+0x362>
			set();
 8000702:	f7ff fe3f 	bl	8000384 <set>
			status = MAN_RED;
 8000706:	4b15      	ldr	r3, [pc, #84]	@ (800075c <fsm_auto_run+0x380>)
 8000708:	220c      	movs	r2, #12
 800070a:	601a      	str	r2, [r3, #0]
			Light1(RESET, RESET);
 800070c:	2100      	movs	r1, #0
 800070e:	2000      	movs	r0, #0
 8000710:	f000 fee2 	bl	80014d8 <Light1>
			Light2(RESET, RESET);
 8000714:	2100      	movs	r1, #0
 8000716:	2000      	movs	r0, #0
 8000718:	f000 fef8 	bl	800150c <Light2>
			Light3(RESET, RESET);
 800071c:	2100      	movs	r1, #0
 800071e:	2000      	movs	r0, #0
 8000720:	f000 ff10 	bl	8001544 <Light3>
			Light4(RESET, RESET);
 8000724:	2100      	movs	r1, #0
 8000726:	2000      	movs	r0, #0
 8000728:	f000 ff28 	bl	800157c <Light4>
		}
		break;
 800072c:	e007      	b.n	800073e <fsm_auto_run+0x362>

	default:
		break;
 800072e:	bf00      	nop
 8000730:	e006      	b.n	8000740 <fsm_auto_run+0x364>
		break;
 8000732:	bf00      	nop
 8000734:	e004      	b.n	8000740 <fsm_auto_run+0x364>
		break;
 8000736:	bf00      	nop
 8000738:	e002      	b.n	8000740 <fsm_auto_run+0x364>
		break;
 800073a:	bf00      	nop
 800073c:	e000      	b.n	8000740 <fsm_auto_run+0x364>
		break;
 800073e:	bf00      	nop
	}
}
 8000740:	bf00      	nop
 8000742:	bd80      	pop	{r7, pc}
 8000744:	200000e4 	.word	0x200000e4
 8000748:	200000cc 	.word	0x200000cc
 800074c:	200000d0 	.word	0x200000d0
 8000750:	200000d4 	.word	0x200000d4
 8000754:	200000dc 	.word	0x200000dc
 8000758:	200000e0 	.word	0x200000e0
 800075c:	200000d8 	.word	0x200000d8

08000760 <fsm_manual>:
 *      Author: phanh
 */

#include "fsm_manual.h"

void fsm_manual() {
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
	switch (status) {
 8000764:	4b86      	ldr	r3, [pc, #536]	@ (8000980 <fsm_manual+0x220>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	2b0e      	cmp	r3, #14
 800076a:	f000 80ad 	beq.w	80008c8 <fsm_manual+0x168>
 800076e:	2b0e      	cmp	r3, #14
 8000770:	f300 80fc 	bgt.w	800096c <fsm_manual+0x20c>
 8000774:	2b0c      	cmp	r3, #12
 8000776:	d002      	beq.n	800077e <fsm_manual+0x1e>
 8000778:	2b0d      	cmp	r3, #13
 800077a:	d053      	beq.n	8000824 <fsm_manual+0xc4>
			lcd_display_value(2, 14, set_yellow);
		}
		break;

	default:
		break;
 800077c:	e0f6      	b.n	800096c <fsm_manual+0x20c>
		Light1(SET, SET);
 800077e:	2101      	movs	r1, #1
 8000780:	2001      	movs	r0, #1
 8000782:	f000 fea9 	bl	80014d8 <Light1>
		Light2(SET, SET);
 8000786:	2101      	movs	r1, #1
 8000788:	2001      	movs	r0, #1
 800078a:	f000 febf 	bl	800150c <Light2>
		Light3(SET, SET);
 800078e:	2101      	movs	r1, #1
 8000790:	2001      	movs	r0, #1
 8000792:	f000 fed7 	bl	8001544 <Light3>
		Light4(SET, SET);
 8000796:	2101      	movs	r1, #1
 8000798:	2001      	movs	r0, #1
 800079a:	f000 feef 	bl	800157c <Light4>
		lcd_goto_XY(1, 0);
 800079e:	2100      	movs	r1, #0
 80007a0:	2001      	movs	r0, #1
 80007a2:	f000 fb0d 	bl	8000dc0 <lcd_goto_XY>
		lcd_send_string("SET RED TIME");
 80007a6:	4877      	ldr	r0, [pc, #476]	@ (8000984 <fsm_manual+0x224>)
 80007a8:	f000 fad2 	bl	8000d50 <lcd_send_string>
		lcd_goto_XY(2, 0);
 80007ac:	2100      	movs	r1, #0
 80007ae:	2002      	movs	r0, #2
 80007b0:	f000 fb06 	bl	8000dc0 <lcd_goto_XY>
		lcd_send_string(" RED TIME: ");
 80007b4:	4874      	ldr	r0, [pc, #464]	@ (8000988 <fsm_manual+0x228>)
 80007b6:	f000 facb 	bl	8000d50 <lcd_send_string>
		lcd_display_value(2, 12, set_red);
 80007ba:	4b74      	ldr	r3, [pc, #464]	@ (800098c <fsm_manual+0x22c>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	461a      	mov	r2, r3
 80007c0:	210c      	movs	r1, #12
 80007c2:	2002      	movs	r0, #2
 80007c4:	f000 fae0 	bl	8000d88 <lcd_display_value>
		if (isButtonPressed(0) == 1) {
 80007c8:	2000      	movs	r0, #0
 80007ca:	f7ff fcbf 	bl	800014c <isButtonPressed>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b01      	cmp	r3, #1
 80007d2:	d102      	bne.n	80007da <fsm_manual+0x7a>
			status = MAN_GREEN;
 80007d4:	4b6a      	ldr	r3, [pc, #424]	@ (8000980 <fsm_manual+0x220>)
 80007d6:	220d      	movs	r2, #13
 80007d8:	601a      	str	r2, [r3, #0]
		if (isButtonPressed(1) == 1) {
 80007da:	2001      	movs	r0, #1
 80007dc:	f7ff fcb6 	bl	800014c <isButtonPressed>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b01      	cmp	r3, #1
 80007e4:	f040 80c4 	bne.w	8000970 <fsm_manual+0x210>
			set_red++;
 80007e8:	4b68      	ldr	r3, [pc, #416]	@ (800098c <fsm_manual+0x22c>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	3301      	adds	r3, #1
 80007ee:	4a67      	ldr	r2, [pc, #412]	@ (800098c <fsm_manual+0x22c>)
 80007f0:	6013      	str	r3, [r2, #0]
			status = SET_RED;
 80007f2:	4b63      	ldr	r3, [pc, #396]	@ (8000980 <fsm_manual+0x220>)
 80007f4:	220f      	movs	r2, #15
 80007f6:	601a      	str	r2, [r3, #0]
			lcd_goto_XY(1, 0);
 80007f8:	2100      	movs	r1, #0
 80007fa:	2001      	movs	r0, #1
 80007fc:	f000 fae0 	bl	8000dc0 <lcd_goto_XY>
			lcd_send_string("SET RED TIME");
 8000800:	4860      	ldr	r0, [pc, #384]	@ (8000984 <fsm_manual+0x224>)
 8000802:	f000 faa5 	bl	8000d50 <lcd_send_string>
			lcd_goto_XY(2, 0);
 8000806:	2100      	movs	r1, #0
 8000808:	2002      	movs	r0, #2
 800080a:	f000 fad9 	bl	8000dc0 <lcd_goto_XY>
			lcd_send_string(" RED TIME: ");
 800080e:	485e      	ldr	r0, [pc, #376]	@ (8000988 <fsm_manual+0x228>)
 8000810:	f000 fa9e 	bl	8000d50 <lcd_send_string>
			lcd_display_value(2, 12, set_red);
 8000814:	4b5d      	ldr	r3, [pc, #372]	@ (800098c <fsm_manual+0x22c>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	461a      	mov	r2, r3
 800081a:	210c      	movs	r1, #12
 800081c:	2002      	movs	r0, #2
 800081e:	f000 fab3 	bl	8000d88 <lcd_display_value>
		break;
 8000822:	e0a5      	b.n	8000970 <fsm_manual+0x210>
		Light1(SET, RESET);
 8000824:	2100      	movs	r1, #0
 8000826:	2001      	movs	r0, #1
 8000828:	f000 fe56 	bl	80014d8 <Light1>
		Light2(SET, RESET);
 800082c:	2100      	movs	r1, #0
 800082e:	2001      	movs	r0, #1
 8000830:	f000 fe6c 	bl	800150c <Light2>
		Light3(SET, RESET);
 8000834:	2100      	movs	r1, #0
 8000836:	2001      	movs	r0, #1
 8000838:	f000 fe84 	bl	8001544 <Light3>
		Light4(SET, RESET);
 800083c:	2100      	movs	r1, #0
 800083e:	2001      	movs	r0, #1
 8000840:	f000 fe9c 	bl	800157c <Light4>
		lcd_goto_XY(1, 0);
 8000844:	2100      	movs	r1, #0
 8000846:	2001      	movs	r0, #1
 8000848:	f000 faba 	bl	8000dc0 <lcd_goto_XY>
		lcd_send_string("SET GREEN TIME");
 800084c:	4850      	ldr	r0, [pc, #320]	@ (8000990 <fsm_manual+0x230>)
 800084e:	f000 fa7f 	bl	8000d50 <lcd_send_string>
		lcd_goto_XY(2, 0);
 8000852:	2100      	movs	r1, #0
 8000854:	2002      	movs	r0, #2
 8000856:	f000 fab3 	bl	8000dc0 <lcd_goto_XY>
		lcd_send_string(" GREEN TIME: ");
 800085a:	484e      	ldr	r0, [pc, #312]	@ (8000994 <fsm_manual+0x234>)
 800085c:	f000 fa78 	bl	8000d50 <lcd_send_string>
		lcd_display_value(2, 13, set_green);
 8000860:	4b4d      	ldr	r3, [pc, #308]	@ (8000998 <fsm_manual+0x238>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	461a      	mov	r2, r3
 8000866:	210d      	movs	r1, #13
 8000868:	2002      	movs	r0, #2
 800086a:	f000 fa8d 	bl	8000d88 <lcd_display_value>
		if (isButtonPressed(0) == 1) {
 800086e:	2000      	movs	r0, #0
 8000870:	f7ff fc6c 	bl	800014c <isButtonPressed>
 8000874:	4603      	mov	r3, r0
 8000876:	2b01      	cmp	r3, #1
 8000878:	d102      	bne.n	8000880 <fsm_manual+0x120>
			status = MAN_YELLOW;
 800087a:	4b41      	ldr	r3, [pc, #260]	@ (8000980 <fsm_manual+0x220>)
 800087c:	220e      	movs	r2, #14
 800087e:	601a      	str	r2, [r3, #0]
		if (isButtonPressed(1) == 1) {
 8000880:	2001      	movs	r0, #1
 8000882:	f7ff fc63 	bl	800014c <isButtonPressed>
 8000886:	4603      	mov	r3, r0
 8000888:	2b01      	cmp	r3, #1
 800088a:	d173      	bne.n	8000974 <fsm_manual+0x214>
			set_green++;
 800088c:	4b42      	ldr	r3, [pc, #264]	@ (8000998 <fsm_manual+0x238>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	3301      	adds	r3, #1
 8000892:	4a41      	ldr	r2, [pc, #260]	@ (8000998 <fsm_manual+0x238>)
 8000894:	6013      	str	r3, [r2, #0]
			status = SET_GREEN;
 8000896:	4b3a      	ldr	r3, [pc, #232]	@ (8000980 <fsm_manual+0x220>)
 8000898:	2210      	movs	r2, #16
 800089a:	601a      	str	r2, [r3, #0]
			lcd_goto_XY(1, 0);
 800089c:	2100      	movs	r1, #0
 800089e:	2001      	movs	r0, #1
 80008a0:	f000 fa8e 	bl	8000dc0 <lcd_goto_XY>
			lcd_send_string("SET GREEN TIME");
 80008a4:	483a      	ldr	r0, [pc, #232]	@ (8000990 <fsm_manual+0x230>)
 80008a6:	f000 fa53 	bl	8000d50 <lcd_send_string>
			lcd_goto_XY(2, 0);
 80008aa:	2100      	movs	r1, #0
 80008ac:	2002      	movs	r0, #2
 80008ae:	f000 fa87 	bl	8000dc0 <lcd_goto_XY>
			lcd_send_string(" GREEN TIME: ");
 80008b2:	4838      	ldr	r0, [pc, #224]	@ (8000994 <fsm_manual+0x234>)
 80008b4:	f000 fa4c 	bl	8000d50 <lcd_send_string>
			lcd_display_value(2, 13, set_green);
 80008b8:	4b37      	ldr	r3, [pc, #220]	@ (8000998 <fsm_manual+0x238>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	461a      	mov	r2, r3
 80008be:	210d      	movs	r1, #13
 80008c0:	2002      	movs	r0, #2
 80008c2:	f000 fa61 	bl	8000d88 <lcd_display_value>
		break;
 80008c6:	e055      	b.n	8000974 <fsm_manual+0x214>
		Light1(RESET, SET);
 80008c8:	2101      	movs	r1, #1
 80008ca:	2000      	movs	r0, #0
 80008cc:	f000 fe04 	bl	80014d8 <Light1>
		Light2(RESET, SET);
 80008d0:	2101      	movs	r1, #1
 80008d2:	2000      	movs	r0, #0
 80008d4:	f000 fe1a 	bl	800150c <Light2>
		Light3(RESET, SET);
 80008d8:	2101      	movs	r1, #1
 80008da:	2000      	movs	r0, #0
 80008dc:	f000 fe32 	bl	8001544 <Light3>
		Light4(RESET, SET);
 80008e0:	2101      	movs	r1, #1
 80008e2:	2000      	movs	r0, #0
 80008e4:	f000 fe4a 	bl	800157c <Light4>
		lcd_goto_XY(1, 0);
 80008e8:	2100      	movs	r1, #0
 80008ea:	2001      	movs	r0, #1
 80008ec:	f000 fa68 	bl	8000dc0 <lcd_goto_XY>
		lcd_send_string("SET YELLOW TIME");
 80008f0:	482a      	ldr	r0, [pc, #168]	@ (800099c <fsm_manual+0x23c>)
 80008f2:	f000 fa2d 	bl	8000d50 <lcd_send_string>
		lcd_goto_XY(2, 0);
 80008f6:	2100      	movs	r1, #0
 80008f8:	2002      	movs	r0, #2
 80008fa:	f000 fa61 	bl	8000dc0 <lcd_goto_XY>
		lcd_send_string(" YELLOW TIME: ");
 80008fe:	4828      	ldr	r0, [pc, #160]	@ (80009a0 <fsm_manual+0x240>)
 8000900:	f000 fa26 	bl	8000d50 <lcd_send_string>
		lcd_display_value(2, 14, set_yellow);
 8000904:	4b27      	ldr	r3, [pc, #156]	@ (80009a4 <fsm_manual+0x244>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	461a      	mov	r2, r3
 800090a:	210e      	movs	r1, #14
 800090c:	2002      	movs	r0, #2
 800090e:	f000 fa3b 	bl	8000d88 <lcd_display_value>
		if (isButtonPressed(0) == 1) {
 8000912:	2000      	movs	r0, #0
 8000914:	f7ff fc1a 	bl	800014c <isButtonPressed>
 8000918:	4603      	mov	r3, r0
 800091a:	2b01      	cmp	r3, #1
 800091c:	d102      	bne.n	8000924 <fsm_manual+0x1c4>
			status = AUTO_RED_GREEN;
 800091e:	4b18      	ldr	r3, [pc, #96]	@ (8000980 <fsm_manual+0x220>)
 8000920:	2202      	movs	r2, #2
 8000922:	601a      	str	r2, [r3, #0]
		if (isButtonPressed(1) == 1) {
 8000924:	2001      	movs	r0, #1
 8000926:	f7ff fc11 	bl	800014c <isButtonPressed>
 800092a:	4603      	mov	r3, r0
 800092c:	2b01      	cmp	r3, #1
 800092e:	d123      	bne.n	8000978 <fsm_manual+0x218>
			set_yellow++;
 8000930:	4b1c      	ldr	r3, [pc, #112]	@ (80009a4 <fsm_manual+0x244>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	3301      	adds	r3, #1
 8000936:	4a1b      	ldr	r2, [pc, #108]	@ (80009a4 <fsm_manual+0x244>)
 8000938:	6013      	str	r3, [r2, #0]
			status = SET_YELLOW;
 800093a:	4b11      	ldr	r3, [pc, #68]	@ (8000980 <fsm_manual+0x220>)
 800093c:	2211      	movs	r2, #17
 800093e:	601a      	str	r2, [r3, #0]
			lcd_goto_XY(1, 0);
 8000940:	2100      	movs	r1, #0
 8000942:	2001      	movs	r0, #1
 8000944:	f000 fa3c 	bl	8000dc0 <lcd_goto_XY>
			lcd_send_string("SET YELLOW TIME");
 8000948:	4814      	ldr	r0, [pc, #80]	@ (800099c <fsm_manual+0x23c>)
 800094a:	f000 fa01 	bl	8000d50 <lcd_send_string>
			lcd_goto_XY(2, 0);
 800094e:	2100      	movs	r1, #0
 8000950:	2002      	movs	r0, #2
 8000952:	f000 fa35 	bl	8000dc0 <lcd_goto_XY>
			lcd_send_string(" YELLOW TIME: ");
 8000956:	4812      	ldr	r0, [pc, #72]	@ (80009a0 <fsm_manual+0x240>)
 8000958:	f000 f9fa 	bl	8000d50 <lcd_send_string>
			lcd_display_value(2, 14, set_yellow);
 800095c:	4b11      	ldr	r3, [pc, #68]	@ (80009a4 <fsm_manual+0x244>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	461a      	mov	r2, r3
 8000962:	210e      	movs	r1, #14
 8000964:	2002      	movs	r0, #2
 8000966:	f000 fa0f 	bl	8000d88 <lcd_display_value>
		break;
 800096a:	e005      	b.n	8000978 <fsm_manual+0x218>
		break;
 800096c:	bf00      	nop
 800096e:	e004      	b.n	800097a <fsm_manual+0x21a>
		break;
 8000970:	bf00      	nop
 8000972:	e002      	b.n	800097a <fsm_manual+0x21a>
		break;
 8000974:	bf00      	nop
 8000976:	e000      	b.n	800097a <fsm_manual+0x21a>
		break;
 8000978:	bf00      	nop
	}
}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	200000d8 	.word	0x200000d8
 8000984:	08004144 	.word	0x08004144
 8000988:	08004154 	.word	0x08004154
 800098c:	200000e8 	.word	0x200000e8
 8000990:	08004160 	.word	0x08004160
 8000994:	08004170 	.word	0x08004170
 8000998:	200000f0 	.word	0x200000f0
 800099c:	08004180 	.word	0x08004180
 80009a0:	08004190 	.word	0x08004190
 80009a4:	200000ec 	.word	0x200000ec

080009a8 <fsm_setting>:
 *      Author: phanh
 */

#include "fsm_setting.h"

void fsm_setting() {
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
	switch (status) {
 80009ac:	4b76      	ldr	r3, [pc, #472]	@ (8000b88 <fsm_setting+0x1e0>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	2b11      	cmp	r3, #17
 80009b2:	f000 808b 	beq.w	8000acc <fsm_setting+0x124>
 80009b6:	2b11      	cmp	r3, #17
 80009b8:	f300 80de 	bgt.w	8000b78 <fsm_setting+0x1d0>
 80009bc:	2b0f      	cmp	r3, #15
 80009be:	d002      	beq.n	80009c6 <fsm_setting+0x1e>
 80009c0:	2b10      	cmp	r3, #16
 80009c2:	d042      	beq.n	8000a4a <fsm_setting+0xa2>
		lcd_goto_XY(2, 0);
		lcd_send_string(" YELLOW TIME: ");
		lcd_display_value(2, 14, set_yellow);
		break;
	default:
		break;
 80009c4:	e0d8      	b.n	8000b78 <fsm_setting+0x1d0>
		if (isButtonPressed(1) == 1) {
 80009c6:	2001      	movs	r0, #1
 80009c8:	f7ff fbc0 	bl	800014c <isButtonPressed>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b01      	cmp	r3, #1
 80009d0:	d10b      	bne.n	80009ea <fsm_setting+0x42>
			set_red++;
 80009d2:	4b6e      	ldr	r3, [pc, #440]	@ (8000b8c <fsm_setting+0x1e4>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	3301      	adds	r3, #1
 80009d8:	4a6c      	ldr	r2, [pc, #432]	@ (8000b8c <fsm_setting+0x1e4>)
 80009da:	6013      	str	r3, [r2, #0]
			if (set_red > 99) {
 80009dc:	4b6b      	ldr	r3, [pc, #428]	@ (8000b8c <fsm_setting+0x1e4>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	2b63      	cmp	r3, #99	@ 0x63
 80009e2:	dd02      	ble.n	80009ea <fsm_setting+0x42>
				set_red = 0;
 80009e4:	4b69      	ldr	r3, [pc, #420]	@ (8000b8c <fsm_setting+0x1e4>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
		lcd_goto_XY(1, 0);
 80009ea:	2100      	movs	r1, #0
 80009ec:	2001      	movs	r0, #1
 80009ee:	f000 f9e7 	bl	8000dc0 <lcd_goto_XY>
		lcd_send_string("SET RED TIME");
 80009f2:	4867      	ldr	r0, [pc, #412]	@ (8000b90 <fsm_setting+0x1e8>)
 80009f4:	f000 f9ac 	bl	8000d50 <lcd_send_string>
		lcd_goto_XY(2, 0);
 80009f8:	2100      	movs	r1, #0
 80009fa:	2002      	movs	r0, #2
 80009fc:	f000 f9e0 	bl	8000dc0 <lcd_goto_XY>
		lcd_send_string(" RED TIME: ");
 8000a00:	4864      	ldr	r0, [pc, #400]	@ (8000b94 <fsm_setting+0x1ec>)
 8000a02:	f000 f9a5 	bl	8000d50 <lcd_send_string>
		lcd_display_value(2, 12, set_red);
 8000a06:	4b61      	ldr	r3, [pc, #388]	@ (8000b8c <fsm_setting+0x1e4>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	210c      	movs	r1, #12
 8000a0e:	2002      	movs	r0, #2
 8000a10:	f000 f9ba 	bl	8000d88 <lcd_display_value>
		if (isButtonPressed(2) == 1) {
 8000a14:	2002      	movs	r0, #2
 8000a16:	f7ff fb99 	bl	800014c <isButtonPressed>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b01      	cmp	r3, #1
 8000a1e:	f040 80ad 	bne.w	8000b7c <fsm_setting+0x1d4>
			Light1(RESET, RESET);
 8000a22:	2100      	movs	r1, #0
 8000a24:	2000      	movs	r0, #0
 8000a26:	f000 fd57 	bl	80014d8 <Light1>
			Light2(RESET, RESET);
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	2000      	movs	r0, #0
 8000a2e:	f000 fd6d 	bl	800150c <Light2>
			Light3(RESET, RESET);
 8000a32:	2100      	movs	r1, #0
 8000a34:	2000      	movs	r0, #0
 8000a36:	f000 fd85 	bl	8001544 <Light3>
			Light4(RESET, RESET);
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	2000      	movs	r0, #0
 8000a3e:	f000 fd9d 	bl	800157c <Light4>
			status = MAN_GREEN;
 8000a42:	4b51      	ldr	r3, [pc, #324]	@ (8000b88 <fsm_setting+0x1e0>)
 8000a44:	220d      	movs	r2, #13
 8000a46:	601a      	str	r2, [r3, #0]
		break;
 8000a48:	e098      	b.n	8000b7c <fsm_setting+0x1d4>
		if (isButtonPressed(1) == 1) {
 8000a4a:	2001      	movs	r0, #1
 8000a4c:	f7ff fb7e 	bl	800014c <isButtonPressed>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	d10b      	bne.n	8000a6e <fsm_setting+0xc6>
			set_green++;
 8000a56:	4b50      	ldr	r3, [pc, #320]	@ (8000b98 <fsm_setting+0x1f0>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	4a4e      	ldr	r2, [pc, #312]	@ (8000b98 <fsm_setting+0x1f0>)
 8000a5e:	6013      	str	r3, [r2, #0]
			if (set_green > 99) {
 8000a60:	4b4d      	ldr	r3, [pc, #308]	@ (8000b98 <fsm_setting+0x1f0>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	2b63      	cmp	r3, #99	@ 0x63
 8000a66:	dd02      	ble.n	8000a6e <fsm_setting+0xc6>
				set_green = 0;
 8000a68:	4b4b      	ldr	r3, [pc, #300]	@ (8000b98 <fsm_setting+0x1f0>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
		lcd_goto_XY(1, 0);
 8000a6e:	2100      	movs	r1, #0
 8000a70:	2001      	movs	r0, #1
 8000a72:	f000 f9a5 	bl	8000dc0 <lcd_goto_XY>
		lcd_send_string("SET GREEN TIME");
 8000a76:	4849      	ldr	r0, [pc, #292]	@ (8000b9c <fsm_setting+0x1f4>)
 8000a78:	f000 f96a 	bl	8000d50 <lcd_send_string>
		lcd_goto_XY(2, 0);
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	2002      	movs	r0, #2
 8000a80:	f000 f99e 	bl	8000dc0 <lcd_goto_XY>
		lcd_send_string(" GREEN TIME: ");
 8000a84:	4846      	ldr	r0, [pc, #280]	@ (8000ba0 <fsm_setting+0x1f8>)
 8000a86:	f000 f963 	bl	8000d50 <lcd_send_string>
		lcd_display_value(2,13, set_green);
 8000a8a:	4b43      	ldr	r3, [pc, #268]	@ (8000b98 <fsm_setting+0x1f0>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	461a      	mov	r2, r3
 8000a90:	210d      	movs	r1, #13
 8000a92:	2002      	movs	r0, #2
 8000a94:	f000 f978 	bl	8000d88 <lcd_display_value>
		if (isButtonPressed(2) == 1) {
 8000a98:	2002      	movs	r0, #2
 8000a9a:	f7ff fb57 	bl	800014c <isButtonPressed>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b01      	cmp	r3, #1
 8000aa2:	d16d      	bne.n	8000b80 <fsm_setting+0x1d8>
			Light1(RESET, RESET);
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	2000      	movs	r0, #0
 8000aa8:	f000 fd16 	bl	80014d8 <Light1>
			Light2(RESET, RESET);
 8000aac:	2100      	movs	r1, #0
 8000aae:	2000      	movs	r0, #0
 8000ab0:	f000 fd2c 	bl	800150c <Light2>
			Light3(RESET, RESET);
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	2000      	movs	r0, #0
 8000ab8:	f000 fd44 	bl	8001544 <Light3>
			Light4(RESET, RESET);
 8000abc:	2100      	movs	r1, #0
 8000abe:	2000      	movs	r0, #0
 8000ac0:	f000 fd5c 	bl	800157c <Light4>
			status = MAN_YELLOW;
 8000ac4:	4b30      	ldr	r3, [pc, #192]	@ (8000b88 <fsm_setting+0x1e0>)
 8000ac6:	220e      	movs	r2, #14
 8000ac8:	601a      	str	r2, [r3, #0]
		break;
 8000aca:	e059      	b.n	8000b80 <fsm_setting+0x1d8>
		if (isButtonPressed(2) == 1) {
 8000acc:	2002      	movs	r0, #2
 8000ace:	f7ff fb3d 	bl	800014c <isButtonPressed>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d127      	bne.n	8000b28 <fsm_setting+0x180>
			Light1(RESET, RESET);
 8000ad8:	2100      	movs	r1, #0
 8000ada:	2000      	movs	r0, #0
 8000adc:	f000 fcfc 	bl	80014d8 <Light1>
			Light2(RESET, RESET);
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	2000      	movs	r0, #0
 8000ae4:	f000 fd12 	bl	800150c <Light2>
			Light3(RESET, RESET);
 8000ae8:	2100      	movs	r1, #0
 8000aea:	2000      	movs	r0, #0
 8000aec:	f000 fd2a 	bl	8001544 <Light3>
			Light4(RESET, RESET);
 8000af0:	2100      	movs	r1, #0
 8000af2:	2000      	movs	r0, #0
 8000af4:	f000 fd42 	bl	800157c <Light4>
			if (set_green + set_yellow != set_red) {
 8000af8:	4b27      	ldr	r3, [pc, #156]	@ (8000b98 <fsm_setting+0x1f0>)
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	4b29      	ldr	r3, [pc, #164]	@ (8000ba4 <fsm_setting+0x1fc>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	441a      	add	r2, r3
 8000b02:	4b22      	ldr	r3, [pc, #136]	@ (8000b8c <fsm_setting+0x1e4>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	429a      	cmp	r2, r3
 8000b08:	d003      	beq.n	8000b12 <fsm_setting+0x16a>
				status = SET_RED;
 8000b0a:	4b1f      	ldr	r3, [pc, #124]	@ (8000b88 <fsm_setting+0x1e0>)
 8000b0c:	220f      	movs	r2, #15
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	e00a      	b.n	8000b28 <fsm_setting+0x180>
				upvalue();
 8000b12:	f000 f871 	bl	8000bf8 <upvalue>
				setTimer(1, 100);
 8000b16:	2164      	movs	r1, #100	@ 0x64
 8000b18:	2001      	movs	r0, #1
 8000b1a:	f000 fc59 	bl	80013d0 <setTimer>
				lcd_clear_display();
 8000b1e:	f000 f92c 	bl	8000d7a <lcd_clear_display>
				status = AUTO_RED_GREEN;
 8000b22:	4b19      	ldr	r3, [pc, #100]	@ (8000b88 <fsm_setting+0x1e0>)
 8000b24:	2202      	movs	r2, #2
 8000b26:	601a      	str	r2, [r3, #0]
		if (isButtonPressed(1) == 1) {
 8000b28:	2001      	movs	r0, #1
 8000b2a:	f7ff fb0f 	bl	800014c <isButtonPressed>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d10b      	bne.n	8000b4c <fsm_setting+0x1a4>
			set_yellow++;
 8000b34:	4b1b      	ldr	r3, [pc, #108]	@ (8000ba4 <fsm_setting+0x1fc>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	3301      	adds	r3, #1
 8000b3a:	4a1a      	ldr	r2, [pc, #104]	@ (8000ba4 <fsm_setting+0x1fc>)
 8000b3c:	6013      	str	r3, [r2, #0]
			if (set_yellow > 99) {
 8000b3e:	4b19      	ldr	r3, [pc, #100]	@ (8000ba4 <fsm_setting+0x1fc>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	2b63      	cmp	r3, #99	@ 0x63
 8000b44:	dd02      	ble.n	8000b4c <fsm_setting+0x1a4>
				set_yellow = 0;
 8000b46:	4b17      	ldr	r3, [pc, #92]	@ (8000ba4 <fsm_setting+0x1fc>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
		lcd_goto_XY(1, 0);
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	2001      	movs	r0, #1
 8000b50:	f000 f936 	bl	8000dc0 <lcd_goto_XY>
		lcd_send_string("SET YELLOW TIME");
 8000b54:	4814      	ldr	r0, [pc, #80]	@ (8000ba8 <fsm_setting+0x200>)
 8000b56:	f000 f8fb 	bl	8000d50 <lcd_send_string>
		lcd_goto_XY(2, 0);
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	2002      	movs	r0, #2
 8000b5e:	f000 f92f 	bl	8000dc0 <lcd_goto_XY>
		lcd_send_string(" YELLOW TIME: ");
 8000b62:	4812      	ldr	r0, [pc, #72]	@ (8000bac <fsm_setting+0x204>)
 8000b64:	f000 f8f4 	bl	8000d50 <lcd_send_string>
		lcd_display_value(2, 14, set_yellow);
 8000b68:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba4 <fsm_setting+0x1fc>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	210e      	movs	r1, #14
 8000b70:	2002      	movs	r0, #2
 8000b72:	f000 f909 	bl	8000d88 <lcd_display_value>
		break;
 8000b76:	e004      	b.n	8000b82 <fsm_setting+0x1da>
		break;
 8000b78:	bf00      	nop
 8000b7a:	e002      	b.n	8000b82 <fsm_setting+0x1da>
		break;
 8000b7c:	bf00      	nop
 8000b7e:	e000      	b.n	8000b82 <fsm_setting+0x1da>
		break;
 8000b80:	bf00      	nop
	}
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	200000d8 	.word	0x200000d8
 8000b8c:	200000e8 	.word	0x200000e8
 8000b90:	080041a0 	.word	0x080041a0
 8000b94:	080041b0 	.word	0x080041b0
 8000b98:	200000f0 	.word	0x200000f0
 8000b9c:	080041bc 	.word	0x080041bc
 8000ba0:	080041cc 	.word	0x080041cc
 8000ba4:	200000ec 	.word	0x200000ec
 8000ba8:	080041dc 	.word	0x080041dc
 8000bac:	080041ec 	.word	0x080041ec

08000bb0 <setvalue>:

int set_red;
int set_yellow;
int set_green;

void setvalue() {
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
	red_value = count_R;
 8000bb4:	4b0a      	ldr	r3, [pc, #40]	@ (8000be0 <setvalue+0x30>)
 8000bb6:	2205      	movs	r2, #5
 8000bb8:	601a      	str	r2, [r3, #0]
	green_value = count_G;
 8000bba:	4b0a      	ldr	r3, [pc, #40]	@ (8000be4 <setvalue+0x34>)
 8000bbc:	2203      	movs	r2, #3
 8000bbe:	601a      	str	r2, [r3, #0]
	yellow_value = count_Y;
 8000bc0:	4b09      	ldr	r3, [pc, #36]	@ (8000be8 <setvalue+0x38>)
 8000bc2:	2202      	movs	r2, #2
 8000bc4:	601a      	str	r2, [r3, #0]

	set_red = count_R;
 8000bc6:	4b09      	ldr	r3, [pc, #36]	@ (8000bec <setvalue+0x3c>)
 8000bc8:	2205      	movs	r2, #5
 8000bca:	601a      	str	r2, [r3, #0]
	set_yellow = count_Y;
 8000bcc:	4b08      	ldr	r3, [pc, #32]	@ (8000bf0 <setvalue+0x40>)
 8000bce:	2202      	movs	r2, #2
 8000bd0:	601a      	str	r2, [r3, #0]
	set_green = count_G;
 8000bd2:	4b08      	ldr	r3, [pc, #32]	@ (8000bf4 <setvalue+0x44>)
 8000bd4:	2203      	movs	r2, #3
 8000bd6:	601a      	str	r2, [r3, #0]

}
 8000bd8:	bf00      	nop
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bc80      	pop	{r7}
 8000bde:	4770      	bx	lr
 8000be0:	200000dc 	.word	0x200000dc
 8000be4:	200000e0 	.word	0x200000e0
 8000be8:	200000e4 	.word	0x200000e4
 8000bec:	200000e8 	.word	0x200000e8
 8000bf0:	200000ec 	.word	0x200000ec
 8000bf4:	200000f0 	.word	0x200000f0

08000bf8 <upvalue>:

void upvalue() {
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
	red_value = set_red;
 8000bfc:	4b07      	ldr	r3, [pc, #28]	@ (8000c1c <upvalue+0x24>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a07      	ldr	r2, [pc, #28]	@ (8000c20 <upvalue+0x28>)
 8000c02:	6013      	str	r3, [r2, #0]
	green_value = set_green;
 8000c04:	4b07      	ldr	r3, [pc, #28]	@ (8000c24 <upvalue+0x2c>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a07      	ldr	r2, [pc, #28]	@ (8000c28 <upvalue+0x30>)
 8000c0a:	6013      	str	r3, [r2, #0]
	yellow_value = set_yellow;
 8000c0c:	4b07      	ldr	r3, [pc, #28]	@ (8000c2c <upvalue+0x34>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a07      	ldr	r2, [pc, #28]	@ (8000c30 <upvalue+0x38>)
 8000c12:	6013      	str	r3, [r2, #0]
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bc80      	pop	{r7}
 8000c1a:	4770      	bx	lr
 8000c1c:	200000e8 	.word	0x200000e8
 8000c20:	200000dc 	.word	0x200000dc
 8000c24:	200000f0 	.word	0x200000f0
 8000c28:	200000e0 	.word	0x200000e0
 8000c2c:	200000ec 	.word	0x200000ec
 8000c30:	200000e4 	.word	0x200000e4

08000c34 <lcd_send_cmd>:

extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD (0x21 << 1) // change this according to ur setup

void lcd_send_cmd(char cmd) {
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b086      	sub	sp, #24
 8000c38:	af02      	add	r7, sp, #8
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd & 0xf0);
 8000c3e:	79fb      	ldrb	r3, [r7, #7]
 8000c40:	f023 030f 	bic.w	r3, r3, #15
 8000c44:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd << 4) & 0xf0);
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	011b      	lsls	r3, r3, #4
 8000c4a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0C;  //en=1, rs=0
 8000c4c:	7bfb      	ldrb	r3, [r7, #15]
 8000c4e:	f043 030c 	orr.w	r3, r3, #12
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x08;  //en=0, rs=0
 8000c56:	7bfb      	ldrb	r3, [r7, #15]
 8000c58:	f043 0308 	orr.w	r3, r3, #8
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0C;  //en=1, rs=0
 8000c60:	7bbb      	ldrb	r3, [r7, #14]
 8000c62:	f043 030c 	orr.w	r3, r3, #12
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x08;  //en=0, rs=0
 8000c6a:	7bbb      	ldrb	r3, [r7, #14]
 8000c6c:	f043 0308 	orr.w	r3, r3, #8
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t*) data_t, 4,
 8000c74:	f107 0208 	add.w	r2, r7, #8
 8000c78:	2364      	movs	r3, #100	@ 0x64
 8000c7a:	9300      	str	r3, [sp, #0]
 8000c7c:	2304      	movs	r3, #4
 8000c7e:	2142      	movs	r1, #66	@ 0x42
 8000c80:	4803      	ldr	r0, [pc, #12]	@ (8000c90 <lcd_send_cmd+0x5c>)
 8000c82:	f001 f96b 	bl	8001f5c <HAL_I2C_Master_Transmit>
			100);
}
 8000c86:	bf00      	nop
 8000c88:	3710      	adds	r7, #16
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	200000f4 	.word	0x200000f4

08000c94 <lcd_send_data>:

void lcd_send_data(char data) {
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b086      	sub	sp, #24
 8000c98:	af02      	add	r7, sp, #8
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data & 0xf0);
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	f023 030f 	bic.w	r3, r3, #15
 8000ca4:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xf0);
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	011b      	lsls	r3, r3, #4
 8000caa:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0D;  //en=1, rs=0
 8000cac:	7bfb      	ldrb	r3, [r7, #15]
 8000cae:	f043 030d 	orr.w	r3, r3, #13
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x09;  //en=0, rs=0
 8000cb6:	7bfb      	ldrb	r3, [r7, #15]
 8000cb8:	f043 0309 	orr.w	r3, r3, #9
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0D;  //en=1, rs=0
 8000cc0:	7bbb      	ldrb	r3, [r7, #14]
 8000cc2:	f043 030d 	orr.w	r3, r3, #13
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x09;  //en=0, rs=0
 8000cca:	7bbb      	ldrb	r3, [r7, #14]
 8000ccc:	f043 0309 	orr.w	r3, r3, #9
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t*) data_t, 4,
 8000cd4:	f107 0208 	add.w	r2, r7, #8
 8000cd8:	2364      	movs	r3, #100	@ 0x64
 8000cda:	9300      	str	r3, [sp, #0]
 8000cdc:	2304      	movs	r3, #4
 8000cde:	2142      	movs	r1, #66	@ 0x42
 8000ce0:	4803      	ldr	r0, [pc, #12]	@ (8000cf0 <lcd_send_data+0x5c>)
 8000ce2:	f001 f93b 	bl	8001f5c <HAL_I2C_Master_Transmit>
			100);
}
 8000ce6:	bf00      	nop
 8000ce8:	3710      	adds	r7, #16
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	200000f4 	.word	0x200000f4

08000cf4 <lcd_init>:

void lcd_init(void) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x33); /* set 4-bits interface */
 8000cf8:	2033      	movs	r0, #51	@ 0x33
 8000cfa:	f7ff ff9b 	bl	8000c34 <lcd_send_cmd>
	lcd_send_cmd(0x32);
 8000cfe:	2032      	movs	r0, #50	@ 0x32
 8000d00:	f7ff ff98 	bl	8000c34 <lcd_send_cmd>
	HAL_Delay(50);
 8000d04:	2032      	movs	r0, #50	@ 0x32
 8000d06:	f000 fcdd 	bl	80016c4 <HAL_Delay>
	lcd_send_cmd(0x28); /* start to set LCD function */
 8000d0a:	2028      	movs	r0, #40	@ 0x28
 8000d0c:	f7ff ff92 	bl	8000c34 <lcd_send_cmd>
	HAL_Delay(50);
 8000d10:	2032      	movs	r0, #50	@ 0x32
 8000d12:	f000 fcd7 	bl	80016c4 <HAL_Delay>
	lcd_send_cmd(0x01); /* clear display */
 8000d16:	2001      	movs	r0, #1
 8000d18:	f7ff ff8c 	bl	8000c34 <lcd_send_cmd>
	HAL_Delay(50);
 8000d1c:	2032      	movs	r0, #50	@ 0x32
 8000d1e:	f000 fcd1 	bl	80016c4 <HAL_Delay>
	lcd_send_cmd(0x06); /* set entry mode */
 8000d22:	2006      	movs	r0, #6
 8000d24:	f7ff ff86 	bl	8000c34 <lcd_send_cmd>
	HAL_Delay(50);
 8000d28:	2032      	movs	r0, #50	@ 0x32
 8000d2a:	f000 fccb 	bl	80016c4 <HAL_Delay>
	lcd_send_cmd(0x0c); /* set display to on */
 8000d2e:	200c      	movs	r0, #12
 8000d30:	f7ff ff80 	bl	8000c34 <lcd_send_cmd>
	HAL_Delay(50);
 8000d34:	2032      	movs	r0, #50	@ 0x32
 8000d36:	f000 fcc5 	bl	80016c4 <HAL_Delay>
	lcd_send_cmd(0x02); /* move cursor to home and set data address to 0 */
 8000d3a:	2002      	movs	r0, #2
 8000d3c:	f7ff ff7a 	bl	8000c34 <lcd_send_cmd>
	HAL_Delay(50);
 8000d40:	2032      	movs	r0, #50	@ 0x32
 8000d42:	f000 fcbf 	bl	80016c4 <HAL_Delay>
	lcd_send_cmd(0x80);
 8000d46:	2080      	movs	r0, #128	@ 0x80
 8000d48:	f7ff ff74 	bl	8000c34 <lcd_send_cmd>
}
 8000d4c:	bf00      	nop
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <lcd_send_string>:

void lcd_send_string(char *str) {
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
	while (*str)
 8000d58:	e006      	b.n	8000d68 <lcd_send_string+0x18>
		lcd_send_data(*str++);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	1c5a      	adds	r2, r3, #1
 8000d5e:	607a      	str	r2, [r7, #4]
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	4618      	mov	r0, r3
 8000d64:	f7ff ff96 	bl	8000c94 <lcd_send_data>
	while (*str)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d1f4      	bne.n	8000d5a <lcd_send_string+0xa>
}
 8000d70:	bf00      	nop
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <lcd_clear_display>:

void lcd_clear_display(void) {
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01); //clear display
 8000d7e:	2001      	movs	r0, #1
 8000d80:	f7ff ff58 	bl	8000c34 <lcd_send_cmd>
}
 8000d84:	bf00      	nop
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <lcd_display_value>:
void lcd_display_value(int row, int col, int value) {
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b088      	sub	sp, #32
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	60f8      	str	r0, [r7, #12]
 8000d90:	60b9      	str	r1, [r7, #8]
 8000d92:	607a      	str	r2, [r7, #4]
    char buffer[16];
    sprintf(buffer, "%d", value);
 8000d94:	f107 0310 	add.w	r3, r7, #16
 8000d98:	687a      	ldr	r2, [r7, #4]
 8000d9a:	4908      	ldr	r1, [pc, #32]	@ (8000dbc <lcd_display_value+0x34>)
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f002 fd15 	bl	80037cc <siprintf>
    lcd_goto_XY(row, col);
 8000da2:	68b9      	ldr	r1, [r7, #8]
 8000da4:	68f8      	ldr	r0, [r7, #12]
 8000da6:	f000 f80b 	bl	8000dc0 <lcd_goto_XY>
    lcd_send_string(buffer);
 8000daa:	f107 0310 	add.w	r3, r7, #16
 8000dae:	4618      	mov	r0, r3
 8000db0:	f7ff ffce 	bl	8000d50 <lcd_send_string>
}
 8000db4:	bf00      	nop
 8000db6:	3720      	adds	r7, #32
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	080041fc 	.word	0x080041fc

08000dc0 <lcd_goto_XY>:


void lcd_goto_XY(int row, int col) {
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if (row == 1) {
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d108      	bne.n	8000de2 <lcd_goto_XY+0x22>
		pos_Addr = 0x80 + row - 1 + col;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	b2da      	uxtb	r2, r3
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	4413      	add	r3, r2
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	337f      	adds	r3, #127	@ 0x7f
 8000dde:	73fb      	strb	r3, [r7, #15]
 8000de0:	e008      	b.n	8000df4 <lcd_goto_XY+0x34>
	} else {
		pos_Addr = 0x80 | (0x40 + col);
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	3340      	adds	r3, #64	@ 0x40
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	b25b      	sxtb	r3, r3
 8000dec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000df0:	b25b      	sxtb	r3, r3
 8000df2:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 8000df4:	7bfb      	ldrb	r3, [r7, #15]
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff ff1c 	bl	8000c34 <lcd_send_cmd>
}
 8000dfc:	bf00      	nop
 8000dfe:	3710      	adds	r7, #16
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e08:	f000 fbfa 	bl	8001600 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e0c:	f000 f820 	bl	8000e50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e10:	f000 f904 	bl	800101c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e14:	f000 f8d8 	bl	8000fc8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000e18:	f000 f85c 	bl	8000ed4 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000e1c:	f000 f888 	bl	8000f30 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000e20:	4809      	ldr	r0, [pc, #36]	@ (8000e48 <main+0x44>)
 8000e22:	f002 f853 	bl	8002ecc <HAL_TIM_Base_Start_IT>
  setvalue();
 8000e26:	f7ff fec3 	bl	8000bb0 <setvalue>
  lcd_init();
 8000e2a:	f7ff ff63 	bl	8000cf4 <lcd_init>
  lcd_clear_display();
 8000e2e:	f7ff ffa4 	bl	8000d7a <lcd_clear_display>
  status = INIT;
 8000e32:	4b06      	ldr	r3, [pc, #24]	@ (8000e4c <main+0x48>)
 8000e34:	2201      	movs	r2, #1
 8000e36:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  fsm_auto_run();
 8000e38:	f7ff fad0 	bl	80003dc <fsm_auto_run>
	  fsm_manual();
 8000e3c:	f7ff fc90 	bl	8000760 <fsm_manual>
	  fsm_setting();
 8000e40:	f7ff fdb2 	bl	80009a8 <fsm_setting>
	  fsm_auto_run();
 8000e44:	bf00      	nop
 8000e46:	e7f7      	b.n	8000e38 <main+0x34>
 8000e48:	20000148 	.word	0x20000148
 8000e4c:	200000d8 	.word	0x200000d8

08000e50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b090      	sub	sp, #64	@ 0x40
 8000e54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e56:	f107 0318 	add.w	r3, r7, #24
 8000e5a:	2228      	movs	r2, #40	@ 0x28
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f002 fcd4 	bl	800380c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e64:	1d3b      	adds	r3, r7, #4
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	605a      	str	r2, [r3, #4]
 8000e6c:	609a      	str	r2, [r3, #8]
 8000e6e:	60da      	str	r2, [r3, #12]
 8000e70:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e72:	2302      	movs	r3, #2
 8000e74:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e76:	2301      	movs	r3, #1
 8000e78:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e7a:	2310      	movs	r3, #16
 8000e7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000e82:	2300      	movs	r3, #0
 8000e84:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000e86:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e8c:	f107 0318 	add.w	r3, r7, #24
 8000e90:	4618      	mov	r0, r3
 8000e92:	f001 fbbb 	bl	800260c <HAL_RCC_OscConfig>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000e9c:	f000 f970 	bl	8001180 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ea0:	230f      	movs	r3, #15
 8000ea2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000eac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000eb0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000eb6:	1d3b      	adds	r3, r7, #4
 8000eb8:	2102      	movs	r1, #2
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f001 fe28 	bl	8002b10 <HAL_RCC_ClockConfig>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000ec6:	f000 f95b 	bl	8001180 <Error_Handler>
  }
}
 8000eca:	bf00      	nop
 8000ecc:	3740      	adds	r7, #64	@ 0x40
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
	...

08000ed4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ed8:	4b12      	ldr	r3, [pc, #72]	@ (8000f24 <MX_I2C1_Init+0x50>)
 8000eda:	4a13      	ldr	r2, [pc, #76]	@ (8000f28 <MX_I2C1_Init+0x54>)
 8000edc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ede:	4b11      	ldr	r3, [pc, #68]	@ (8000f24 <MX_I2C1_Init+0x50>)
 8000ee0:	4a12      	ldr	r2, [pc, #72]	@ (8000f2c <MX_I2C1_Init+0x58>)
 8000ee2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ee4:	4b0f      	ldr	r3, [pc, #60]	@ (8000f24 <MX_I2C1_Init+0x50>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000eea:	4b0e      	ldr	r3, [pc, #56]	@ (8000f24 <MX_I2C1_Init+0x50>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8000f24 <MX_I2C1_Init+0x50>)
 8000ef2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ef6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ef8:	4b0a      	ldr	r3, [pc, #40]	@ (8000f24 <MX_I2C1_Init+0x50>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000efe:	4b09      	ldr	r3, [pc, #36]	@ (8000f24 <MX_I2C1_Init+0x50>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f04:	4b07      	ldr	r3, [pc, #28]	@ (8000f24 <MX_I2C1_Init+0x50>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f0a:	4b06      	ldr	r3, [pc, #24]	@ (8000f24 <MX_I2C1_Init+0x50>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f10:	4804      	ldr	r0, [pc, #16]	@ (8000f24 <MX_I2C1_Init+0x50>)
 8000f12:	f000 fedf 	bl	8001cd4 <HAL_I2C_Init>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f1c:	f000 f930 	bl	8001180 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f20:	bf00      	nop
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	200000f4 	.word	0x200000f4
 8000f28:	40005400 	.word	0x40005400
 8000f2c:	000186a0 	.word	0x000186a0

08000f30 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b086      	sub	sp, #24
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f36:	f107 0308 	add.w	r3, r7, #8
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	605a      	str	r2, [r3, #4]
 8000f40:	609a      	str	r2, [r3, #8]
 8000f42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f44:	463b      	mov	r3, r7
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f4c:	4b1d      	ldr	r3, [pc, #116]	@ (8000fc4 <MX_TIM2_Init+0x94>)
 8000f4e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f52:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000f54:	4b1b      	ldr	r3, [pc, #108]	@ (8000fc4 <MX_TIM2_Init+0x94>)
 8000f56:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000f5a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f5c:	4b19      	ldr	r3, [pc, #100]	@ (8000fc4 <MX_TIM2_Init+0x94>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000f62:	4b18      	ldr	r3, [pc, #96]	@ (8000fc4 <MX_TIM2_Init+0x94>)
 8000f64:	2209      	movs	r2, #9
 8000f66:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f68:	4b16      	ldr	r3, [pc, #88]	@ (8000fc4 <MX_TIM2_Init+0x94>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f6e:	4b15      	ldr	r3, [pc, #84]	@ (8000fc4 <MX_TIM2_Init+0x94>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f74:	4813      	ldr	r0, [pc, #76]	@ (8000fc4 <MX_TIM2_Init+0x94>)
 8000f76:	f001 ff59 	bl	8002e2c <HAL_TIM_Base_Init>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000f80:	f000 f8fe 	bl	8001180 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f88:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f8a:	f107 0308 	add.w	r3, r7, #8
 8000f8e:	4619      	mov	r1, r3
 8000f90:	480c      	ldr	r0, [pc, #48]	@ (8000fc4 <MX_TIM2_Init+0x94>)
 8000f92:	f002 f8dd 	bl	8003150 <HAL_TIM_ConfigClockSource>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000f9c:	f000 f8f0 	bl	8001180 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fa8:	463b      	mov	r3, r7
 8000faa:	4619      	mov	r1, r3
 8000fac:	4805      	ldr	r0, [pc, #20]	@ (8000fc4 <MX_TIM2_Init+0x94>)
 8000fae:	f002 fabf 	bl	8003530 <HAL_TIMEx_MasterConfigSynchronization>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000fb8:	f000 f8e2 	bl	8001180 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fbc:	bf00      	nop
 8000fbe:	3718      	adds	r7, #24
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20000148 	.word	0x20000148

08000fc8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fcc:	4b11      	ldr	r3, [pc, #68]	@ (8001014 <MX_USART2_UART_Init+0x4c>)
 8000fce:	4a12      	ldr	r2, [pc, #72]	@ (8001018 <MX_USART2_UART_Init+0x50>)
 8000fd0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fd2:	4b10      	ldr	r3, [pc, #64]	@ (8001014 <MX_USART2_UART_Init+0x4c>)
 8000fd4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fd8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fda:	4b0e      	ldr	r3, [pc, #56]	@ (8001014 <MX_USART2_UART_Init+0x4c>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fe0:	4b0c      	ldr	r3, [pc, #48]	@ (8001014 <MX_USART2_UART_Init+0x4c>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fe6:	4b0b      	ldr	r3, [pc, #44]	@ (8001014 <MX_USART2_UART_Init+0x4c>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fec:	4b09      	ldr	r3, [pc, #36]	@ (8001014 <MX_USART2_UART_Init+0x4c>)
 8000fee:	220c      	movs	r2, #12
 8000ff0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ff2:	4b08      	ldr	r3, [pc, #32]	@ (8001014 <MX_USART2_UART_Init+0x4c>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ff8:	4b06      	ldr	r3, [pc, #24]	@ (8001014 <MX_USART2_UART_Init+0x4c>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ffe:	4805      	ldr	r0, [pc, #20]	@ (8001014 <MX_USART2_UART_Init+0x4c>)
 8001000:	f002 fb06 	bl	8003610 <HAL_UART_Init>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800100a:	f000 f8b9 	bl	8001180 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000190 	.word	0x20000190
 8001018:	40004400 	.word	0x40004400

0800101c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b088      	sub	sp, #32
 8001020:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001022:	f107 0310 	add.w	r3, r7, #16
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	605a      	str	r2, [r3, #4]
 800102c:	609a      	str	r2, [r3, #8]
 800102e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001030:	4b48      	ldr	r3, [pc, #288]	@ (8001154 <MX_GPIO_Init+0x138>)
 8001032:	699b      	ldr	r3, [r3, #24]
 8001034:	4a47      	ldr	r2, [pc, #284]	@ (8001154 <MX_GPIO_Init+0x138>)
 8001036:	f043 0310 	orr.w	r3, r3, #16
 800103a:	6193      	str	r3, [r2, #24]
 800103c:	4b45      	ldr	r3, [pc, #276]	@ (8001154 <MX_GPIO_Init+0x138>)
 800103e:	699b      	ldr	r3, [r3, #24]
 8001040:	f003 0310 	and.w	r3, r3, #16
 8001044:	60fb      	str	r3, [r7, #12]
 8001046:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001048:	4b42      	ldr	r3, [pc, #264]	@ (8001154 <MX_GPIO_Init+0x138>)
 800104a:	699b      	ldr	r3, [r3, #24]
 800104c:	4a41      	ldr	r2, [pc, #260]	@ (8001154 <MX_GPIO_Init+0x138>)
 800104e:	f043 0320 	orr.w	r3, r3, #32
 8001052:	6193      	str	r3, [r2, #24]
 8001054:	4b3f      	ldr	r3, [pc, #252]	@ (8001154 <MX_GPIO_Init+0x138>)
 8001056:	699b      	ldr	r3, [r3, #24]
 8001058:	f003 0320 	and.w	r3, r3, #32
 800105c:	60bb      	str	r3, [r7, #8]
 800105e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001060:	4b3c      	ldr	r3, [pc, #240]	@ (8001154 <MX_GPIO_Init+0x138>)
 8001062:	699b      	ldr	r3, [r3, #24]
 8001064:	4a3b      	ldr	r2, [pc, #236]	@ (8001154 <MX_GPIO_Init+0x138>)
 8001066:	f043 0304 	orr.w	r3, r3, #4
 800106a:	6193      	str	r3, [r2, #24]
 800106c:	4b39      	ldr	r3, [pc, #228]	@ (8001154 <MX_GPIO_Init+0x138>)
 800106e:	699b      	ldr	r3, [r3, #24]
 8001070:	f003 0304 	and.w	r3, r3, #4
 8001074:	607b      	str	r3, [r7, #4]
 8001076:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001078:	4b36      	ldr	r3, [pc, #216]	@ (8001154 <MX_GPIO_Init+0x138>)
 800107a:	699b      	ldr	r3, [r3, #24]
 800107c:	4a35      	ldr	r2, [pc, #212]	@ (8001154 <MX_GPIO_Init+0x138>)
 800107e:	f043 0308 	orr.w	r3, r3, #8
 8001082:	6193      	str	r3, [r2, #24]
 8001084:	4b33      	ldr	r3, [pc, #204]	@ (8001154 <MX_GPIO_Init+0x138>)
 8001086:	699b      	ldr	r3, [r3, #24]
 8001088:	f003 0308 	and.w	r3, r3, #8
 800108c:	603b      	str	r3, [r7, #0]
 800108e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, A2_Pin|LD2_Pin|D7_Pin|D8_Pin, GPIO_PIN_RESET);
 8001090:	2200      	movs	r2, #0
 8001092:	f44f 714c 	mov.w	r1, #816	@ 0x330
 8001096:	4830      	ldr	r0, [pc, #192]	@ (8001158 <MX_GPIO_Init+0x13c>)
 8001098:	f000 fde1 	bl	8001c5e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D3_Pin|D5_Pin|D4_Pin
 800109c:	2200      	movs	r2, #0
 800109e:	f44f 618f 	mov.w	r1, #1144	@ 0x478
 80010a2:	482e      	ldr	r0, [pc, #184]	@ (800115c <MX_GPIO_Init+0x140>)
 80010a4:	f000 fddb 	bl	8001c5e <HAL_GPIO_WritePin>
                          |D10_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D9_GPIO_Port, D9_Pin, GPIO_PIN_RESET);
 80010a8:	2200      	movs	r2, #0
 80010aa:	2180      	movs	r1, #128	@ 0x80
 80010ac:	482c      	ldr	r0, [pc, #176]	@ (8001160 <MX_GPIO_Init+0x144>)
 80010ae:	f000 fdd6 	bl	8001c5e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010b8:	4b2a      	ldr	r3, [pc, #168]	@ (8001164 <MX_GPIO_Init+0x148>)
 80010ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010c0:	f107 0310 	add.w	r3, r7, #16
 80010c4:	4619      	mov	r1, r3
 80010c6:	4826      	ldr	r0, [pc, #152]	@ (8001160 <MX_GPIO_Init+0x144>)
 80010c8:	f000 fc2e 	bl	8001928 <HAL_GPIO_Init>

  /*Configure GPIO pins : A0_Pin A1_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin;
 80010cc:	2303      	movs	r3, #3
 80010ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d8:	f107 0310 	add.w	r3, r7, #16
 80010dc:	4619      	mov	r1, r3
 80010de:	481e      	ldr	r0, [pc, #120]	@ (8001158 <MX_GPIO_Init+0x13c>)
 80010e0:	f000 fc22 	bl	8001928 <HAL_GPIO_Init>

  /*Configure GPIO pins : A2_Pin LD2_Pin D7_Pin D8_Pin */
  GPIO_InitStruct.Pin = A2_Pin|LD2_Pin|D7_Pin|D8_Pin;
 80010e4:	f44f 734c 	mov.w	r3, #816	@ 0x330
 80010e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ea:	2301      	movs	r3, #1
 80010ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f2:	2302      	movs	r3, #2
 80010f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f6:	f107 0310 	add.w	r3, r7, #16
 80010fa:	4619      	mov	r1, r3
 80010fc:	4816      	ldr	r0, [pc, #88]	@ (8001158 <MX_GPIO_Init+0x13c>)
 80010fe:	f000 fc13 	bl	8001928 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D3_Pin D5_Pin D4_Pin
                           D10_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D3_Pin|D5_Pin|D4_Pin
 8001102:	f44f 638f 	mov.w	r3, #1144	@ 0x478
 8001106:	613b      	str	r3, [r7, #16]
                          |D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001108:	2301      	movs	r3, #1
 800110a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001110:	2302      	movs	r3, #2
 8001112:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001114:	f107 0310 	add.w	r3, r7, #16
 8001118:	4619      	mov	r1, r3
 800111a:	4810      	ldr	r0, [pc, #64]	@ (800115c <MX_GPIO_Init+0x140>)
 800111c:	f000 fc04 	bl	8001928 <HAL_GPIO_Init>

  /*Configure GPIO pin : D9_Pin */
  GPIO_InitStruct.Pin = D9_Pin;
 8001120:	2380      	movs	r3, #128	@ 0x80
 8001122:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001124:	2301      	movs	r3, #1
 8001126:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112c:	2302      	movs	r3, #2
 800112e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(D9_GPIO_Port, &GPIO_InitStruct);
 8001130:	f107 0310 	add.w	r3, r7, #16
 8001134:	4619      	mov	r1, r3
 8001136:	480a      	ldr	r0, [pc, #40]	@ (8001160 <MX_GPIO_Init+0x144>)
 8001138:	f000 fbf6 	bl	8001928 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800113c:	2200      	movs	r2, #0
 800113e:	2100      	movs	r1, #0
 8001140:	2028      	movs	r0, #40	@ 0x28
 8001142:	f000 fbba 	bl	80018ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001146:	2028      	movs	r0, #40	@ 0x28
 8001148:	f000 fbd3 	bl	80018f2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800114c:	bf00      	nop
 800114e:	3720      	adds	r7, #32
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40021000 	.word	0x40021000
 8001158:	40010800 	.word	0x40010800
 800115c:	40010c00 	.word	0x40010c00
 8001160:	40011000 	.word	0x40011000
 8001164:	10110000 	.word	0x10110000

08001168 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
	getKeyInput();
 8001170:	f7ff f816 	bl	80001a0 <getKeyInput>
	timerRun();
 8001174:	f000 f944 	bl	8001400 <timerRun>
}
 8001178:	bf00      	nop
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001184:	b672      	cpsid	i
}
 8001186:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001188:	bf00      	nop
 800118a:	e7fd      	b.n	8001188 <Error_Handler+0x8>

0800118c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800118c:	b480      	push	{r7}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001192:	4b15      	ldr	r3, [pc, #84]	@ (80011e8 <HAL_MspInit+0x5c>)
 8001194:	699b      	ldr	r3, [r3, #24]
 8001196:	4a14      	ldr	r2, [pc, #80]	@ (80011e8 <HAL_MspInit+0x5c>)
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	6193      	str	r3, [r2, #24]
 800119e:	4b12      	ldr	r3, [pc, #72]	@ (80011e8 <HAL_MspInit+0x5c>)
 80011a0:	699b      	ldr	r3, [r3, #24]
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	60bb      	str	r3, [r7, #8]
 80011a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011aa:	4b0f      	ldr	r3, [pc, #60]	@ (80011e8 <HAL_MspInit+0x5c>)
 80011ac:	69db      	ldr	r3, [r3, #28]
 80011ae:	4a0e      	ldr	r2, [pc, #56]	@ (80011e8 <HAL_MspInit+0x5c>)
 80011b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011b4:	61d3      	str	r3, [r2, #28]
 80011b6:	4b0c      	ldr	r3, [pc, #48]	@ (80011e8 <HAL_MspInit+0x5c>)
 80011b8:	69db      	ldr	r3, [r3, #28]
 80011ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011be:	607b      	str	r3, [r7, #4]
 80011c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80011c2:	4b0a      	ldr	r3, [pc, #40]	@ (80011ec <HAL_MspInit+0x60>)
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	4a04      	ldr	r2, [pc, #16]	@ (80011ec <HAL_MspInit+0x60>)
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011de:	bf00      	nop
 80011e0:	3714      	adds	r7, #20
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bc80      	pop	{r7}
 80011e6:	4770      	bx	lr
 80011e8:	40021000 	.word	0x40021000
 80011ec:	40010000 	.word	0x40010000

080011f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08a      	sub	sp, #40	@ 0x28
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f8:	f107 0314 	add.w	r3, r7, #20
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a1d      	ldr	r2, [pc, #116]	@ (8001280 <HAL_I2C_MspInit+0x90>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d132      	bne.n	8001276 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001210:	4b1c      	ldr	r3, [pc, #112]	@ (8001284 <HAL_I2C_MspInit+0x94>)
 8001212:	699b      	ldr	r3, [r3, #24]
 8001214:	4a1b      	ldr	r2, [pc, #108]	@ (8001284 <HAL_I2C_MspInit+0x94>)
 8001216:	f043 0308 	orr.w	r3, r3, #8
 800121a:	6193      	str	r3, [r2, #24]
 800121c:	4b19      	ldr	r3, [pc, #100]	@ (8001284 <HAL_I2C_MspInit+0x94>)
 800121e:	699b      	ldr	r3, [r3, #24]
 8001220:	f003 0308 	and.w	r3, r3, #8
 8001224:	613b      	str	r3, [r7, #16]
 8001226:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001228:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800122c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800122e:	2312      	movs	r3, #18
 8001230:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001232:	2303      	movs	r3, #3
 8001234:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001236:	f107 0314 	add.w	r3, r7, #20
 800123a:	4619      	mov	r1, r3
 800123c:	4812      	ldr	r0, [pc, #72]	@ (8001288 <HAL_I2C_MspInit+0x98>)
 800123e:	f000 fb73 	bl	8001928 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001242:	4b12      	ldr	r3, [pc, #72]	@ (800128c <HAL_I2C_MspInit+0x9c>)
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	627b      	str	r3, [r7, #36]	@ 0x24
 8001248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800124a:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800124e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001252:	f043 0302 	orr.w	r3, r3, #2
 8001256:	627b      	str	r3, [r7, #36]	@ 0x24
 8001258:	4a0c      	ldr	r2, [pc, #48]	@ (800128c <HAL_I2C_MspInit+0x9c>)
 800125a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800125c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800125e:	4b09      	ldr	r3, [pc, #36]	@ (8001284 <HAL_I2C_MspInit+0x94>)
 8001260:	69db      	ldr	r3, [r3, #28]
 8001262:	4a08      	ldr	r2, [pc, #32]	@ (8001284 <HAL_I2C_MspInit+0x94>)
 8001264:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001268:	61d3      	str	r3, [r2, #28]
 800126a:	4b06      	ldr	r3, [pc, #24]	@ (8001284 <HAL_I2C_MspInit+0x94>)
 800126c:	69db      	ldr	r3, [r3, #28]
 800126e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001276:	bf00      	nop
 8001278:	3728      	adds	r7, #40	@ 0x28
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40005400 	.word	0x40005400
 8001284:	40021000 	.word	0x40021000
 8001288:	40010c00 	.word	0x40010c00
 800128c:	40010000 	.word	0x40010000

08001290 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012a0:	d113      	bne.n	80012ca <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012a2:	4b0c      	ldr	r3, [pc, #48]	@ (80012d4 <HAL_TIM_Base_MspInit+0x44>)
 80012a4:	69db      	ldr	r3, [r3, #28]
 80012a6:	4a0b      	ldr	r2, [pc, #44]	@ (80012d4 <HAL_TIM_Base_MspInit+0x44>)
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	61d3      	str	r3, [r2, #28]
 80012ae:	4b09      	ldr	r3, [pc, #36]	@ (80012d4 <HAL_TIM_Base_MspInit+0x44>)
 80012b0:	69db      	ldr	r3, [r3, #28]
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80012ba:	2200      	movs	r2, #0
 80012bc:	2100      	movs	r1, #0
 80012be:	201c      	movs	r0, #28
 80012c0:	f000 fafb 	bl	80018ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012c4:	201c      	movs	r0, #28
 80012c6:	f000 fb14 	bl	80018f2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80012ca:	bf00      	nop
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40021000 	.word	0x40021000

080012d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b088      	sub	sp, #32
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e0:	f107 0310 	add.w	r3, r7, #16
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a15      	ldr	r2, [pc, #84]	@ (8001348 <HAL_UART_MspInit+0x70>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d123      	bne.n	8001340 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012f8:	4b14      	ldr	r3, [pc, #80]	@ (800134c <HAL_UART_MspInit+0x74>)
 80012fa:	69db      	ldr	r3, [r3, #28]
 80012fc:	4a13      	ldr	r2, [pc, #76]	@ (800134c <HAL_UART_MspInit+0x74>)
 80012fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001302:	61d3      	str	r3, [r2, #28]
 8001304:	4b11      	ldr	r3, [pc, #68]	@ (800134c <HAL_UART_MspInit+0x74>)
 8001306:	69db      	ldr	r3, [r3, #28]
 8001308:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800130c:	60fb      	str	r3, [r7, #12]
 800130e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001310:	4b0e      	ldr	r3, [pc, #56]	@ (800134c <HAL_UART_MspInit+0x74>)
 8001312:	699b      	ldr	r3, [r3, #24]
 8001314:	4a0d      	ldr	r2, [pc, #52]	@ (800134c <HAL_UART_MspInit+0x74>)
 8001316:	f043 0304 	orr.w	r3, r3, #4
 800131a:	6193      	str	r3, [r2, #24]
 800131c:	4b0b      	ldr	r3, [pc, #44]	@ (800134c <HAL_UART_MspInit+0x74>)
 800131e:	699b      	ldr	r3, [r3, #24]
 8001320:	f003 0304 	and.w	r3, r3, #4
 8001324:	60bb      	str	r3, [r7, #8]
 8001326:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001328:	230c      	movs	r3, #12
 800132a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132c:	2302      	movs	r3, #2
 800132e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001330:	2302      	movs	r3, #2
 8001332:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001334:	f107 0310 	add.w	r3, r7, #16
 8001338:	4619      	mov	r1, r3
 800133a:	4805      	ldr	r0, [pc, #20]	@ (8001350 <HAL_UART_MspInit+0x78>)
 800133c:	f000 faf4 	bl	8001928 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001340:	bf00      	nop
 8001342:	3720      	adds	r7, #32
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40004400 	.word	0x40004400
 800134c:	40021000 	.word	0x40021000
 8001350:	40010800 	.word	0x40010800

08001354 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001358:	bf00      	nop
 800135a:	e7fd      	b.n	8001358 <NMI_Handler+0x4>

0800135c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001360:	bf00      	nop
 8001362:	e7fd      	b.n	8001360 <HardFault_Handler+0x4>

08001364 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001368:	bf00      	nop
 800136a:	e7fd      	b.n	8001368 <MemManage_Handler+0x4>

0800136c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001370:	bf00      	nop
 8001372:	e7fd      	b.n	8001370 <BusFault_Handler+0x4>

08001374 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001378:	bf00      	nop
 800137a:	e7fd      	b.n	8001378 <UsageFault_Handler+0x4>

0800137c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001380:	bf00      	nop
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr

08001388 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	bc80      	pop	{r7}
 8001392:	4770      	bx	lr

08001394 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001398:	bf00      	nop
 800139a:	46bd      	mov	sp, r7
 800139c:	bc80      	pop	{r7}
 800139e:	4770      	bx	lr

080013a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013a4:	f000 f972 	bl	800168c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013a8:	bf00      	nop
 80013aa:	bd80      	pop	{r7, pc}

080013ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80013b0:	4802      	ldr	r0, [pc, #8]	@ (80013bc <TIM2_IRQHandler+0x10>)
 80013b2:	f001 fddd 	bl	8002f70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000148 	.word	0x20000148

080013c0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80013c4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80013c8:	f000 fc62 	bl	8001c90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013cc:	bf00      	nop
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <setTimer>:

int timer_flag[10];
int timer_counter[10];

void setTimer(int index, int counter)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
	timer_flag[index] = 0;
 80013da:	4a07      	ldr	r2, [pc, #28]	@ (80013f8 <setTimer+0x28>)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2100      	movs	r1, #0
 80013e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	timer_counter[index] = counter;
 80013e4:	4905      	ldr	r1, [pc, #20]	@ (80013fc <setTimer+0x2c>)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	683a      	ldr	r2, [r7, #0]
 80013ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80013ee:	bf00      	nop
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bc80      	pop	{r7}
 80013f6:	4770      	bx	lr
 80013f8:	200001d8 	.word	0x200001d8
 80013fc:	20000200 	.word	0x20000200

08001400 <timerRun>:

void timerRun()
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
	for(int i = 0; i < 10; i++)
 8001406:	2300      	movs	r3, #0
 8001408:	607b      	str	r3, [r7, #4]
 800140a:	e01c      	b.n	8001446 <timerRun+0x46>
	{
		if (timer_counter[i] > 0)
 800140c:	4a12      	ldr	r2, [pc, #72]	@ (8001458 <timerRun+0x58>)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001414:	2b00      	cmp	r3, #0
 8001416:	dd13      	ble.n	8001440 <timerRun+0x40>
		{
			timer_counter[i]--;
 8001418:	4a0f      	ldr	r2, [pc, #60]	@ (8001458 <timerRun+0x58>)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001420:	1e5a      	subs	r2, r3, #1
 8001422:	490d      	ldr	r1, [pc, #52]	@ (8001458 <timerRun+0x58>)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[i] <= 0)
 800142a:	4a0b      	ldr	r2, [pc, #44]	@ (8001458 <timerRun+0x58>)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001432:	2b00      	cmp	r3, #0
 8001434:	dc04      	bgt.n	8001440 <timerRun+0x40>
			{
				timer_flag[i] = 1;
 8001436:	4a09      	ldr	r2, [pc, #36]	@ (800145c <timerRun+0x5c>)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2101      	movs	r1, #1
 800143c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < 10; i++)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	3301      	adds	r3, #1
 8001444:	607b      	str	r3, [r7, #4]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2b09      	cmp	r3, #9
 800144a:	dddf      	ble.n	800140c <timerRun+0xc>
			}
		}
	}
}
 800144c:	bf00      	nop
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr
 8001458:	20000200 	.word	0x20000200
 800145c:	200001d8 	.word	0x200001d8

08001460 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001468:	4a14      	ldr	r2, [pc, #80]	@ (80014bc <_sbrk+0x5c>)
 800146a:	4b15      	ldr	r3, [pc, #84]	@ (80014c0 <_sbrk+0x60>)
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001474:	4b13      	ldr	r3, [pc, #76]	@ (80014c4 <_sbrk+0x64>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d102      	bne.n	8001482 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800147c:	4b11      	ldr	r3, [pc, #68]	@ (80014c4 <_sbrk+0x64>)
 800147e:	4a12      	ldr	r2, [pc, #72]	@ (80014c8 <_sbrk+0x68>)
 8001480:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001482:	4b10      	ldr	r3, [pc, #64]	@ (80014c4 <_sbrk+0x64>)
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4413      	add	r3, r2
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	429a      	cmp	r2, r3
 800148e:	d207      	bcs.n	80014a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001490:	f002 f9c4 	bl	800381c <__errno>
 8001494:	4603      	mov	r3, r0
 8001496:	220c      	movs	r2, #12
 8001498:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800149a:	f04f 33ff 	mov.w	r3, #4294967295
 800149e:	e009      	b.n	80014b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014a0:	4b08      	ldr	r3, [pc, #32]	@ (80014c4 <_sbrk+0x64>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014a6:	4b07      	ldr	r3, [pc, #28]	@ (80014c4 <_sbrk+0x64>)
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4413      	add	r3, r2
 80014ae:	4a05      	ldr	r2, [pc, #20]	@ (80014c4 <_sbrk+0x64>)
 80014b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014b2:	68fb      	ldr	r3, [r7, #12]
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3718      	adds	r7, #24
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20005000 	.word	0x20005000
 80014c0:	00000400 	.word	0x00000400
 80014c4:	20000228 	.word	0x20000228
 80014c8:	20000378 	.word	0x20000378

080014cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bc80      	pop	{r7}
 80014d6:	4770      	bx	lr

080014d8 <Light1>:
 *      Author: phanh
 */

#include "traffic_light.h"

void Light1(GPIO_PinState D3, GPIO_PinState D4) {
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	460a      	mov	r2, r1
 80014e2:	71fb      	strb	r3, [r7, #7]
 80014e4:	4613      	mov	r3, r2
 80014e6:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOB, D3_Pin, D3);
 80014e8:	79fb      	ldrb	r3, [r7, #7]
 80014ea:	461a      	mov	r2, r3
 80014ec:	2108      	movs	r1, #8
 80014ee:	4806      	ldr	r0, [pc, #24]	@ (8001508 <Light1+0x30>)
 80014f0:	f000 fbb5 	bl	8001c5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D4_Pin, D4);
 80014f4:	79bb      	ldrb	r3, [r7, #6]
 80014f6:	461a      	mov	r2, r3
 80014f8:	2120      	movs	r1, #32
 80014fa:	4803      	ldr	r0, [pc, #12]	@ (8001508 <Light1+0x30>)
 80014fc:	f000 fbaf 	bl	8001c5e <HAL_GPIO_WritePin>
}
 8001500:	bf00      	nop
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40010c00 	.word	0x40010c00

0800150c <Light2>:

void Light2(GPIO_PinState D5, GPIO_PinState D6) {
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	460a      	mov	r2, r1
 8001516:	71fb      	strb	r3, [r7, #7]
 8001518:	4613      	mov	r3, r2
 800151a:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOB, D5_Pin, D5);
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	461a      	mov	r2, r3
 8001520:	2110      	movs	r1, #16
 8001522:	4807      	ldr	r0, [pc, #28]	@ (8001540 <Light2+0x34>)
 8001524:	f000 fb9b 	bl	8001c5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D6_Pin, D6);
 8001528:	79bb      	ldrb	r3, [r7, #6]
 800152a:	461a      	mov	r2, r3
 800152c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001530:	4803      	ldr	r0, [pc, #12]	@ (8001540 <Light2+0x34>)
 8001532:	f000 fb94 	bl	8001c5e <HAL_GPIO_WritePin>
}
 8001536:	bf00      	nop
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40010c00 	.word	0x40010c00

08001544 <Light3>:
void Light3(GPIO_PinState D7, GPIO_PinState D8) {
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	460a      	mov	r2, r1
 800154e:	71fb      	strb	r3, [r7, #7]
 8001550:	4613      	mov	r3, r2
 8001552:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOA, D7_Pin, D7);
 8001554:	79fb      	ldrb	r3, [r7, #7]
 8001556:	461a      	mov	r2, r3
 8001558:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800155c:	4806      	ldr	r0, [pc, #24]	@ (8001578 <Light3+0x34>)
 800155e:	f000 fb7e 	bl	8001c5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, D8_Pin, D8);
 8001562:	79bb      	ldrb	r3, [r7, #6]
 8001564:	461a      	mov	r2, r3
 8001566:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800156a:	4803      	ldr	r0, [pc, #12]	@ (8001578 <Light3+0x34>)
 800156c:	f000 fb77 	bl	8001c5e <HAL_GPIO_WritePin>
}
 8001570:	bf00      	nop
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40010800 	.word	0x40010800

0800157c <Light4>:

void Light4(GPIO_PinState D9, GPIO_PinState D10) {
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	460a      	mov	r2, r1
 8001586:	71fb      	strb	r3, [r7, #7]
 8001588:	4613      	mov	r3, r2
 800158a:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOC, D9_Pin, D9);
 800158c:	79fb      	ldrb	r3, [r7, #7]
 800158e:	461a      	mov	r2, r3
 8001590:	2180      	movs	r1, #128	@ 0x80
 8001592:	4806      	ldr	r0, [pc, #24]	@ (80015ac <Light4+0x30>)
 8001594:	f000 fb63 	bl	8001c5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D10_Pin, D10);
 8001598:	79bb      	ldrb	r3, [r7, #6]
 800159a:	461a      	mov	r2, r3
 800159c:	2140      	movs	r1, #64	@ 0x40
 800159e:	4804      	ldr	r0, [pc, #16]	@ (80015b0 <Light4+0x34>)
 80015a0:	f000 fb5d 	bl	8001c5e <HAL_GPIO_WritePin>
}
 80015a4:	bf00      	nop
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	40011000 	.word	0x40011000
 80015b0:	40010c00 	.word	0x40010c00

080015b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015b4:	f7ff ff8a 	bl	80014cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015b8:	480b      	ldr	r0, [pc, #44]	@ (80015e8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80015ba:	490c      	ldr	r1, [pc, #48]	@ (80015ec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80015bc:	4a0c      	ldr	r2, [pc, #48]	@ (80015f0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80015be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015c0:	e002      	b.n	80015c8 <LoopCopyDataInit>

080015c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015c6:	3304      	adds	r3, #4

080015c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015cc:	d3f9      	bcc.n	80015c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ce:	4a09      	ldr	r2, [pc, #36]	@ (80015f4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80015d0:	4c09      	ldr	r4, [pc, #36]	@ (80015f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015d4:	e001      	b.n	80015da <LoopFillZerobss>

080015d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015d8:	3204      	adds	r2, #4

080015da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015dc:	d3fb      	bcc.n	80015d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015de:	f002 f923 	bl	8003828 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015e2:	f7ff fc0f 	bl	8000e04 <main>
  bx lr
 80015e6:	4770      	bx	lr
  ldr r0, =_sdata
 80015e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015ec:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80015f0:	08004268 	.word	0x08004268
  ldr r2, =_sbss
 80015f4:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 80015f8:	20000378 	.word	0x20000378

080015fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015fc:	e7fe      	b.n	80015fc <ADC1_2_IRQHandler>
	...

08001600 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001604:	4b08      	ldr	r3, [pc, #32]	@ (8001628 <HAL_Init+0x28>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a07      	ldr	r2, [pc, #28]	@ (8001628 <HAL_Init+0x28>)
 800160a:	f043 0310 	orr.w	r3, r3, #16
 800160e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001610:	2003      	movs	r0, #3
 8001612:	f000 f947 	bl	80018a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001616:	2000      	movs	r0, #0
 8001618:	f000 f808 	bl	800162c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800161c:	f7ff fdb6 	bl	800118c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001620:	2300      	movs	r3, #0
}
 8001622:	4618      	mov	r0, r3
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40022000 	.word	0x40022000

0800162c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001634:	4b12      	ldr	r3, [pc, #72]	@ (8001680 <HAL_InitTick+0x54>)
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	4b12      	ldr	r3, [pc, #72]	@ (8001684 <HAL_InitTick+0x58>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	4619      	mov	r1, r3
 800163e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001642:	fbb3 f3f1 	udiv	r3, r3, r1
 8001646:	fbb2 f3f3 	udiv	r3, r2, r3
 800164a:	4618      	mov	r0, r3
 800164c:	f000 f95f 	bl	800190e <HAL_SYSTICK_Config>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e00e      	b.n	8001678 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2b0f      	cmp	r3, #15
 800165e:	d80a      	bhi.n	8001676 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001660:	2200      	movs	r2, #0
 8001662:	6879      	ldr	r1, [r7, #4]
 8001664:	f04f 30ff 	mov.w	r0, #4294967295
 8001668:	f000 f927 	bl	80018ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800166c:	4a06      	ldr	r2, [pc, #24]	@ (8001688 <HAL_InitTick+0x5c>)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001672:	2300      	movs	r3, #0
 8001674:	e000      	b.n	8001678 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
}
 8001678:	4618      	mov	r0, r3
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	20000030 	.word	0x20000030
 8001684:	20000038 	.word	0x20000038
 8001688:	20000034 	.word	0x20000034

0800168c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001690:	4b05      	ldr	r3, [pc, #20]	@ (80016a8 <HAL_IncTick+0x1c>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	461a      	mov	r2, r3
 8001696:	4b05      	ldr	r3, [pc, #20]	@ (80016ac <HAL_IncTick+0x20>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4413      	add	r3, r2
 800169c:	4a03      	ldr	r2, [pc, #12]	@ (80016ac <HAL_IncTick+0x20>)
 800169e:	6013      	str	r3, [r2, #0]
}
 80016a0:	bf00      	nop
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bc80      	pop	{r7}
 80016a6:	4770      	bx	lr
 80016a8:	20000038 	.word	0x20000038
 80016ac:	2000022c 	.word	0x2000022c

080016b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  return uwTick;
 80016b4:	4b02      	ldr	r3, [pc, #8]	@ (80016c0 <HAL_GetTick+0x10>)
 80016b6:	681b      	ldr	r3, [r3, #0]
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bc80      	pop	{r7}
 80016be:	4770      	bx	lr
 80016c0:	2000022c 	.word	0x2000022c

080016c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016cc:	f7ff fff0 	bl	80016b0 <HAL_GetTick>
 80016d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016dc:	d005      	beq.n	80016ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016de:	4b0a      	ldr	r3, [pc, #40]	@ (8001708 <HAL_Delay+0x44>)
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	461a      	mov	r2, r3
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	4413      	add	r3, r2
 80016e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016ea:	bf00      	nop
 80016ec:	f7ff ffe0 	bl	80016b0 <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	68fa      	ldr	r2, [r7, #12]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d8f7      	bhi.n	80016ec <HAL_Delay+0x28>
  {
  }
}
 80016fc:	bf00      	nop
 80016fe:	bf00      	nop
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20000038 	.word	0x20000038

0800170c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f003 0307 	and.w	r3, r3, #7
 800171a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800171c:	4b0c      	ldr	r3, [pc, #48]	@ (8001750 <__NVIC_SetPriorityGrouping+0x44>)
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001722:	68ba      	ldr	r2, [r7, #8]
 8001724:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001728:	4013      	ands	r3, r2
 800172a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001734:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001738:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800173c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800173e:	4a04      	ldr	r2, [pc, #16]	@ (8001750 <__NVIC_SetPriorityGrouping+0x44>)
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	60d3      	str	r3, [r2, #12]
}
 8001744:	bf00      	nop
 8001746:	3714      	adds	r7, #20
 8001748:	46bd      	mov	sp, r7
 800174a:	bc80      	pop	{r7}
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	e000ed00 	.word	0xe000ed00

08001754 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001758:	4b04      	ldr	r3, [pc, #16]	@ (800176c <__NVIC_GetPriorityGrouping+0x18>)
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	0a1b      	lsrs	r3, r3, #8
 800175e:	f003 0307 	and.w	r3, r3, #7
}
 8001762:	4618      	mov	r0, r3
 8001764:	46bd      	mov	sp, r7
 8001766:	bc80      	pop	{r7}
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	e000ed00 	.word	0xe000ed00

08001770 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800177a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177e:	2b00      	cmp	r3, #0
 8001780:	db0b      	blt.n	800179a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001782:	79fb      	ldrb	r3, [r7, #7]
 8001784:	f003 021f 	and.w	r2, r3, #31
 8001788:	4906      	ldr	r1, [pc, #24]	@ (80017a4 <__NVIC_EnableIRQ+0x34>)
 800178a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178e:	095b      	lsrs	r3, r3, #5
 8001790:	2001      	movs	r0, #1
 8001792:	fa00 f202 	lsl.w	r2, r0, r2
 8001796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800179a:	bf00      	nop
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	bc80      	pop	{r7}
 80017a2:	4770      	bx	lr
 80017a4:	e000e100 	.word	0xe000e100

080017a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	6039      	str	r1, [r7, #0]
 80017b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	db0a      	blt.n	80017d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	b2da      	uxtb	r2, r3
 80017c0:	490c      	ldr	r1, [pc, #48]	@ (80017f4 <__NVIC_SetPriority+0x4c>)
 80017c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c6:	0112      	lsls	r2, r2, #4
 80017c8:	b2d2      	uxtb	r2, r2
 80017ca:	440b      	add	r3, r1
 80017cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017d0:	e00a      	b.n	80017e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	4908      	ldr	r1, [pc, #32]	@ (80017f8 <__NVIC_SetPriority+0x50>)
 80017d8:	79fb      	ldrb	r3, [r7, #7]
 80017da:	f003 030f 	and.w	r3, r3, #15
 80017de:	3b04      	subs	r3, #4
 80017e0:	0112      	lsls	r2, r2, #4
 80017e2:	b2d2      	uxtb	r2, r2
 80017e4:	440b      	add	r3, r1
 80017e6:	761a      	strb	r2, [r3, #24]
}
 80017e8:	bf00      	nop
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bc80      	pop	{r7}
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	e000e100 	.word	0xe000e100
 80017f8:	e000ed00 	.word	0xe000ed00

080017fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b089      	sub	sp, #36	@ 0x24
 8001800:	af00      	add	r7, sp, #0
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f003 0307 	and.w	r3, r3, #7
 800180e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	f1c3 0307 	rsb	r3, r3, #7
 8001816:	2b04      	cmp	r3, #4
 8001818:	bf28      	it	cs
 800181a:	2304      	movcs	r3, #4
 800181c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	3304      	adds	r3, #4
 8001822:	2b06      	cmp	r3, #6
 8001824:	d902      	bls.n	800182c <NVIC_EncodePriority+0x30>
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	3b03      	subs	r3, #3
 800182a:	e000      	b.n	800182e <NVIC_EncodePriority+0x32>
 800182c:	2300      	movs	r3, #0
 800182e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001830:	f04f 32ff 	mov.w	r2, #4294967295
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	43da      	mvns	r2, r3
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	401a      	ands	r2, r3
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001844:	f04f 31ff 	mov.w	r1, #4294967295
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	fa01 f303 	lsl.w	r3, r1, r3
 800184e:	43d9      	mvns	r1, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001854:	4313      	orrs	r3, r2
         );
}
 8001856:	4618      	mov	r0, r3
 8001858:	3724      	adds	r7, #36	@ 0x24
 800185a:	46bd      	mov	sp, r7
 800185c:	bc80      	pop	{r7}
 800185e:	4770      	bx	lr

08001860 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	3b01      	subs	r3, #1
 800186c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001870:	d301      	bcc.n	8001876 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001872:	2301      	movs	r3, #1
 8001874:	e00f      	b.n	8001896 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001876:	4a0a      	ldr	r2, [pc, #40]	@ (80018a0 <SysTick_Config+0x40>)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	3b01      	subs	r3, #1
 800187c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800187e:	210f      	movs	r1, #15
 8001880:	f04f 30ff 	mov.w	r0, #4294967295
 8001884:	f7ff ff90 	bl	80017a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001888:	4b05      	ldr	r3, [pc, #20]	@ (80018a0 <SysTick_Config+0x40>)
 800188a:	2200      	movs	r2, #0
 800188c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800188e:	4b04      	ldr	r3, [pc, #16]	@ (80018a0 <SysTick_Config+0x40>)
 8001890:	2207      	movs	r2, #7
 8001892:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	e000e010 	.word	0xe000e010

080018a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f7ff ff2d 	bl	800170c <__NVIC_SetPriorityGrouping>
}
 80018b2:	bf00      	nop
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b086      	sub	sp, #24
 80018be:	af00      	add	r7, sp, #0
 80018c0:	4603      	mov	r3, r0
 80018c2:	60b9      	str	r1, [r7, #8]
 80018c4:	607a      	str	r2, [r7, #4]
 80018c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018c8:	2300      	movs	r3, #0
 80018ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018cc:	f7ff ff42 	bl	8001754 <__NVIC_GetPriorityGrouping>
 80018d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	68b9      	ldr	r1, [r7, #8]
 80018d6:	6978      	ldr	r0, [r7, #20]
 80018d8:	f7ff ff90 	bl	80017fc <NVIC_EncodePriority>
 80018dc:	4602      	mov	r2, r0
 80018de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018e2:	4611      	mov	r1, r2
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff ff5f 	bl	80017a8 <__NVIC_SetPriority>
}
 80018ea:	bf00      	nop
 80018ec:	3718      	adds	r7, #24
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b082      	sub	sp, #8
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	4603      	mov	r3, r0
 80018fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff ff35 	bl	8001770 <__NVIC_EnableIRQ>
}
 8001906:	bf00      	nop
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	b082      	sub	sp, #8
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f7ff ffa2 	bl	8001860 <SysTick_Config>
 800191c:	4603      	mov	r3, r0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
	...

08001928 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001928:	b480      	push	{r7}
 800192a:	b08b      	sub	sp, #44	@ 0x2c
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001932:	2300      	movs	r3, #0
 8001934:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001936:	2300      	movs	r3, #0
 8001938:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800193a:	e169      	b.n	8001c10 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800193c:	2201      	movs	r2, #1
 800193e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	69fa      	ldr	r2, [r7, #28]
 800194c:	4013      	ands	r3, r2
 800194e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	429a      	cmp	r2, r3
 8001956:	f040 8158 	bne.w	8001c0a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	4a9a      	ldr	r2, [pc, #616]	@ (8001bc8 <HAL_GPIO_Init+0x2a0>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d05e      	beq.n	8001a22 <HAL_GPIO_Init+0xfa>
 8001964:	4a98      	ldr	r2, [pc, #608]	@ (8001bc8 <HAL_GPIO_Init+0x2a0>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d875      	bhi.n	8001a56 <HAL_GPIO_Init+0x12e>
 800196a:	4a98      	ldr	r2, [pc, #608]	@ (8001bcc <HAL_GPIO_Init+0x2a4>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d058      	beq.n	8001a22 <HAL_GPIO_Init+0xfa>
 8001970:	4a96      	ldr	r2, [pc, #600]	@ (8001bcc <HAL_GPIO_Init+0x2a4>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d86f      	bhi.n	8001a56 <HAL_GPIO_Init+0x12e>
 8001976:	4a96      	ldr	r2, [pc, #600]	@ (8001bd0 <HAL_GPIO_Init+0x2a8>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d052      	beq.n	8001a22 <HAL_GPIO_Init+0xfa>
 800197c:	4a94      	ldr	r2, [pc, #592]	@ (8001bd0 <HAL_GPIO_Init+0x2a8>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d869      	bhi.n	8001a56 <HAL_GPIO_Init+0x12e>
 8001982:	4a94      	ldr	r2, [pc, #592]	@ (8001bd4 <HAL_GPIO_Init+0x2ac>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d04c      	beq.n	8001a22 <HAL_GPIO_Init+0xfa>
 8001988:	4a92      	ldr	r2, [pc, #584]	@ (8001bd4 <HAL_GPIO_Init+0x2ac>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d863      	bhi.n	8001a56 <HAL_GPIO_Init+0x12e>
 800198e:	4a92      	ldr	r2, [pc, #584]	@ (8001bd8 <HAL_GPIO_Init+0x2b0>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d046      	beq.n	8001a22 <HAL_GPIO_Init+0xfa>
 8001994:	4a90      	ldr	r2, [pc, #576]	@ (8001bd8 <HAL_GPIO_Init+0x2b0>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d85d      	bhi.n	8001a56 <HAL_GPIO_Init+0x12e>
 800199a:	2b12      	cmp	r3, #18
 800199c:	d82a      	bhi.n	80019f4 <HAL_GPIO_Init+0xcc>
 800199e:	2b12      	cmp	r3, #18
 80019a0:	d859      	bhi.n	8001a56 <HAL_GPIO_Init+0x12e>
 80019a2:	a201      	add	r2, pc, #4	@ (adr r2, 80019a8 <HAL_GPIO_Init+0x80>)
 80019a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019a8:	08001a23 	.word	0x08001a23
 80019ac:	080019fd 	.word	0x080019fd
 80019b0:	08001a0f 	.word	0x08001a0f
 80019b4:	08001a51 	.word	0x08001a51
 80019b8:	08001a57 	.word	0x08001a57
 80019bc:	08001a57 	.word	0x08001a57
 80019c0:	08001a57 	.word	0x08001a57
 80019c4:	08001a57 	.word	0x08001a57
 80019c8:	08001a57 	.word	0x08001a57
 80019cc:	08001a57 	.word	0x08001a57
 80019d0:	08001a57 	.word	0x08001a57
 80019d4:	08001a57 	.word	0x08001a57
 80019d8:	08001a57 	.word	0x08001a57
 80019dc:	08001a57 	.word	0x08001a57
 80019e0:	08001a57 	.word	0x08001a57
 80019e4:	08001a57 	.word	0x08001a57
 80019e8:	08001a57 	.word	0x08001a57
 80019ec:	08001a05 	.word	0x08001a05
 80019f0:	08001a19 	.word	0x08001a19
 80019f4:	4a79      	ldr	r2, [pc, #484]	@ (8001bdc <HAL_GPIO_Init+0x2b4>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d013      	beq.n	8001a22 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019fa:	e02c      	b.n	8001a56 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	623b      	str	r3, [r7, #32]
          break;
 8001a02:	e029      	b.n	8001a58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	3304      	adds	r3, #4
 8001a0a:	623b      	str	r3, [r7, #32]
          break;
 8001a0c:	e024      	b.n	8001a58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	3308      	adds	r3, #8
 8001a14:	623b      	str	r3, [r7, #32]
          break;
 8001a16:	e01f      	b.n	8001a58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	330c      	adds	r3, #12
 8001a1e:	623b      	str	r3, [r7, #32]
          break;
 8001a20:	e01a      	b.n	8001a58 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d102      	bne.n	8001a30 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a2a:	2304      	movs	r3, #4
 8001a2c:	623b      	str	r3, [r7, #32]
          break;
 8001a2e:	e013      	b.n	8001a58 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d105      	bne.n	8001a44 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a38:	2308      	movs	r3, #8
 8001a3a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	69fa      	ldr	r2, [r7, #28]
 8001a40:	611a      	str	r2, [r3, #16]
          break;
 8001a42:	e009      	b.n	8001a58 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a44:	2308      	movs	r3, #8
 8001a46:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	69fa      	ldr	r2, [r7, #28]
 8001a4c:	615a      	str	r2, [r3, #20]
          break;
 8001a4e:	e003      	b.n	8001a58 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a50:	2300      	movs	r3, #0
 8001a52:	623b      	str	r3, [r7, #32]
          break;
 8001a54:	e000      	b.n	8001a58 <HAL_GPIO_Init+0x130>
          break;
 8001a56:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	2bff      	cmp	r3, #255	@ 0xff
 8001a5c:	d801      	bhi.n	8001a62 <HAL_GPIO_Init+0x13a>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	e001      	b.n	8001a66 <HAL_GPIO_Init+0x13e>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	3304      	adds	r3, #4
 8001a66:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	2bff      	cmp	r3, #255	@ 0xff
 8001a6c:	d802      	bhi.n	8001a74 <HAL_GPIO_Init+0x14c>
 8001a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	e002      	b.n	8001a7a <HAL_GPIO_Init+0x152>
 8001a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a76:	3b08      	subs	r3, #8
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	210f      	movs	r1, #15
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	fa01 f303 	lsl.w	r3, r1, r3
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	401a      	ands	r2, r3
 8001a8c:	6a39      	ldr	r1, [r7, #32]
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	fa01 f303 	lsl.w	r3, r1, r3
 8001a94:	431a      	orrs	r2, r3
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f000 80b1 	beq.w	8001c0a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001aa8:	4b4d      	ldr	r3, [pc, #308]	@ (8001be0 <HAL_GPIO_Init+0x2b8>)
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	4a4c      	ldr	r2, [pc, #304]	@ (8001be0 <HAL_GPIO_Init+0x2b8>)
 8001aae:	f043 0301 	orr.w	r3, r3, #1
 8001ab2:	6193      	str	r3, [r2, #24]
 8001ab4:	4b4a      	ldr	r3, [pc, #296]	@ (8001be0 <HAL_GPIO_Init+0x2b8>)
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	f003 0301 	and.w	r3, r3, #1
 8001abc:	60bb      	str	r3, [r7, #8]
 8001abe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ac0:	4a48      	ldr	r2, [pc, #288]	@ (8001be4 <HAL_GPIO_Init+0x2bc>)
 8001ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac4:	089b      	lsrs	r3, r3, #2
 8001ac6:	3302      	adds	r3, #2
 8001ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001acc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad0:	f003 0303 	and.w	r3, r3, #3
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	220f      	movs	r2, #15
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	43db      	mvns	r3, r3
 8001ade:	68fa      	ldr	r2, [r7, #12]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	4a40      	ldr	r2, [pc, #256]	@ (8001be8 <HAL_GPIO_Init+0x2c0>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d013      	beq.n	8001b14 <HAL_GPIO_Init+0x1ec>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	4a3f      	ldr	r2, [pc, #252]	@ (8001bec <HAL_GPIO_Init+0x2c4>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d00d      	beq.n	8001b10 <HAL_GPIO_Init+0x1e8>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	4a3e      	ldr	r2, [pc, #248]	@ (8001bf0 <HAL_GPIO_Init+0x2c8>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d007      	beq.n	8001b0c <HAL_GPIO_Init+0x1e4>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	4a3d      	ldr	r2, [pc, #244]	@ (8001bf4 <HAL_GPIO_Init+0x2cc>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d101      	bne.n	8001b08 <HAL_GPIO_Init+0x1e0>
 8001b04:	2303      	movs	r3, #3
 8001b06:	e006      	b.n	8001b16 <HAL_GPIO_Init+0x1ee>
 8001b08:	2304      	movs	r3, #4
 8001b0a:	e004      	b.n	8001b16 <HAL_GPIO_Init+0x1ee>
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	e002      	b.n	8001b16 <HAL_GPIO_Init+0x1ee>
 8001b10:	2301      	movs	r3, #1
 8001b12:	e000      	b.n	8001b16 <HAL_GPIO_Init+0x1ee>
 8001b14:	2300      	movs	r3, #0
 8001b16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b18:	f002 0203 	and.w	r2, r2, #3
 8001b1c:	0092      	lsls	r2, r2, #2
 8001b1e:	4093      	lsls	r3, r2
 8001b20:	68fa      	ldr	r2, [r7, #12]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b26:	492f      	ldr	r1, [pc, #188]	@ (8001be4 <HAL_GPIO_Init+0x2bc>)
 8001b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b2a:	089b      	lsrs	r3, r3, #2
 8001b2c:	3302      	adds	r3, #2
 8001b2e:	68fa      	ldr	r2, [r7, #12]
 8001b30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d006      	beq.n	8001b4e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b40:	4b2d      	ldr	r3, [pc, #180]	@ (8001bf8 <HAL_GPIO_Init+0x2d0>)
 8001b42:	689a      	ldr	r2, [r3, #8]
 8001b44:	492c      	ldr	r1, [pc, #176]	@ (8001bf8 <HAL_GPIO_Init+0x2d0>)
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	608b      	str	r3, [r1, #8]
 8001b4c:	e006      	b.n	8001b5c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b4e:	4b2a      	ldr	r3, [pc, #168]	@ (8001bf8 <HAL_GPIO_Init+0x2d0>)
 8001b50:	689a      	ldr	r2, [r3, #8]
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	43db      	mvns	r3, r3
 8001b56:	4928      	ldr	r1, [pc, #160]	@ (8001bf8 <HAL_GPIO_Init+0x2d0>)
 8001b58:	4013      	ands	r3, r2
 8001b5a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d006      	beq.n	8001b76 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b68:	4b23      	ldr	r3, [pc, #140]	@ (8001bf8 <HAL_GPIO_Init+0x2d0>)
 8001b6a:	68da      	ldr	r2, [r3, #12]
 8001b6c:	4922      	ldr	r1, [pc, #136]	@ (8001bf8 <HAL_GPIO_Init+0x2d0>)
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	60cb      	str	r3, [r1, #12]
 8001b74:	e006      	b.n	8001b84 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b76:	4b20      	ldr	r3, [pc, #128]	@ (8001bf8 <HAL_GPIO_Init+0x2d0>)
 8001b78:	68da      	ldr	r2, [r3, #12]
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	491e      	ldr	r1, [pc, #120]	@ (8001bf8 <HAL_GPIO_Init+0x2d0>)
 8001b80:	4013      	ands	r3, r2
 8001b82:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d006      	beq.n	8001b9e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b90:	4b19      	ldr	r3, [pc, #100]	@ (8001bf8 <HAL_GPIO_Init+0x2d0>)
 8001b92:	685a      	ldr	r2, [r3, #4]
 8001b94:	4918      	ldr	r1, [pc, #96]	@ (8001bf8 <HAL_GPIO_Init+0x2d0>)
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	604b      	str	r3, [r1, #4]
 8001b9c:	e006      	b.n	8001bac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b9e:	4b16      	ldr	r3, [pc, #88]	@ (8001bf8 <HAL_GPIO_Init+0x2d0>)
 8001ba0:	685a      	ldr	r2, [r3, #4]
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	4914      	ldr	r1, [pc, #80]	@ (8001bf8 <HAL_GPIO_Init+0x2d0>)
 8001ba8:	4013      	ands	r3, r2
 8001baa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d021      	beq.n	8001bfc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001bb8:	4b0f      	ldr	r3, [pc, #60]	@ (8001bf8 <HAL_GPIO_Init+0x2d0>)
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	490e      	ldr	r1, [pc, #56]	@ (8001bf8 <HAL_GPIO_Init+0x2d0>)
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	600b      	str	r3, [r1, #0]
 8001bc4:	e021      	b.n	8001c0a <HAL_GPIO_Init+0x2e2>
 8001bc6:	bf00      	nop
 8001bc8:	10320000 	.word	0x10320000
 8001bcc:	10310000 	.word	0x10310000
 8001bd0:	10220000 	.word	0x10220000
 8001bd4:	10210000 	.word	0x10210000
 8001bd8:	10120000 	.word	0x10120000
 8001bdc:	10110000 	.word	0x10110000
 8001be0:	40021000 	.word	0x40021000
 8001be4:	40010000 	.word	0x40010000
 8001be8:	40010800 	.word	0x40010800
 8001bec:	40010c00 	.word	0x40010c00
 8001bf0:	40011000 	.word	0x40011000
 8001bf4:	40011400 	.word	0x40011400
 8001bf8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8001c2c <HAL_GPIO_Init+0x304>)
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	43db      	mvns	r3, r3
 8001c04:	4909      	ldr	r1, [pc, #36]	@ (8001c2c <HAL_GPIO_Init+0x304>)
 8001c06:	4013      	ands	r3, r2
 8001c08:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c16:	fa22 f303 	lsr.w	r3, r2, r3
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	f47f ae8e 	bne.w	800193c <HAL_GPIO_Init+0x14>
  }
}
 8001c20:	bf00      	nop
 8001c22:	bf00      	nop
 8001c24:	372c      	adds	r7, #44	@ 0x2c
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bc80      	pop	{r7}
 8001c2a:	4770      	bx	lr
 8001c2c:	40010400 	.word	0x40010400

08001c30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	460b      	mov	r3, r1
 8001c3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689a      	ldr	r2, [r3, #8]
 8001c40:	887b      	ldrh	r3, [r7, #2]
 8001c42:	4013      	ands	r3, r2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d002      	beq.n	8001c4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	73fb      	strb	r3, [r7, #15]
 8001c4c:	e001      	b.n	8001c52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3714      	adds	r7, #20
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bc80      	pop	{r7}
 8001c5c:	4770      	bx	lr

08001c5e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	b083      	sub	sp, #12
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
 8001c66:	460b      	mov	r3, r1
 8001c68:	807b      	strh	r3, [r7, #2]
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c6e:	787b      	ldrb	r3, [r7, #1]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d003      	beq.n	8001c7c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c74:	887a      	ldrh	r2, [r7, #2]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c7a:	e003      	b.n	8001c84 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c7c:	887b      	ldrh	r3, [r7, #2]
 8001c7e:	041a      	lsls	r2, r3, #16
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	611a      	str	r2, [r3, #16]
}
 8001c84:	bf00      	nop
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bc80      	pop	{r7}
 8001c8c:	4770      	bx	lr
	...

08001c90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001c9a:	4b08      	ldr	r3, [pc, #32]	@ (8001cbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c9c:	695a      	ldr	r2, [r3, #20]
 8001c9e:	88fb      	ldrh	r3, [r7, #6]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d006      	beq.n	8001cb4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ca6:	4a05      	ldr	r2, [pc, #20]	@ (8001cbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ca8:	88fb      	ldrh	r3, [r7, #6]
 8001caa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001cac:	88fb      	ldrh	r3, [r7, #6]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f000 f806 	bl	8001cc0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001cb4:	bf00      	nop
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40010400 	.word	0x40010400

08001cc0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001cca:	bf00      	nop
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bc80      	pop	{r7}
 8001cd2:	4770      	bx	lr

08001cd4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d101      	bne.n	8001ce6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e12b      	b.n	8001f3e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d106      	bne.n	8001d00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f7ff fa78 	bl	80011f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2224      	movs	r2, #36	@ 0x24
 8001d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f022 0201 	bic.w	r2, r2, #1
 8001d16:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d26:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d36:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d38:	f001 f832 	bl	8002da0 <HAL_RCC_GetPCLK1Freq>
 8001d3c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	4a81      	ldr	r2, [pc, #516]	@ (8001f48 <HAL_I2C_Init+0x274>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d807      	bhi.n	8001d58 <HAL_I2C_Init+0x84>
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	4a80      	ldr	r2, [pc, #512]	@ (8001f4c <HAL_I2C_Init+0x278>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	bf94      	ite	ls
 8001d50:	2301      	movls	r3, #1
 8001d52:	2300      	movhi	r3, #0
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	e006      	b.n	8001d66 <HAL_I2C_Init+0x92>
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	4a7d      	ldr	r2, [pc, #500]	@ (8001f50 <HAL_I2C_Init+0x27c>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	bf94      	ite	ls
 8001d60:	2301      	movls	r3, #1
 8001d62:	2300      	movhi	r3, #0
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e0e7      	b.n	8001f3e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	4a78      	ldr	r2, [pc, #480]	@ (8001f54 <HAL_I2C_Init+0x280>)
 8001d72:	fba2 2303 	umull	r2, r3, r2, r3
 8001d76:	0c9b      	lsrs	r3, r3, #18
 8001d78:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	68ba      	ldr	r2, [r7, #8]
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	6a1b      	ldr	r3, [r3, #32]
 8001d94:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	4a6a      	ldr	r2, [pc, #424]	@ (8001f48 <HAL_I2C_Init+0x274>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d802      	bhi.n	8001da8 <HAL_I2C_Init+0xd4>
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	3301      	adds	r3, #1
 8001da6:	e009      	b.n	8001dbc <HAL_I2C_Init+0xe8>
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001dae:	fb02 f303 	mul.w	r3, r2, r3
 8001db2:	4a69      	ldr	r2, [pc, #420]	@ (8001f58 <HAL_I2C_Init+0x284>)
 8001db4:	fba2 2303 	umull	r2, r3, r2, r3
 8001db8:	099b      	lsrs	r3, r3, #6
 8001dba:	3301      	adds	r3, #1
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	6812      	ldr	r2, [r2, #0]
 8001dc0:	430b      	orrs	r3, r1
 8001dc2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	69db      	ldr	r3, [r3, #28]
 8001dca:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001dce:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	495c      	ldr	r1, [pc, #368]	@ (8001f48 <HAL_I2C_Init+0x274>)
 8001dd8:	428b      	cmp	r3, r1
 8001dda:	d819      	bhi.n	8001e10 <HAL_I2C_Init+0x13c>
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	1e59      	subs	r1, r3, #1
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001dea:	1c59      	adds	r1, r3, #1
 8001dec:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001df0:	400b      	ands	r3, r1
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d00a      	beq.n	8001e0c <HAL_I2C_Init+0x138>
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	1e59      	subs	r1, r3, #1
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e04:	3301      	adds	r3, #1
 8001e06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e0a:	e051      	b.n	8001eb0 <HAL_I2C_Init+0x1dc>
 8001e0c:	2304      	movs	r3, #4
 8001e0e:	e04f      	b.n	8001eb0 <HAL_I2C_Init+0x1dc>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d111      	bne.n	8001e3c <HAL_I2C_Init+0x168>
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	1e58      	subs	r0, r3, #1
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6859      	ldr	r1, [r3, #4]
 8001e20:	460b      	mov	r3, r1
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	440b      	add	r3, r1
 8001e26:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	bf0c      	ite	eq
 8001e34:	2301      	moveq	r3, #1
 8001e36:	2300      	movne	r3, #0
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	e012      	b.n	8001e62 <HAL_I2C_Init+0x18e>
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	1e58      	subs	r0, r3, #1
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6859      	ldr	r1, [r3, #4]
 8001e44:	460b      	mov	r3, r1
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	440b      	add	r3, r1
 8001e4a:	0099      	lsls	r1, r3, #2
 8001e4c:	440b      	add	r3, r1
 8001e4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e52:	3301      	adds	r3, #1
 8001e54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	bf0c      	ite	eq
 8001e5c:	2301      	moveq	r3, #1
 8001e5e:	2300      	movne	r3, #0
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <HAL_I2C_Init+0x196>
 8001e66:	2301      	movs	r3, #1
 8001e68:	e022      	b.n	8001eb0 <HAL_I2C_Init+0x1dc>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d10e      	bne.n	8001e90 <HAL_I2C_Init+0x1bc>
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	1e58      	subs	r0, r3, #1
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6859      	ldr	r1, [r3, #4]
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	440b      	add	r3, r1
 8001e80:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e84:	3301      	adds	r3, #1
 8001e86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e8e:	e00f      	b.n	8001eb0 <HAL_I2C_Init+0x1dc>
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	1e58      	subs	r0, r3, #1
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6859      	ldr	r1, [r3, #4]
 8001e98:	460b      	mov	r3, r1
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	440b      	add	r3, r1
 8001e9e:	0099      	lsls	r1, r3, #2
 8001ea0:	440b      	add	r3, r1
 8001ea2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001eb0:	6879      	ldr	r1, [r7, #4]
 8001eb2:	6809      	ldr	r1, [r1, #0]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	69da      	ldr	r2, [r3, #28]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a1b      	ldr	r3, [r3, #32]
 8001eca:	431a      	orrs	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001ede:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	6911      	ldr	r1, [r2, #16]
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	68d2      	ldr	r2, [r2, #12]
 8001eea:	4311      	orrs	r1, r2
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	6812      	ldr	r2, [r2, #0]
 8001ef0:	430b      	orrs	r3, r1
 8001ef2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	695a      	ldr	r2, [r3, #20]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	431a      	orrs	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f042 0201 	orr.w	r2, r2, #1
 8001f1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2220      	movs	r2, #32
 8001f2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3710      	adds	r7, #16
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	000186a0 	.word	0x000186a0
 8001f4c:	001e847f 	.word	0x001e847f
 8001f50:	003d08ff 	.word	0x003d08ff
 8001f54:	431bde83 	.word	0x431bde83
 8001f58:	10624dd3 	.word	0x10624dd3

08001f5c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b088      	sub	sp, #32
 8001f60:	af02      	add	r7, sp, #8
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	607a      	str	r2, [r7, #4]
 8001f66:	461a      	mov	r2, r3
 8001f68:	460b      	mov	r3, r1
 8001f6a:	817b      	strh	r3, [r7, #10]
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f70:	f7ff fb9e 	bl	80016b0 <HAL_GetTick>
 8001f74:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b20      	cmp	r3, #32
 8001f80:	f040 80e0 	bne.w	8002144 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	9300      	str	r3, [sp, #0]
 8001f88:	2319      	movs	r3, #25
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	4970      	ldr	r1, [pc, #448]	@ (8002150 <HAL_I2C_Master_Transmit+0x1f4>)
 8001f8e:	68f8      	ldr	r0, [r7, #12]
 8001f90:	f000 f964 	bl	800225c <I2C_WaitOnFlagUntilTimeout>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	e0d3      	b.n	8002146 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d101      	bne.n	8001fac <HAL_I2C_Master_Transmit+0x50>
 8001fa8:	2302      	movs	r3, #2
 8001faa:	e0cc      	b.n	8002146 <HAL_I2C_Master_Transmit+0x1ea>
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d007      	beq.n	8001fd2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f042 0201 	orr.w	r2, r2, #1
 8001fd0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001fe0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2221      	movs	r2, #33	@ 0x21
 8001fe6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2210      	movs	r2, #16
 8001fee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	893a      	ldrh	r2, [r7, #8]
 8002002:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002008:	b29a      	uxth	r2, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	4a50      	ldr	r2, [pc, #320]	@ (8002154 <HAL_I2C_Master_Transmit+0x1f8>)
 8002012:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002014:	8979      	ldrh	r1, [r7, #10]
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	6a3a      	ldr	r2, [r7, #32]
 800201a:	68f8      	ldr	r0, [r7, #12]
 800201c:	f000 f89c 	bl	8002158 <I2C_MasterRequestWrite>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e08d      	b.n	8002146 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800202a:	2300      	movs	r3, #0
 800202c:	613b      	str	r3, [r7, #16]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	695b      	ldr	r3, [r3, #20]
 8002034:	613b      	str	r3, [r7, #16]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	613b      	str	r3, [r7, #16]
 800203e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002040:	e066      	b.n	8002110 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002042:	697a      	ldr	r2, [r7, #20]
 8002044:	6a39      	ldr	r1, [r7, #32]
 8002046:	68f8      	ldr	r0, [r7, #12]
 8002048:	f000 fa22 	bl	8002490 <I2C_WaitOnTXEFlagUntilTimeout>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d00d      	beq.n	800206e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002056:	2b04      	cmp	r3, #4
 8002058:	d107      	bne.n	800206a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002068:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e06b      	b.n	8002146 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002072:	781a      	ldrb	r2, [r3, #0]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800207e:	1c5a      	adds	r2, r3, #1
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002088:	b29b      	uxth	r3, r3
 800208a:	3b01      	subs	r3, #1
 800208c:	b29a      	uxth	r2, r3
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002096:	3b01      	subs	r3, #1
 8002098:	b29a      	uxth	r2, r3
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	695b      	ldr	r3, [r3, #20]
 80020a4:	f003 0304 	and.w	r3, r3, #4
 80020a8:	2b04      	cmp	r3, #4
 80020aa:	d11b      	bne.n	80020e4 <HAL_I2C_Master_Transmit+0x188>
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d017      	beq.n	80020e4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b8:	781a      	ldrb	r2, [r3, #0]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020c4:	1c5a      	adds	r2, r3, #1
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	3b01      	subs	r3, #1
 80020d2:	b29a      	uxth	r2, r3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020dc:	3b01      	subs	r3, #1
 80020de:	b29a      	uxth	r2, r3
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020e4:	697a      	ldr	r2, [r7, #20]
 80020e6:	6a39      	ldr	r1, [r7, #32]
 80020e8:	68f8      	ldr	r0, [r7, #12]
 80020ea:	f000 fa19 	bl	8002520 <I2C_WaitOnBTFFlagUntilTimeout>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d00d      	beq.n	8002110 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f8:	2b04      	cmp	r3, #4
 80020fa:	d107      	bne.n	800210c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800210a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e01a      	b.n	8002146 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002114:	2b00      	cmp	r3, #0
 8002116:	d194      	bne.n	8002042 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002126:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2220      	movs	r2, #32
 800212c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2200      	movs	r2, #0
 8002134:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2200      	movs	r2, #0
 800213c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002140:	2300      	movs	r3, #0
 8002142:	e000      	b.n	8002146 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002144:	2302      	movs	r3, #2
  }
}
 8002146:	4618      	mov	r0, r3
 8002148:	3718      	adds	r7, #24
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	00100002 	.word	0x00100002
 8002154:	ffff0000 	.word	0xffff0000

08002158 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b088      	sub	sp, #32
 800215c:	af02      	add	r7, sp, #8
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	607a      	str	r2, [r7, #4]
 8002162:	603b      	str	r3, [r7, #0]
 8002164:	460b      	mov	r3, r1
 8002166:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800216c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	2b08      	cmp	r3, #8
 8002172:	d006      	beq.n	8002182 <I2C_MasterRequestWrite+0x2a>
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d003      	beq.n	8002182 <I2C_MasterRequestWrite+0x2a>
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002180:	d108      	bne.n	8002194 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	e00b      	b.n	80021ac <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002198:	2b12      	cmp	r3, #18
 800219a:	d107      	bne.n	80021ac <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80021aa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	9300      	str	r3, [sp, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80021b8:	68f8      	ldr	r0, [r7, #12]
 80021ba:	f000 f84f 	bl	800225c <I2C_WaitOnFlagUntilTimeout>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d00d      	beq.n	80021e0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80021d2:	d103      	bne.n	80021dc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021da:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e035      	b.n	800224c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	691b      	ldr	r3, [r3, #16]
 80021e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80021e8:	d108      	bne.n	80021fc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80021ea:	897b      	ldrh	r3, [r7, #10]
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	461a      	mov	r2, r3
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80021f8:	611a      	str	r2, [r3, #16]
 80021fa:	e01b      	b.n	8002234 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80021fc:	897b      	ldrh	r3, [r7, #10]
 80021fe:	11db      	asrs	r3, r3, #7
 8002200:	b2db      	uxtb	r3, r3
 8002202:	f003 0306 	and.w	r3, r3, #6
 8002206:	b2db      	uxtb	r3, r3
 8002208:	f063 030f 	orn	r3, r3, #15
 800220c:	b2da      	uxtb	r2, r3
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	490e      	ldr	r1, [pc, #56]	@ (8002254 <I2C_MasterRequestWrite+0xfc>)
 800221a:	68f8      	ldr	r0, [r7, #12]
 800221c:	f000 f898 	bl	8002350 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e010      	b.n	800224c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800222a:	897b      	ldrh	r3, [r7, #10]
 800222c:	b2da      	uxtb	r2, r3
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	4907      	ldr	r1, [pc, #28]	@ (8002258 <I2C_MasterRequestWrite+0x100>)
 800223a:	68f8      	ldr	r0, [r7, #12]
 800223c:	f000 f888 	bl	8002350 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e000      	b.n	800224c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800224a:	2300      	movs	r3, #0
}
 800224c:	4618      	mov	r0, r3
 800224e:	3718      	adds	r7, #24
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	00010008 	.word	0x00010008
 8002258:	00010002 	.word	0x00010002

0800225c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	603b      	str	r3, [r7, #0]
 8002268:	4613      	mov	r3, r2
 800226a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800226c:	e048      	b.n	8002300 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002274:	d044      	beq.n	8002300 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002276:	f7ff fa1b 	bl	80016b0 <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	683a      	ldr	r2, [r7, #0]
 8002282:	429a      	cmp	r2, r3
 8002284:	d302      	bcc.n	800228c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d139      	bne.n	8002300 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	0c1b      	lsrs	r3, r3, #16
 8002290:	b2db      	uxtb	r3, r3
 8002292:	2b01      	cmp	r3, #1
 8002294:	d10d      	bne.n	80022b2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	695b      	ldr	r3, [r3, #20]
 800229c:	43da      	mvns	r2, r3
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	4013      	ands	r3, r2
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	bf0c      	ite	eq
 80022a8:	2301      	moveq	r3, #1
 80022aa:	2300      	movne	r3, #0
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	461a      	mov	r2, r3
 80022b0:	e00c      	b.n	80022cc <I2C_WaitOnFlagUntilTimeout+0x70>
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	699b      	ldr	r3, [r3, #24]
 80022b8:	43da      	mvns	r2, r3
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	4013      	ands	r3, r2
 80022be:	b29b      	uxth	r3, r3
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	bf0c      	ite	eq
 80022c4:	2301      	moveq	r3, #1
 80022c6:	2300      	movne	r3, #0
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	461a      	mov	r2, r3
 80022cc:	79fb      	ldrb	r3, [r7, #7]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d116      	bne.n	8002300 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2200      	movs	r2, #0
 80022d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2220      	movs	r2, #32
 80022dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ec:	f043 0220 	orr.w	r2, r3, #32
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e023      	b.n	8002348 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	0c1b      	lsrs	r3, r3, #16
 8002304:	b2db      	uxtb	r3, r3
 8002306:	2b01      	cmp	r3, #1
 8002308:	d10d      	bne.n	8002326 <I2C_WaitOnFlagUntilTimeout+0xca>
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	695b      	ldr	r3, [r3, #20]
 8002310:	43da      	mvns	r2, r3
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	4013      	ands	r3, r2
 8002316:	b29b      	uxth	r3, r3
 8002318:	2b00      	cmp	r3, #0
 800231a:	bf0c      	ite	eq
 800231c:	2301      	moveq	r3, #1
 800231e:	2300      	movne	r3, #0
 8002320:	b2db      	uxtb	r3, r3
 8002322:	461a      	mov	r2, r3
 8002324:	e00c      	b.n	8002340 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	43da      	mvns	r2, r3
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	4013      	ands	r3, r2
 8002332:	b29b      	uxth	r3, r3
 8002334:	2b00      	cmp	r3, #0
 8002336:	bf0c      	ite	eq
 8002338:	2301      	moveq	r3, #1
 800233a:	2300      	movne	r3, #0
 800233c:	b2db      	uxtb	r3, r3
 800233e:	461a      	mov	r2, r3
 8002340:	79fb      	ldrb	r3, [r7, #7]
 8002342:	429a      	cmp	r2, r3
 8002344:	d093      	beq.n	800226e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002346:	2300      	movs	r3, #0
}
 8002348:	4618      	mov	r0, r3
 800234a:	3710      	adds	r7, #16
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
 800235c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800235e:	e071      	b.n	8002444 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800236a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800236e:	d123      	bne.n	80023b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800237e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002388:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2200      	movs	r2, #0
 800238e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2220      	movs	r2, #32
 8002394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a4:	f043 0204 	orr.w	r2, r3, #4
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e067      	b.n	8002488 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023be:	d041      	beq.n	8002444 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023c0:	f7ff f976 	bl	80016b0 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d302      	bcc.n	80023d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d136      	bne.n	8002444 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	0c1b      	lsrs	r3, r3, #16
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d10c      	bne.n	80023fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	695b      	ldr	r3, [r3, #20]
 80023e6:	43da      	mvns	r2, r3
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	4013      	ands	r3, r2
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	bf14      	ite	ne
 80023f2:	2301      	movne	r3, #1
 80023f4:	2300      	moveq	r3, #0
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	e00b      	b.n	8002412 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	43da      	mvns	r2, r3
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	4013      	ands	r3, r2
 8002406:	b29b      	uxth	r3, r3
 8002408:	2b00      	cmp	r3, #0
 800240a:	bf14      	ite	ne
 800240c:	2301      	movne	r3, #1
 800240e:	2300      	moveq	r3, #0
 8002410:	b2db      	uxtb	r3, r3
 8002412:	2b00      	cmp	r3, #0
 8002414:	d016      	beq.n	8002444 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2200      	movs	r2, #0
 800241a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2220      	movs	r2, #32
 8002420:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2200      	movs	r2, #0
 8002428:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002430:	f043 0220 	orr.w	r2, r3, #32
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e021      	b.n	8002488 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	0c1b      	lsrs	r3, r3, #16
 8002448:	b2db      	uxtb	r3, r3
 800244a:	2b01      	cmp	r3, #1
 800244c:	d10c      	bne.n	8002468 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	695b      	ldr	r3, [r3, #20]
 8002454:	43da      	mvns	r2, r3
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	4013      	ands	r3, r2
 800245a:	b29b      	uxth	r3, r3
 800245c:	2b00      	cmp	r3, #0
 800245e:	bf14      	ite	ne
 8002460:	2301      	movne	r3, #1
 8002462:	2300      	moveq	r3, #0
 8002464:	b2db      	uxtb	r3, r3
 8002466:	e00b      	b.n	8002480 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	43da      	mvns	r2, r3
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	4013      	ands	r3, r2
 8002474:	b29b      	uxth	r3, r3
 8002476:	2b00      	cmp	r3, #0
 8002478:	bf14      	ite	ne
 800247a:	2301      	movne	r3, #1
 800247c:	2300      	moveq	r3, #0
 800247e:	b2db      	uxtb	r3, r3
 8002480:	2b00      	cmp	r3, #0
 8002482:	f47f af6d 	bne.w	8002360 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002486:	2300      	movs	r3, #0
}
 8002488:	4618      	mov	r0, r3
 800248a:	3710      	adds	r7, #16
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800249c:	e034      	b.n	8002508 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	f000 f886 	bl	80025b0 <I2C_IsAcknowledgeFailed>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e034      	b.n	8002518 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024b4:	d028      	beq.n	8002508 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024b6:	f7ff f8fb 	bl	80016b0 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	68ba      	ldr	r2, [r7, #8]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d302      	bcc.n	80024cc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d11d      	bne.n	8002508 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	695b      	ldr	r3, [r3, #20]
 80024d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024d6:	2b80      	cmp	r3, #128	@ 0x80
 80024d8:	d016      	beq.n	8002508 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2200      	movs	r2, #0
 80024de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2220      	movs	r2, #32
 80024e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2200      	movs	r2, #0
 80024ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f4:	f043 0220 	orr.w	r2, r3, #32
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e007      	b.n	8002518 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	695b      	ldr	r3, [r3, #20]
 800250e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002512:	2b80      	cmp	r3, #128	@ 0x80
 8002514:	d1c3      	bne.n	800249e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002516:	2300      	movs	r3, #0
}
 8002518:	4618      	mov	r0, r3
 800251a:	3710      	adds	r7, #16
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800252c:	e034      	b.n	8002598 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800252e:	68f8      	ldr	r0, [r7, #12]
 8002530:	f000 f83e 	bl	80025b0 <I2C_IsAcknowledgeFailed>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e034      	b.n	80025a8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002544:	d028      	beq.n	8002598 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002546:	f7ff f8b3 	bl	80016b0 <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	68ba      	ldr	r2, [r7, #8]
 8002552:	429a      	cmp	r2, r3
 8002554:	d302      	bcc.n	800255c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d11d      	bne.n	8002598 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	f003 0304 	and.w	r3, r3, #4
 8002566:	2b04      	cmp	r3, #4
 8002568:	d016      	beq.n	8002598 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2200      	movs	r2, #0
 800256e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2220      	movs	r2, #32
 8002574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2200      	movs	r2, #0
 800257c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002584:	f043 0220 	orr.w	r2, r3, #32
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e007      	b.n	80025a8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	695b      	ldr	r3, [r3, #20]
 800259e:	f003 0304 	and.w	r3, r3, #4
 80025a2:	2b04      	cmp	r3, #4
 80025a4:	d1c3      	bne.n	800252e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80025a6:	2300      	movs	r3, #0
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3710      	adds	r7, #16
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025c6:	d11b      	bne.n	8002600 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80025d0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2220      	movs	r2, #32
 80025dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ec:	f043 0204 	orr.w	r2, r3, #4
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e000      	b.n	8002602 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	bc80      	pop	{r7}
 800260a:	4770      	bx	lr

0800260c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e272      	b.n	8002b04 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b00      	cmp	r3, #0
 8002628:	f000 8087 	beq.w	800273a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800262c:	4b92      	ldr	r3, [pc, #584]	@ (8002878 <HAL_RCC_OscConfig+0x26c>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f003 030c 	and.w	r3, r3, #12
 8002634:	2b04      	cmp	r3, #4
 8002636:	d00c      	beq.n	8002652 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002638:	4b8f      	ldr	r3, [pc, #572]	@ (8002878 <HAL_RCC_OscConfig+0x26c>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f003 030c 	and.w	r3, r3, #12
 8002640:	2b08      	cmp	r3, #8
 8002642:	d112      	bne.n	800266a <HAL_RCC_OscConfig+0x5e>
 8002644:	4b8c      	ldr	r3, [pc, #560]	@ (8002878 <HAL_RCC_OscConfig+0x26c>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800264c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002650:	d10b      	bne.n	800266a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002652:	4b89      	ldr	r3, [pc, #548]	@ (8002878 <HAL_RCC_OscConfig+0x26c>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d06c      	beq.n	8002738 <HAL_RCC_OscConfig+0x12c>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d168      	bne.n	8002738 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e24c      	b.n	8002b04 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002672:	d106      	bne.n	8002682 <HAL_RCC_OscConfig+0x76>
 8002674:	4b80      	ldr	r3, [pc, #512]	@ (8002878 <HAL_RCC_OscConfig+0x26c>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a7f      	ldr	r2, [pc, #508]	@ (8002878 <HAL_RCC_OscConfig+0x26c>)
 800267a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800267e:	6013      	str	r3, [r2, #0]
 8002680:	e02e      	b.n	80026e0 <HAL_RCC_OscConfig+0xd4>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d10c      	bne.n	80026a4 <HAL_RCC_OscConfig+0x98>
 800268a:	4b7b      	ldr	r3, [pc, #492]	@ (8002878 <HAL_RCC_OscConfig+0x26c>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a7a      	ldr	r2, [pc, #488]	@ (8002878 <HAL_RCC_OscConfig+0x26c>)
 8002690:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002694:	6013      	str	r3, [r2, #0]
 8002696:	4b78      	ldr	r3, [pc, #480]	@ (8002878 <HAL_RCC_OscConfig+0x26c>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a77      	ldr	r2, [pc, #476]	@ (8002878 <HAL_RCC_OscConfig+0x26c>)
 800269c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026a0:	6013      	str	r3, [r2, #0]
 80026a2:	e01d      	b.n	80026e0 <HAL_RCC_OscConfig+0xd4>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026ac:	d10c      	bne.n	80026c8 <HAL_RCC_OscConfig+0xbc>
 80026ae:	4b72      	ldr	r3, [pc, #456]	@ (8002878 <HAL_RCC_OscConfig+0x26c>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a71      	ldr	r2, [pc, #452]	@ (8002878 <HAL_RCC_OscConfig+0x26c>)
 80026b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026b8:	6013      	str	r3, [r2, #0]
 80026ba:	4b6f      	ldr	r3, [pc, #444]	@ (8002878 <HAL_RCC_OscConfig+0x26c>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a6e      	ldr	r2, [pc, #440]	@ (8002878 <HAL_RCC_OscConfig+0x26c>)
 80026c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026c4:	6013      	str	r3, [r2, #0]
 80026c6:	e00b      	b.n	80026e0 <HAL_RCC_OscConfig+0xd4>
 80026c8:	4b6b      	ldr	r3, [pc, #428]	@ (8002878 <HAL_RCC_OscConfig+0x26c>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a6a      	ldr	r2, [pc, #424]	@ (8002878 <HAL_RCC_OscConfig+0x26c>)
 80026ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026d2:	6013      	str	r3, [r2, #0]
 80026d4:	4b68      	ldr	r3, [pc, #416]	@ (8002878 <HAL_RCC_OscConfig+0x26c>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a67      	ldr	r2, [pc, #412]	@ (8002878 <HAL_RCC_OscConfig+0x26c>)
 80026da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026de:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d013      	beq.n	8002710 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e8:	f7fe ffe2 	bl	80016b0 <HAL_GetTick>
 80026ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ee:	e008      	b.n	8002702 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026f0:	f7fe ffde 	bl	80016b0 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b64      	cmp	r3, #100	@ 0x64
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e200      	b.n	8002b04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002702:	4b5d      	ldr	r3, [pc, #372]	@ (8002878 <HAL_RCC_OscConfig+0x26c>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d0f0      	beq.n	80026f0 <HAL_RCC_OscConfig+0xe4>
 800270e:	e014      	b.n	800273a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002710:	f7fe ffce 	bl	80016b0 <HAL_GetTick>
 8002714:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002716:	e008      	b.n	800272a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002718:	f7fe ffca 	bl	80016b0 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b64      	cmp	r3, #100	@ 0x64
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e1ec      	b.n	8002b04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800272a:	4b53      	ldr	r3, [pc, #332]	@ (8002878 <HAL_RCC_OscConfig+0x26c>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1f0      	bne.n	8002718 <HAL_RCC_OscConfig+0x10c>
 8002736:	e000      	b.n	800273a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002738:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d063      	beq.n	800280e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002746:	4b4c      	ldr	r3, [pc, #304]	@ (8002878 <HAL_RCC_OscConfig+0x26c>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f003 030c 	and.w	r3, r3, #12
 800274e:	2b00      	cmp	r3, #0
 8002750:	d00b      	beq.n	800276a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002752:	4b49      	ldr	r3, [pc, #292]	@ (8002878 <HAL_RCC_OscConfig+0x26c>)
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f003 030c 	and.w	r3, r3, #12
 800275a:	2b08      	cmp	r3, #8
 800275c:	d11c      	bne.n	8002798 <HAL_RCC_OscConfig+0x18c>
 800275e:	4b46      	ldr	r3, [pc, #280]	@ (8002878 <HAL_RCC_OscConfig+0x26c>)
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d116      	bne.n	8002798 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800276a:	4b43      	ldr	r3, [pc, #268]	@ (8002878 <HAL_RCC_OscConfig+0x26c>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d005      	beq.n	8002782 <HAL_RCC_OscConfig+0x176>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d001      	beq.n	8002782 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e1c0      	b.n	8002b04 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002782:	4b3d      	ldr	r3, [pc, #244]	@ (8002878 <HAL_RCC_OscConfig+0x26c>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	695b      	ldr	r3, [r3, #20]
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	4939      	ldr	r1, [pc, #228]	@ (8002878 <HAL_RCC_OscConfig+0x26c>)
 8002792:	4313      	orrs	r3, r2
 8002794:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002796:	e03a      	b.n	800280e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	691b      	ldr	r3, [r3, #16]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d020      	beq.n	80027e2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027a0:	4b36      	ldr	r3, [pc, #216]	@ (800287c <HAL_RCC_OscConfig+0x270>)
 80027a2:	2201      	movs	r2, #1
 80027a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a6:	f7fe ff83 	bl	80016b0 <HAL_GetTick>
 80027aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ac:	e008      	b.n	80027c0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027ae:	f7fe ff7f 	bl	80016b0 <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d901      	bls.n	80027c0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e1a1      	b.n	8002b04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027c0:	4b2d      	ldr	r3, [pc, #180]	@ (8002878 <HAL_RCC_OscConfig+0x26c>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0302 	and.w	r3, r3, #2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d0f0      	beq.n	80027ae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027cc:	4b2a      	ldr	r3, [pc, #168]	@ (8002878 <HAL_RCC_OscConfig+0x26c>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	695b      	ldr	r3, [r3, #20]
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	4927      	ldr	r1, [pc, #156]	@ (8002878 <HAL_RCC_OscConfig+0x26c>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	600b      	str	r3, [r1, #0]
 80027e0:	e015      	b.n	800280e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027e2:	4b26      	ldr	r3, [pc, #152]	@ (800287c <HAL_RCC_OscConfig+0x270>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e8:	f7fe ff62 	bl	80016b0 <HAL_GetTick>
 80027ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ee:	e008      	b.n	8002802 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027f0:	f7fe ff5e 	bl	80016b0 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e180      	b.n	8002b04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002802:	4b1d      	ldr	r3, [pc, #116]	@ (8002878 <HAL_RCC_OscConfig+0x26c>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d1f0      	bne.n	80027f0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0308 	and.w	r3, r3, #8
 8002816:	2b00      	cmp	r3, #0
 8002818:	d03a      	beq.n	8002890 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d019      	beq.n	8002856 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002822:	4b17      	ldr	r3, [pc, #92]	@ (8002880 <HAL_RCC_OscConfig+0x274>)
 8002824:	2201      	movs	r2, #1
 8002826:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002828:	f7fe ff42 	bl	80016b0 <HAL_GetTick>
 800282c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800282e:	e008      	b.n	8002842 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002830:	f7fe ff3e 	bl	80016b0 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e160      	b.n	8002b04 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002842:	4b0d      	ldr	r3, [pc, #52]	@ (8002878 <HAL_RCC_OscConfig+0x26c>)
 8002844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b00      	cmp	r3, #0
 800284c:	d0f0      	beq.n	8002830 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800284e:	2001      	movs	r0, #1
 8002850:	f000 face 	bl	8002df0 <RCC_Delay>
 8002854:	e01c      	b.n	8002890 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002856:	4b0a      	ldr	r3, [pc, #40]	@ (8002880 <HAL_RCC_OscConfig+0x274>)
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800285c:	f7fe ff28 	bl	80016b0 <HAL_GetTick>
 8002860:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002862:	e00f      	b.n	8002884 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002864:	f7fe ff24 	bl	80016b0 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b02      	cmp	r3, #2
 8002870:	d908      	bls.n	8002884 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e146      	b.n	8002b04 <HAL_RCC_OscConfig+0x4f8>
 8002876:	bf00      	nop
 8002878:	40021000 	.word	0x40021000
 800287c:	42420000 	.word	0x42420000
 8002880:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002884:	4b92      	ldr	r3, [pc, #584]	@ (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 8002886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002888:	f003 0302 	and.w	r3, r3, #2
 800288c:	2b00      	cmp	r3, #0
 800288e:	d1e9      	bne.n	8002864 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0304 	and.w	r3, r3, #4
 8002898:	2b00      	cmp	r3, #0
 800289a:	f000 80a6 	beq.w	80029ea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800289e:	2300      	movs	r3, #0
 80028a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028a2:	4b8b      	ldr	r3, [pc, #556]	@ (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 80028a4:	69db      	ldr	r3, [r3, #28]
 80028a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d10d      	bne.n	80028ca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028ae:	4b88      	ldr	r3, [pc, #544]	@ (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 80028b0:	69db      	ldr	r3, [r3, #28]
 80028b2:	4a87      	ldr	r2, [pc, #540]	@ (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 80028b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028b8:	61d3      	str	r3, [r2, #28]
 80028ba:	4b85      	ldr	r3, [pc, #532]	@ (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 80028bc:	69db      	ldr	r3, [r3, #28]
 80028be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028c2:	60bb      	str	r3, [r7, #8]
 80028c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028c6:	2301      	movs	r3, #1
 80028c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ca:	4b82      	ldr	r3, [pc, #520]	@ (8002ad4 <HAL_RCC_OscConfig+0x4c8>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d118      	bne.n	8002908 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028d6:	4b7f      	ldr	r3, [pc, #508]	@ (8002ad4 <HAL_RCC_OscConfig+0x4c8>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a7e      	ldr	r2, [pc, #504]	@ (8002ad4 <HAL_RCC_OscConfig+0x4c8>)
 80028dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028e2:	f7fe fee5 	bl	80016b0 <HAL_GetTick>
 80028e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e8:	e008      	b.n	80028fc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028ea:	f7fe fee1 	bl	80016b0 <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	2b64      	cmp	r3, #100	@ 0x64
 80028f6:	d901      	bls.n	80028fc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e103      	b.n	8002b04 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028fc:	4b75      	ldr	r3, [pc, #468]	@ (8002ad4 <HAL_RCC_OscConfig+0x4c8>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002904:	2b00      	cmp	r3, #0
 8002906:	d0f0      	beq.n	80028ea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	2b01      	cmp	r3, #1
 800290e:	d106      	bne.n	800291e <HAL_RCC_OscConfig+0x312>
 8002910:	4b6f      	ldr	r3, [pc, #444]	@ (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 8002912:	6a1b      	ldr	r3, [r3, #32]
 8002914:	4a6e      	ldr	r2, [pc, #440]	@ (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 8002916:	f043 0301 	orr.w	r3, r3, #1
 800291a:	6213      	str	r3, [r2, #32]
 800291c:	e02d      	b.n	800297a <HAL_RCC_OscConfig+0x36e>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d10c      	bne.n	8002940 <HAL_RCC_OscConfig+0x334>
 8002926:	4b6a      	ldr	r3, [pc, #424]	@ (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 8002928:	6a1b      	ldr	r3, [r3, #32]
 800292a:	4a69      	ldr	r2, [pc, #420]	@ (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 800292c:	f023 0301 	bic.w	r3, r3, #1
 8002930:	6213      	str	r3, [r2, #32]
 8002932:	4b67      	ldr	r3, [pc, #412]	@ (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 8002934:	6a1b      	ldr	r3, [r3, #32]
 8002936:	4a66      	ldr	r2, [pc, #408]	@ (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 8002938:	f023 0304 	bic.w	r3, r3, #4
 800293c:	6213      	str	r3, [r2, #32]
 800293e:	e01c      	b.n	800297a <HAL_RCC_OscConfig+0x36e>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	2b05      	cmp	r3, #5
 8002946:	d10c      	bne.n	8002962 <HAL_RCC_OscConfig+0x356>
 8002948:	4b61      	ldr	r3, [pc, #388]	@ (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 800294a:	6a1b      	ldr	r3, [r3, #32]
 800294c:	4a60      	ldr	r2, [pc, #384]	@ (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 800294e:	f043 0304 	orr.w	r3, r3, #4
 8002952:	6213      	str	r3, [r2, #32]
 8002954:	4b5e      	ldr	r3, [pc, #376]	@ (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 8002956:	6a1b      	ldr	r3, [r3, #32]
 8002958:	4a5d      	ldr	r2, [pc, #372]	@ (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 800295a:	f043 0301 	orr.w	r3, r3, #1
 800295e:	6213      	str	r3, [r2, #32]
 8002960:	e00b      	b.n	800297a <HAL_RCC_OscConfig+0x36e>
 8002962:	4b5b      	ldr	r3, [pc, #364]	@ (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 8002964:	6a1b      	ldr	r3, [r3, #32]
 8002966:	4a5a      	ldr	r2, [pc, #360]	@ (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 8002968:	f023 0301 	bic.w	r3, r3, #1
 800296c:	6213      	str	r3, [r2, #32]
 800296e:	4b58      	ldr	r3, [pc, #352]	@ (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 8002970:	6a1b      	ldr	r3, [r3, #32]
 8002972:	4a57      	ldr	r2, [pc, #348]	@ (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 8002974:	f023 0304 	bic.w	r3, r3, #4
 8002978:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d015      	beq.n	80029ae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002982:	f7fe fe95 	bl	80016b0 <HAL_GetTick>
 8002986:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002988:	e00a      	b.n	80029a0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800298a:	f7fe fe91 	bl	80016b0 <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002998:	4293      	cmp	r3, r2
 800299a:	d901      	bls.n	80029a0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e0b1      	b.n	8002b04 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029a0:	4b4b      	ldr	r3, [pc, #300]	@ (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 80029a2:	6a1b      	ldr	r3, [r3, #32]
 80029a4:	f003 0302 	and.w	r3, r3, #2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d0ee      	beq.n	800298a <HAL_RCC_OscConfig+0x37e>
 80029ac:	e014      	b.n	80029d8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ae:	f7fe fe7f 	bl	80016b0 <HAL_GetTick>
 80029b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029b4:	e00a      	b.n	80029cc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029b6:	f7fe fe7b 	bl	80016b0 <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d901      	bls.n	80029cc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e09b      	b.n	8002b04 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029cc:	4b40      	ldr	r3, [pc, #256]	@ (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 80029ce:	6a1b      	ldr	r3, [r3, #32]
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d1ee      	bne.n	80029b6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80029d8:	7dfb      	ldrb	r3, [r7, #23]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d105      	bne.n	80029ea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029de:	4b3c      	ldr	r3, [pc, #240]	@ (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 80029e0:	69db      	ldr	r3, [r3, #28]
 80029e2:	4a3b      	ldr	r2, [pc, #236]	@ (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 80029e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029e8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	69db      	ldr	r3, [r3, #28]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	f000 8087 	beq.w	8002b02 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029f4:	4b36      	ldr	r3, [pc, #216]	@ (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f003 030c 	and.w	r3, r3, #12
 80029fc:	2b08      	cmp	r3, #8
 80029fe:	d061      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	69db      	ldr	r3, [r3, #28]
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d146      	bne.n	8002a96 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a08:	4b33      	ldr	r3, [pc, #204]	@ (8002ad8 <HAL_RCC_OscConfig+0x4cc>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a0e:	f7fe fe4f 	bl	80016b0 <HAL_GetTick>
 8002a12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a14:	e008      	b.n	8002a28 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a16:	f7fe fe4b 	bl	80016b0 <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d901      	bls.n	8002a28 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e06d      	b.n	8002b04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a28:	4b29      	ldr	r3, [pc, #164]	@ (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d1f0      	bne.n	8002a16 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a1b      	ldr	r3, [r3, #32]
 8002a38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a3c:	d108      	bne.n	8002a50 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a3e:	4b24      	ldr	r3, [pc, #144]	@ (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	4921      	ldr	r1, [pc, #132]	@ (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a50:	4b1f      	ldr	r3, [pc, #124]	@ (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a19      	ldr	r1, [r3, #32]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a60:	430b      	orrs	r3, r1
 8002a62:	491b      	ldr	r1, [pc, #108]	@ (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a68:	4b1b      	ldr	r3, [pc, #108]	@ (8002ad8 <HAL_RCC_OscConfig+0x4cc>)
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a6e:	f7fe fe1f 	bl	80016b0 <HAL_GetTick>
 8002a72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a74:	e008      	b.n	8002a88 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a76:	f7fe fe1b 	bl	80016b0 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d901      	bls.n	8002a88 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e03d      	b.n	8002b04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a88:	4b11      	ldr	r3, [pc, #68]	@ (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d0f0      	beq.n	8002a76 <HAL_RCC_OscConfig+0x46a>
 8002a94:	e035      	b.n	8002b02 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a96:	4b10      	ldr	r3, [pc, #64]	@ (8002ad8 <HAL_RCC_OscConfig+0x4cc>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a9c:	f7fe fe08 	bl	80016b0 <HAL_GetTick>
 8002aa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aa4:	f7fe fe04 	bl	80016b0 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e026      	b.n	8002b04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ab6:	4b06      	ldr	r3, [pc, #24]	@ (8002ad0 <HAL_RCC_OscConfig+0x4c4>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1f0      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x498>
 8002ac2:	e01e      	b.n	8002b02 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	69db      	ldr	r3, [r3, #28]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d107      	bne.n	8002adc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e019      	b.n	8002b04 <HAL_RCC_OscConfig+0x4f8>
 8002ad0:	40021000 	.word	0x40021000
 8002ad4:	40007000 	.word	0x40007000
 8002ad8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002adc:	4b0b      	ldr	r3, [pc, #44]	@ (8002b0c <HAL_RCC_OscConfig+0x500>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a1b      	ldr	r3, [r3, #32]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d106      	bne.n	8002afe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d001      	beq.n	8002b02 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e000      	b.n	8002b04 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3718      	adds	r7, #24
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	40021000 	.word	0x40021000

08002b10 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d101      	bne.n	8002b24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e0d0      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b24:	4b6a      	ldr	r3, [pc, #424]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0307 	and.w	r3, r3, #7
 8002b2c:	683a      	ldr	r2, [r7, #0]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d910      	bls.n	8002b54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b32:	4b67      	ldr	r3, [pc, #412]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f023 0207 	bic.w	r2, r3, #7
 8002b3a:	4965      	ldr	r1, [pc, #404]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b42:	4b63      	ldr	r3, [pc, #396]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0307 	and.w	r3, r3, #7
 8002b4a:	683a      	ldr	r2, [r7, #0]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d001      	beq.n	8002b54 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e0b8      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d020      	beq.n	8002ba2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0304 	and.w	r3, r3, #4
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d005      	beq.n	8002b78 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b6c:	4b59      	ldr	r3, [pc, #356]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	4a58      	ldr	r2, [pc, #352]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b72:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002b76:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0308 	and.w	r3, r3, #8
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d005      	beq.n	8002b90 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b84:	4b53      	ldr	r3, [pc, #332]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	4a52      	ldr	r2, [pc, #328]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b8a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002b8e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b90:	4b50      	ldr	r3, [pc, #320]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	494d      	ldr	r1, [pc, #308]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d040      	beq.n	8002c30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d107      	bne.n	8002bc6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bb6:	4b47      	ldr	r3, [pc, #284]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d115      	bne.n	8002bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e07f      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d107      	bne.n	8002bde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bce:	4b41      	ldr	r3, [pc, #260]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d109      	bne.n	8002bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e073      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bde:	4b3d      	ldr	r3, [pc, #244]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e06b      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bee:	4b39      	ldr	r3, [pc, #228]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f023 0203 	bic.w	r2, r3, #3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	4936      	ldr	r1, [pc, #216]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c00:	f7fe fd56 	bl	80016b0 <HAL_GetTick>
 8002c04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c06:	e00a      	b.n	8002c1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c08:	f7fe fd52 	bl	80016b0 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e053      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c1e:	4b2d      	ldr	r3, [pc, #180]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f003 020c 	and.w	r2, r3, #12
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d1eb      	bne.n	8002c08 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c30:	4b27      	ldr	r3, [pc, #156]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0307 	and.w	r3, r3, #7
 8002c38:	683a      	ldr	r2, [r7, #0]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d210      	bcs.n	8002c60 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c3e:	4b24      	ldr	r3, [pc, #144]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f023 0207 	bic.w	r2, r3, #7
 8002c46:	4922      	ldr	r1, [pc, #136]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c4e:	4b20      	ldr	r3, [pc, #128]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0307 	and.w	r3, r3, #7
 8002c56:	683a      	ldr	r2, [r7, #0]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d001      	beq.n	8002c60 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e032      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0304 	and.w	r3, r3, #4
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d008      	beq.n	8002c7e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c6c:	4b19      	ldr	r3, [pc, #100]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	4916      	ldr	r1, [pc, #88]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0308 	and.w	r3, r3, #8
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d009      	beq.n	8002c9e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c8a:	4b12      	ldr	r3, [pc, #72]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	490e      	ldr	r1, [pc, #56]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c9e:	f000 f821 	bl	8002ce4 <HAL_RCC_GetSysClockFreq>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	091b      	lsrs	r3, r3, #4
 8002caa:	f003 030f 	and.w	r3, r3, #15
 8002cae:	490a      	ldr	r1, [pc, #40]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002cb0:	5ccb      	ldrb	r3, [r1, r3]
 8002cb2:	fa22 f303 	lsr.w	r3, r2, r3
 8002cb6:	4a09      	ldr	r2, [pc, #36]	@ (8002cdc <HAL_RCC_ClockConfig+0x1cc>)
 8002cb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002cba:	4b09      	ldr	r3, [pc, #36]	@ (8002ce0 <HAL_RCC_ClockConfig+0x1d0>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7fe fcb4 	bl	800162c <HAL_InitTick>

  return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	40022000 	.word	0x40022000
 8002cd4:	40021000 	.word	0x40021000
 8002cd8:	08004200 	.word	0x08004200
 8002cdc:	20000030 	.word	0x20000030
 8002ce0:	20000034 	.word	0x20000034

08002ce4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b087      	sub	sp, #28
 8002ce8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002cea:	2300      	movs	r3, #0
 8002cec:	60fb      	str	r3, [r7, #12]
 8002cee:	2300      	movs	r3, #0
 8002cf0:	60bb      	str	r3, [r7, #8]
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	617b      	str	r3, [r7, #20]
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002cfe:	4b1e      	ldr	r3, [pc, #120]	@ (8002d78 <HAL_RCC_GetSysClockFreq+0x94>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f003 030c 	and.w	r3, r3, #12
 8002d0a:	2b04      	cmp	r3, #4
 8002d0c:	d002      	beq.n	8002d14 <HAL_RCC_GetSysClockFreq+0x30>
 8002d0e:	2b08      	cmp	r3, #8
 8002d10:	d003      	beq.n	8002d1a <HAL_RCC_GetSysClockFreq+0x36>
 8002d12:	e027      	b.n	8002d64 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d14:	4b19      	ldr	r3, [pc, #100]	@ (8002d7c <HAL_RCC_GetSysClockFreq+0x98>)
 8002d16:	613b      	str	r3, [r7, #16]
      break;
 8002d18:	e027      	b.n	8002d6a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	0c9b      	lsrs	r3, r3, #18
 8002d1e:	f003 030f 	and.w	r3, r3, #15
 8002d22:	4a17      	ldr	r2, [pc, #92]	@ (8002d80 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002d24:	5cd3      	ldrb	r3, [r2, r3]
 8002d26:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d010      	beq.n	8002d54 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d32:	4b11      	ldr	r3, [pc, #68]	@ (8002d78 <HAL_RCC_GetSysClockFreq+0x94>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	0c5b      	lsrs	r3, r3, #17
 8002d38:	f003 0301 	and.w	r3, r3, #1
 8002d3c:	4a11      	ldr	r2, [pc, #68]	@ (8002d84 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002d3e:	5cd3      	ldrb	r3, [r2, r3]
 8002d40:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a0d      	ldr	r2, [pc, #52]	@ (8002d7c <HAL_RCC_GetSysClockFreq+0x98>)
 8002d46:	fb03 f202 	mul.w	r2, r3, r2
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d50:	617b      	str	r3, [r7, #20]
 8002d52:	e004      	b.n	8002d5e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	4a0c      	ldr	r2, [pc, #48]	@ (8002d88 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002d58:	fb02 f303 	mul.w	r3, r2, r3
 8002d5c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	613b      	str	r3, [r7, #16]
      break;
 8002d62:	e002      	b.n	8002d6a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d64:	4b05      	ldr	r3, [pc, #20]	@ (8002d7c <HAL_RCC_GetSysClockFreq+0x98>)
 8002d66:	613b      	str	r3, [r7, #16]
      break;
 8002d68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d6a:	693b      	ldr	r3, [r7, #16]
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	371c      	adds	r7, #28
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bc80      	pop	{r7}
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	40021000 	.word	0x40021000
 8002d7c:	007a1200 	.word	0x007a1200
 8002d80:	08004218 	.word	0x08004218
 8002d84:	08004228 	.word	0x08004228
 8002d88:	003d0900 	.word	0x003d0900

08002d8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d90:	4b02      	ldr	r3, [pc, #8]	@ (8002d9c <HAL_RCC_GetHCLKFreq+0x10>)
 8002d92:	681b      	ldr	r3, [r3, #0]
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bc80      	pop	{r7}
 8002d9a:	4770      	bx	lr
 8002d9c:	20000030 	.word	0x20000030

08002da0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002da4:	f7ff fff2 	bl	8002d8c <HAL_RCC_GetHCLKFreq>
 8002da8:	4602      	mov	r2, r0
 8002daa:	4b05      	ldr	r3, [pc, #20]	@ (8002dc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	0a1b      	lsrs	r3, r3, #8
 8002db0:	f003 0307 	and.w	r3, r3, #7
 8002db4:	4903      	ldr	r1, [pc, #12]	@ (8002dc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002db6:	5ccb      	ldrb	r3, [r1, r3]
 8002db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	40021000 	.word	0x40021000
 8002dc4:	08004210 	.word	0x08004210

08002dc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002dcc:	f7ff ffde 	bl	8002d8c <HAL_RCC_GetHCLKFreq>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	4b05      	ldr	r3, [pc, #20]	@ (8002de8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	0adb      	lsrs	r3, r3, #11
 8002dd8:	f003 0307 	and.w	r3, r3, #7
 8002ddc:	4903      	ldr	r1, [pc, #12]	@ (8002dec <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dde:	5ccb      	ldrb	r3, [r1, r3]
 8002de0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	40021000 	.word	0x40021000
 8002dec:	08004210 	.word	0x08004210

08002df0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b085      	sub	sp, #20
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002df8:	4b0a      	ldr	r3, [pc, #40]	@ (8002e24 <RCC_Delay+0x34>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a0a      	ldr	r2, [pc, #40]	@ (8002e28 <RCC_Delay+0x38>)
 8002dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002e02:	0a5b      	lsrs	r3, r3, #9
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	fb02 f303 	mul.w	r3, r2, r3
 8002e0a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e0c:	bf00      	nop
  }
  while (Delay --);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	1e5a      	subs	r2, r3, #1
 8002e12:	60fa      	str	r2, [r7, #12]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d1f9      	bne.n	8002e0c <RCC_Delay+0x1c>
}
 8002e18:	bf00      	nop
 8002e1a:	bf00      	nop
 8002e1c:	3714      	adds	r7, #20
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bc80      	pop	{r7}
 8002e22:	4770      	bx	lr
 8002e24:	20000030 	.word	0x20000030
 8002e28:	10624dd3 	.word	0x10624dd3

08002e2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d101      	bne.n	8002e3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e041      	b.n	8002ec2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d106      	bne.n	8002e58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f7fe fa1c 	bl	8001290 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2202      	movs	r2, #2
 8002e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	3304      	adds	r3, #4
 8002e68:	4619      	mov	r1, r3
 8002e6a:	4610      	mov	r0, r2
 8002e6c:	f000 fa5c 	bl	8003328 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
	...

08002ecc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d001      	beq.n	8002ee4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e03a      	b.n	8002f5a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2202      	movs	r2, #2
 8002ee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	68da      	ldr	r2, [r3, #12]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f042 0201 	orr.w	r2, r2, #1
 8002efa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a18      	ldr	r2, [pc, #96]	@ (8002f64 <HAL_TIM_Base_Start_IT+0x98>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d00e      	beq.n	8002f24 <HAL_TIM_Base_Start_IT+0x58>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f0e:	d009      	beq.n	8002f24 <HAL_TIM_Base_Start_IT+0x58>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a14      	ldr	r2, [pc, #80]	@ (8002f68 <HAL_TIM_Base_Start_IT+0x9c>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d004      	beq.n	8002f24 <HAL_TIM_Base_Start_IT+0x58>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a13      	ldr	r2, [pc, #76]	@ (8002f6c <HAL_TIM_Base_Start_IT+0xa0>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d111      	bne.n	8002f48 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f003 0307 	and.w	r3, r3, #7
 8002f2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2b06      	cmp	r3, #6
 8002f34:	d010      	beq.n	8002f58 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f042 0201 	orr.w	r2, r2, #1
 8002f44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f46:	e007      	b.n	8002f58 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f042 0201 	orr.w	r2, r2, #1
 8002f56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3714      	adds	r7, #20
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bc80      	pop	{r7}
 8002f62:	4770      	bx	lr
 8002f64:	40012c00 	.word	0x40012c00
 8002f68:	40000400 	.word	0x40000400
 8002f6c:	40000800 	.word	0x40000800

08002f70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d020      	beq.n	8002fd4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f003 0302 	and.w	r3, r3, #2
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d01b      	beq.n	8002fd4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f06f 0202 	mvn.w	r2, #2
 8002fa4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	f003 0303 	and.w	r3, r3, #3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d003      	beq.n	8002fc2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 f998 	bl	80032f0 <HAL_TIM_IC_CaptureCallback>
 8002fc0:	e005      	b.n	8002fce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f000 f98b 	bl	80032de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f000 f99a 	bl	8003302 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	f003 0304 	and.w	r3, r3, #4
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d020      	beq.n	8003020 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f003 0304 	and.w	r3, r3, #4
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d01b      	beq.n	8003020 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f06f 0204 	mvn.w	r2, #4
 8002ff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2202      	movs	r2, #2
 8002ff6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003002:	2b00      	cmp	r3, #0
 8003004:	d003      	beq.n	800300e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 f972 	bl	80032f0 <HAL_TIM_IC_CaptureCallback>
 800300c:	e005      	b.n	800301a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 f965 	bl	80032de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f000 f974 	bl	8003302 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	f003 0308 	and.w	r3, r3, #8
 8003026:	2b00      	cmp	r3, #0
 8003028:	d020      	beq.n	800306c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f003 0308 	and.w	r3, r3, #8
 8003030:	2b00      	cmp	r3, #0
 8003032:	d01b      	beq.n	800306c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f06f 0208 	mvn.w	r2, #8
 800303c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2204      	movs	r2, #4
 8003042:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	69db      	ldr	r3, [r3, #28]
 800304a:	f003 0303 	and.w	r3, r3, #3
 800304e:	2b00      	cmp	r3, #0
 8003050:	d003      	beq.n	800305a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 f94c 	bl	80032f0 <HAL_TIM_IC_CaptureCallback>
 8003058:	e005      	b.n	8003066 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 f93f 	bl	80032de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f000 f94e 	bl	8003302 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	f003 0310 	and.w	r3, r3, #16
 8003072:	2b00      	cmp	r3, #0
 8003074:	d020      	beq.n	80030b8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f003 0310 	and.w	r3, r3, #16
 800307c:	2b00      	cmp	r3, #0
 800307e:	d01b      	beq.n	80030b8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f06f 0210 	mvn.w	r2, #16
 8003088:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2208      	movs	r2, #8
 800308e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	69db      	ldr	r3, [r3, #28]
 8003096:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800309a:	2b00      	cmp	r3, #0
 800309c:	d003      	beq.n	80030a6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 f926 	bl	80032f0 <HAL_TIM_IC_CaptureCallback>
 80030a4:	e005      	b.n	80030b2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 f919 	bl	80032de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 f928 	bl	8003302 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d00c      	beq.n	80030dc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f003 0301 	and.w	r3, r3, #1
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d007      	beq.n	80030dc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f06f 0201 	mvn.w	r2, #1
 80030d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f7fe f846 	bl	8001168 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00c      	beq.n	8003100 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d007      	beq.n	8003100 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80030f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 fa7f 	bl	80035fe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00c      	beq.n	8003124 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003110:	2b00      	cmp	r3, #0
 8003112:	d007      	beq.n	8003124 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800311c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 f8f8 	bl	8003314 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	f003 0320 	and.w	r3, r3, #32
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00c      	beq.n	8003148 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f003 0320 	and.w	r3, r3, #32
 8003134:	2b00      	cmp	r3, #0
 8003136:	d007      	beq.n	8003148 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f06f 0220 	mvn.w	r2, #32
 8003140:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 fa52 	bl	80035ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003148:	bf00      	nop
 800314a:	3710      	adds	r7, #16
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800315a:	2300      	movs	r3, #0
 800315c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003164:	2b01      	cmp	r3, #1
 8003166:	d101      	bne.n	800316c <HAL_TIM_ConfigClockSource+0x1c>
 8003168:	2302      	movs	r3, #2
 800316a:	e0b4      	b.n	80032d6 <HAL_TIM_ConfigClockSource+0x186>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2202      	movs	r2, #2
 8003178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800318a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003192:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68ba      	ldr	r2, [r7, #8]
 800319a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031a4:	d03e      	beq.n	8003224 <HAL_TIM_ConfigClockSource+0xd4>
 80031a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031aa:	f200 8087 	bhi.w	80032bc <HAL_TIM_ConfigClockSource+0x16c>
 80031ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031b2:	f000 8086 	beq.w	80032c2 <HAL_TIM_ConfigClockSource+0x172>
 80031b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031ba:	d87f      	bhi.n	80032bc <HAL_TIM_ConfigClockSource+0x16c>
 80031bc:	2b70      	cmp	r3, #112	@ 0x70
 80031be:	d01a      	beq.n	80031f6 <HAL_TIM_ConfigClockSource+0xa6>
 80031c0:	2b70      	cmp	r3, #112	@ 0x70
 80031c2:	d87b      	bhi.n	80032bc <HAL_TIM_ConfigClockSource+0x16c>
 80031c4:	2b60      	cmp	r3, #96	@ 0x60
 80031c6:	d050      	beq.n	800326a <HAL_TIM_ConfigClockSource+0x11a>
 80031c8:	2b60      	cmp	r3, #96	@ 0x60
 80031ca:	d877      	bhi.n	80032bc <HAL_TIM_ConfigClockSource+0x16c>
 80031cc:	2b50      	cmp	r3, #80	@ 0x50
 80031ce:	d03c      	beq.n	800324a <HAL_TIM_ConfigClockSource+0xfa>
 80031d0:	2b50      	cmp	r3, #80	@ 0x50
 80031d2:	d873      	bhi.n	80032bc <HAL_TIM_ConfigClockSource+0x16c>
 80031d4:	2b40      	cmp	r3, #64	@ 0x40
 80031d6:	d058      	beq.n	800328a <HAL_TIM_ConfigClockSource+0x13a>
 80031d8:	2b40      	cmp	r3, #64	@ 0x40
 80031da:	d86f      	bhi.n	80032bc <HAL_TIM_ConfigClockSource+0x16c>
 80031dc:	2b30      	cmp	r3, #48	@ 0x30
 80031de:	d064      	beq.n	80032aa <HAL_TIM_ConfigClockSource+0x15a>
 80031e0:	2b30      	cmp	r3, #48	@ 0x30
 80031e2:	d86b      	bhi.n	80032bc <HAL_TIM_ConfigClockSource+0x16c>
 80031e4:	2b20      	cmp	r3, #32
 80031e6:	d060      	beq.n	80032aa <HAL_TIM_ConfigClockSource+0x15a>
 80031e8:	2b20      	cmp	r3, #32
 80031ea:	d867      	bhi.n	80032bc <HAL_TIM_ConfigClockSource+0x16c>
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d05c      	beq.n	80032aa <HAL_TIM_ConfigClockSource+0x15a>
 80031f0:	2b10      	cmp	r3, #16
 80031f2:	d05a      	beq.n	80032aa <HAL_TIM_ConfigClockSource+0x15a>
 80031f4:	e062      	b.n	80032bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003206:	f000 f974 	bl	80034f2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003218:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68ba      	ldr	r2, [r7, #8]
 8003220:	609a      	str	r2, [r3, #8]
      break;
 8003222:	e04f      	b.n	80032c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003234:	f000 f95d 	bl	80034f2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	689a      	ldr	r2, [r3, #8]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003246:	609a      	str	r2, [r3, #8]
      break;
 8003248:	e03c      	b.n	80032c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003256:	461a      	mov	r2, r3
 8003258:	f000 f8d4 	bl	8003404 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2150      	movs	r1, #80	@ 0x50
 8003262:	4618      	mov	r0, r3
 8003264:	f000 f92b 	bl	80034be <TIM_ITRx_SetConfig>
      break;
 8003268:	e02c      	b.n	80032c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003276:	461a      	mov	r2, r3
 8003278:	f000 f8f2 	bl	8003460 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2160      	movs	r1, #96	@ 0x60
 8003282:	4618      	mov	r0, r3
 8003284:	f000 f91b 	bl	80034be <TIM_ITRx_SetConfig>
      break;
 8003288:	e01c      	b.n	80032c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003296:	461a      	mov	r2, r3
 8003298:	f000 f8b4 	bl	8003404 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2140      	movs	r1, #64	@ 0x40
 80032a2:	4618      	mov	r0, r3
 80032a4:	f000 f90b 	bl	80034be <TIM_ITRx_SetConfig>
      break;
 80032a8:	e00c      	b.n	80032c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4619      	mov	r1, r3
 80032b4:	4610      	mov	r0, r2
 80032b6:	f000 f902 	bl	80034be <TIM_ITRx_SetConfig>
      break;
 80032ba:	e003      	b.n	80032c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	73fb      	strb	r3, [r7, #15]
      break;
 80032c0:	e000      	b.n	80032c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80032c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80032d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3710      	adds	r7, #16
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}

080032de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032de:	b480      	push	{r7}
 80032e0:	b083      	sub	sp, #12
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032e6:	bf00      	nop
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bc80      	pop	{r7}
 80032ee:	4770      	bx	lr

080032f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80032f8:	bf00      	nop
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bc80      	pop	{r7}
 8003300:	4770      	bx	lr

08003302 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003302:	b480      	push	{r7}
 8003304:	b083      	sub	sp, #12
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800330a:	bf00      	nop
 800330c:	370c      	adds	r7, #12
 800330e:	46bd      	mov	sp, r7
 8003310:	bc80      	pop	{r7}
 8003312:	4770      	bx	lr

08003314 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800331c:	bf00      	nop
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	bc80      	pop	{r7}
 8003324:	4770      	bx	lr
	...

08003328 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003328:	b480      	push	{r7}
 800332a:	b085      	sub	sp, #20
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a2f      	ldr	r2, [pc, #188]	@ (80033f8 <TIM_Base_SetConfig+0xd0>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d00b      	beq.n	8003358 <TIM_Base_SetConfig+0x30>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003346:	d007      	beq.n	8003358 <TIM_Base_SetConfig+0x30>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a2c      	ldr	r2, [pc, #176]	@ (80033fc <TIM_Base_SetConfig+0xd4>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d003      	beq.n	8003358 <TIM_Base_SetConfig+0x30>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a2b      	ldr	r2, [pc, #172]	@ (8003400 <TIM_Base_SetConfig+0xd8>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d108      	bne.n	800336a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800335e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	4313      	orrs	r3, r2
 8003368:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a22      	ldr	r2, [pc, #136]	@ (80033f8 <TIM_Base_SetConfig+0xd0>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d00b      	beq.n	800338a <TIM_Base_SetConfig+0x62>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003378:	d007      	beq.n	800338a <TIM_Base_SetConfig+0x62>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a1f      	ldr	r2, [pc, #124]	@ (80033fc <TIM_Base_SetConfig+0xd4>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d003      	beq.n	800338a <TIM_Base_SetConfig+0x62>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a1e      	ldr	r2, [pc, #120]	@ (8003400 <TIM_Base_SetConfig+0xd8>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d108      	bne.n	800339c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003390:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	4313      	orrs	r3, r2
 800339a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	68fa      	ldr	r2, [r7, #12]
 80033ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	689a      	ldr	r2, [r3, #8]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a0d      	ldr	r2, [pc, #52]	@ (80033f8 <TIM_Base_SetConfig+0xd0>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d103      	bne.n	80033d0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	691a      	ldr	r2, [r3, #16]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	f003 0301 	and.w	r3, r3, #1
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d005      	beq.n	80033ee <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	f023 0201 	bic.w	r2, r3, #1
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	611a      	str	r2, [r3, #16]
  }
}
 80033ee:	bf00      	nop
 80033f0:	3714      	adds	r7, #20
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bc80      	pop	{r7}
 80033f6:	4770      	bx	lr
 80033f8:	40012c00 	.word	0x40012c00
 80033fc:	40000400 	.word	0x40000400
 8003400:	40000800 	.word	0x40000800

08003404 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003404:	b480      	push	{r7}
 8003406:	b087      	sub	sp, #28
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6a1b      	ldr	r3, [r3, #32]
 8003414:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6a1b      	ldr	r3, [r3, #32]
 800341a:	f023 0201 	bic.w	r2, r3, #1
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	699b      	ldr	r3, [r3, #24]
 8003426:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800342e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	011b      	lsls	r3, r3, #4
 8003434:	693a      	ldr	r2, [r7, #16]
 8003436:	4313      	orrs	r3, r2
 8003438:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	f023 030a 	bic.w	r3, r3, #10
 8003440:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003442:	697a      	ldr	r2, [r7, #20]
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	4313      	orrs	r3, r2
 8003448:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	693a      	ldr	r2, [r7, #16]
 800344e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	697a      	ldr	r2, [r7, #20]
 8003454:	621a      	str	r2, [r3, #32]
}
 8003456:	bf00      	nop
 8003458:	371c      	adds	r7, #28
 800345a:	46bd      	mov	sp, r7
 800345c:	bc80      	pop	{r7}
 800345e:	4770      	bx	lr

08003460 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003460:	b480      	push	{r7}
 8003462:	b087      	sub	sp, #28
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6a1b      	ldr	r3, [r3, #32]
 8003470:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6a1b      	ldr	r3, [r3, #32]
 8003476:	f023 0210 	bic.w	r2, r3, #16
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	699b      	ldr	r3, [r3, #24]
 8003482:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800348a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	031b      	lsls	r3, r3, #12
 8003490:	693a      	ldr	r2, [r7, #16]
 8003492:	4313      	orrs	r3, r2
 8003494:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800349c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	011b      	lsls	r3, r3, #4
 80034a2:	697a      	ldr	r2, [r7, #20]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	697a      	ldr	r2, [r7, #20]
 80034b2:	621a      	str	r2, [r3, #32]
}
 80034b4:	bf00      	nop
 80034b6:	371c      	adds	r7, #28
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bc80      	pop	{r7}
 80034bc:	4770      	bx	lr

080034be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034be:	b480      	push	{r7}
 80034c0:	b085      	sub	sp, #20
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
 80034c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034d6:	683a      	ldr	r2, [r7, #0]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	4313      	orrs	r3, r2
 80034dc:	f043 0307 	orr.w	r3, r3, #7
 80034e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	68fa      	ldr	r2, [r7, #12]
 80034e6:	609a      	str	r2, [r3, #8]
}
 80034e8:	bf00      	nop
 80034ea:	3714      	adds	r7, #20
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bc80      	pop	{r7}
 80034f0:	4770      	bx	lr

080034f2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034f2:	b480      	push	{r7}
 80034f4:	b087      	sub	sp, #28
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	60f8      	str	r0, [r7, #12]
 80034fa:	60b9      	str	r1, [r7, #8]
 80034fc:	607a      	str	r2, [r7, #4]
 80034fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800350c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	021a      	lsls	r2, r3, #8
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	431a      	orrs	r2, r3
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	4313      	orrs	r3, r2
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	4313      	orrs	r3, r2
 800351e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	697a      	ldr	r2, [r7, #20]
 8003524:	609a      	str	r2, [r3, #8]
}
 8003526:	bf00      	nop
 8003528:	371c      	adds	r7, #28
 800352a:	46bd      	mov	sp, r7
 800352c:	bc80      	pop	{r7}
 800352e:	4770      	bx	lr

08003530 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003530:	b480      	push	{r7}
 8003532:	b085      	sub	sp, #20
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003540:	2b01      	cmp	r3, #1
 8003542:	d101      	bne.n	8003548 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003544:	2302      	movs	r3, #2
 8003546:	e046      	b.n	80035d6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2202      	movs	r2, #2
 8003554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800356e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	68fa      	ldr	r2, [r7, #12]
 8003576:	4313      	orrs	r3, r2
 8003578:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68fa      	ldr	r2, [r7, #12]
 8003580:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a16      	ldr	r2, [pc, #88]	@ (80035e0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d00e      	beq.n	80035aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003594:	d009      	beq.n	80035aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a12      	ldr	r2, [pc, #72]	@ (80035e4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d004      	beq.n	80035aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a10      	ldr	r2, [pc, #64]	@ (80035e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d10c      	bne.n	80035c4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80035b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	68ba      	ldr	r2, [r7, #8]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68ba      	ldr	r2, [r7, #8]
 80035c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3714      	adds	r7, #20
 80035da:	46bd      	mov	sp, r7
 80035dc:	bc80      	pop	{r7}
 80035de:	4770      	bx	lr
 80035e0:	40012c00 	.word	0x40012c00
 80035e4:	40000400 	.word	0x40000400
 80035e8:	40000800 	.word	0x40000800

080035ec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bc80      	pop	{r7}
 80035fc:	4770      	bx	lr

080035fe <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80035fe:	b480      	push	{r7}
 8003600:	b083      	sub	sp, #12
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003606:	bf00      	nop
 8003608:	370c      	adds	r7, #12
 800360a:	46bd      	mov	sp, r7
 800360c:	bc80      	pop	{r7}
 800360e:	4770      	bx	lr

08003610 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d101      	bne.n	8003622 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e042      	b.n	80036a8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003628:	b2db      	uxtb	r3, r3
 800362a:	2b00      	cmp	r3, #0
 800362c:	d106      	bne.n	800363c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f7fd fe4e 	bl	80012d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2224      	movs	r2, #36	@ 0x24
 8003640:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68da      	ldr	r2, [r3, #12]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003652:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f000 f82b 	bl	80036b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	691a      	ldr	r2, [r3, #16]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003668:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	695a      	ldr	r2, [r3, #20]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003678:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68da      	ldr	r2, [r3, #12]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003688:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2220      	movs	r2, #32
 8003694:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2220      	movs	r2, #32
 800369c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80036a6:	2300      	movs	r3, #0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3708      	adds	r7, #8
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68da      	ldr	r2, [r3, #12]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	430a      	orrs	r2, r1
 80036cc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	689a      	ldr	r2, [r3, #8]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	431a      	orrs	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	695b      	ldr	r3, [r3, #20]
 80036dc:	4313      	orrs	r3, r2
 80036de:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80036ea:	f023 030c 	bic.w	r3, r3, #12
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	6812      	ldr	r2, [r2, #0]
 80036f2:	68b9      	ldr	r1, [r7, #8]
 80036f4:	430b      	orrs	r3, r1
 80036f6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	699a      	ldr	r2, [r3, #24]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	430a      	orrs	r2, r1
 800370c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a2c      	ldr	r2, [pc, #176]	@ (80037c4 <UART_SetConfig+0x114>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d103      	bne.n	8003720 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003718:	f7ff fb56 	bl	8002dc8 <HAL_RCC_GetPCLK2Freq>
 800371c:	60f8      	str	r0, [r7, #12]
 800371e:	e002      	b.n	8003726 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003720:	f7ff fb3e 	bl	8002da0 <HAL_RCC_GetPCLK1Freq>
 8003724:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003726:	68fa      	ldr	r2, [r7, #12]
 8003728:	4613      	mov	r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	4413      	add	r3, r2
 800372e:	009a      	lsls	r2, r3, #2
 8003730:	441a      	add	r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	fbb2 f3f3 	udiv	r3, r2, r3
 800373c:	4a22      	ldr	r2, [pc, #136]	@ (80037c8 <UART_SetConfig+0x118>)
 800373e:	fba2 2303 	umull	r2, r3, r2, r3
 8003742:	095b      	lsrs	r3, r3, #5
 8003744:	0119      	lsls	r1, r3, #4
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	4613      	mov	r3, r2
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	4413      	add	r3, r2
 800374e:	009a      	lsls	r2, r3, #2
 8003750:	441a      	add	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	fbb2 f2f3 	udiv	r2, r2, r3
 800375c:	4b1a      	ldr	r3, [pc, #104]	@ (80037c8 <UART_SetConfig+0x118>)
 800375e:	fba3 0302 	umull	r0, r3, r3, r2
 8003762:	095b      	lsrs	r3, r3, #5
 8003764:	2064      	movs	r0, #100	@ 0x64
 8003766:	fb00 f303 	mul.w	r3, r0, r3
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	011b      	lsls	r3, r3, #4
 800376e:	3332      	adds	r3, #50	@ 0x32
 8003770:	4a15      	ldr	r2, [pc, #84]	@ (80037c8 <UART_SetConfig+0x118>)
 8003772:	fba2 2303 	umull	r2, r3, r2, r3
 8003776:	095b      	lsrs	r3, r3, #5
 8003778:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800377c:	4419      	add	r1, r3
 800377e:	68fa      	ldr	r2, [r7, #12]
 8003780:	4613      	mov	r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	4413      	add	r3, r2
 8003786:	009a      	lsls	r2, r3, #2
 8003788:	441a      	add	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	fbb2 f2f3 	udiv	r2, r2, r3
 8003794:	4b0c      	ldr	r3, [pc, #48]	@ (80037c8 <UART_SetConfig+0x118>)
 8003796:	fba3 0302 	umull	r0, r3, r3, r2
 800379a:	095b      	lsrs	r3, r3, #5
 800379c:	2064      	movs	r0, #100	@ 0x64
 800379e:	fb00 f303 	mul.w	r3, r0, r3
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	011b      	lsls	r3, r3, #4
 80037a6:	3332      	adds	r3, #50	@ 0x32
 80037a8:	4a07      	ldr	r2, [pc, #28]	@ (80037c8 <UART_SetConfig+0x118>)
 80037aa:	fba2 2303 	umull	r2, r3, r2, r3
 80037ae:	095b      	lsrs	r3, r3, #5
 80037b0:	f003 020f 	and.w	r2, r3, #15
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	440a      	add	r2, r1
 80037ba:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80037bc:	bf00      	nop
 80037be:	3710      	adds	r7, #16
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	40013800 	.word	0x40013800
 80037c8:	51eb851f 	.word	0x51eb851f

080037cc <siprintf>:
 80037cc:	b40e      	push	{r1, r2, r3}
 80037ce:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80037d2:	b500      	push	{lr}
 80037d4:	b09c      	sub	sp, #112	@ 0x70
 80037d6:	ab1d      	add	r3, sp, #116	@ 0x74
 80037d8:	9002      	str	r0, [sp, #8]
 80037da:	9006      	str	r0, [sp, #24]
 80037dc:	9107      	str	r1, [sp, #28]
 80037de:	9104      	str	r1, [sp, #16]
 80037e0:	4808      	ldr	r0, [pc, #32]	@ (8003804 <siprintf+0x38>)
 80037e2:	4909      	ldr	r1, [pc, #36]	@ (8003808 <siprintf+0x3c>)
 80037e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80037e8:	9105      	str	r1, [sp, #20]
 80037ea:	6800      	ldr	r0, [r0, #0]
 80037ec:	a902      	add	r1, sp, #8
 80037ee:	9301      	str	r3, [sp, #4]
 80037f0:	f000 f992 	bl	8003b18 <_svfiprintf_r>
 80037f4:	2200      	movs	r2, #0
 80037f6:	9b02      	ldr	r3, [sp, #8]
 80037f8:	701a      	strb	r2, [r3, #0]
 80037fa:	b01c      	add	sp, #112	@ 0x70
 80037fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8003800:	b003      	add	sp, #12
 8003802:	4770      	bx	lr
 8003804:	2000003c 	.word	0x2000003c
 8003808:	ffff0208 	.word	0xffff0208

0800380c <memset>:
 800380c:	4603      	mov	r3, r0
 800380e:	4402      	add	r2, r0
 8003810:	4293      	cmp	r3, r2
 8003812:	d100      	bne.n	8003816 <memset+0xa>
 8003814:	4770      	bx	lr
 8003816:	f803 1b01 	strb.w	r1, [r3], #1
 800381a:	e7f9      	b.n	8003810 <memset+0x4>

0800381c <__errno>:
 800381c:	4b01      	ldr	r3, [pc, #4]	@ (8003824 <__errno+0x8>)
 800381e:	6818      	ldr	r0, [r3, #0]
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	2000003c 	.word	0x2000003c

08003828 <__libc_init_array>:
 8003828:	b570      	push	{r4, r5, r6, lr}
 800382a:	2600      	movs	r6, #0
 800382c:	4d0c      	ldr	r5, [pc, #48]	@ (8003860 <__libc_init_array+0x38>)
 800382e:	4c0d      	ldr	r4, [pc, #52]	@ (8003864 <__libc_init_array+0x3c>)
 8003830:	1b64      	subs	r4, r4, r5
 8003832:	10a4      	asrs	r4, r4, #2
 8003834:	42a6      	cmp	r6, r4
 8003836:	d109      	bne.n	800384c <__libc_init_array+0x24>
 8003838:	f000 fc78 	bl	800412c <_init>
 800383c:	2600      	movs	r6, #0
 800383e:	4d0a      	ldr	r5, [pc, #40]	@ (8003868 <__libc_init_array+0x40>)
 8003840:	4c0a      	ldr	r4, [pc, #40]	@ (800386c <__libc_init_array+0x44>)
 8003842:	1b64      	subs	r4, r4, r5
 8003844:	10a4      	asrs	r4, r4, #2
 8003846:	42a6      	cmp	r6, r4
 8003848:	d105      	bne.n	8003856 <__libc_init_array+0x2e>
 800384a:	bd70      	pop	{r4, r5, r6, pc}
 800384c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003850:	4798      	blx	r3
 8003852:	3601      	adds	r6, #1
 8003854:	e7ee      	b.n	8003834 <__libc_init_array+0xc>
 8003856:	f855 3b04 	ldr.w	r3, [r5], #4
 800385a:	4798      	blx	r3
 800385c:	3601      	adds	r6, #1
 800385e:	e7f2      	b.n	8003846 <__libc_init_array+0x1e>
 8003860:	08004260 	.word	0x08004260
 8003864:	08004260 	.word	0x08004260
 8003868:	08004260 	.word	0x08004260
 800386c:	08004264 	.word	0x08004264

08003870 <__retarget_lock_acquire_recursive>:
 8003870:	4770      	bx	lr

08003872 <__retarget_lock_release_recursive>:
 8003872:	4770      	bx	lr

08003874 <_free_r>:
 8003874:	b538      	push	{r3, r4, r5, lr}
 8003876:	4605      	mov	r5, r0
 8003878:	2900      	cmp	r1, #0
 800387a:	d040      	beq.n	80038fe <_free_r+0x8a>
 800387c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003880:	1f0c      	subs	r4, r1, #4
 8003882:	2b00      	cmp	r3, #0
 8003884:	bfb8      	it	lt
 8003886:	18e4      	addlt	r4, r4, r3
 8003888:	f000 f8de 	bl	8003a48 <__malloc_lock>
 800388c:	4a1c      	ldr	r2, [pc, #112]	@ (8003900 <_free_r+0x8c>)
 800388e:	6813      	ldr	r3, [r2, #0]
 8003890:	b933      	cbnz	r3, 80038a0 <_free_r+0x2c>
 8003892:	6063      	str	r3, [r4, #4]
 8003894:	6014      	str	r4, [r2, #0]
 8003896:	4628      	mov	r0, r5
 8003898:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800389c:	f000 b8da 	b.w	8003a54 <__malloc_unlock>
 80038a0:	42a3      	cmp	r3, r4
 80038a2:	d908      	bls.n	80038b6 <_free_r+0x42>
 80038a4:	6820      	ldr	r0, [r4, #0]
 80038a6:	1821      	adds	r1, r4, r0
 80038a8:	428b      	cmp	r3, r1
 80038aa:	bf01      	itttt	eq
 80038ac:	6819      	ldreq	r1, [r3, #0]
 80038ae:	685b      	ldreq	r3, [r3, #4]
 80038b0:	1809      	addeq	r1, r1, r0
 80038b2:	6021      	streq	r1, [r4, #0]
 80038b4:	e7ed      	b.n	8003892 <_free_r+0x1e>
 80038b6:	461a      	mov	r2, r3
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	b10b      	cbz	r3, 80038c0 <_free_r+0x4c>
 80038bc:	42a3      	cmp	r3, r4
 80038be:	d9fa      	bls.n	80038b6 <_free_r+0x42>
 80038c0:	6811      	ldr	r1, [r2, #0]
 80038c2:	1850      	adds	r0, r2, r1
 80038c4:	42a0      	cmp	r0, r4
 80038c6:	d10b      	bne.n	80038e0 <_free_r+0x6c>
 80038c8:	6820      	ldr	r0, [r4, #0]
 80038ca:	4401      	add	r1, r0
 80038cc:	1850      	adds	r0, r2, r1
 80038ce:	4283      	cmp	r3, r0
 80038d0:	6011      	str	r1, [r2, #0]
 80038d2:	d1e0      	bne.n	8003896 <_free_r+0x22>
 80038d4:	6818      	ldr	r0, [r3, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	4408      	add	r0, r1
 80038da:	6010      	str	r0, [r2, #0]
 80038dc:	6053      	str	r3, [r2, #4]
 80038de:	e7da      	b.n	8003896 <_free_r+0x22>
 80038e0:	d902      	bls.n	80038e8 <_free_r+0x74>
 80038e2:	230c      	movs	r3, #12
 80038e4:	602b      	str	r3, [r5, #0]
 80038e6:	e7d6      	b.n	8003896 <_free_r+0x22>
 80038e8:	6820      	ldr	r0, [r4, #0]
 80038ea:	1821      	adds	r1, r4, r0
 80038ec:	428b      	cmp	r3, r1
 80038ee:	bf01      	itttt	eq
 80038f0:	6819      	ldreq	r1, [r3, #0]
 80038f2:	685b      	ldreq	r3, [r3, #4]
 80038f4:	1809      	addeq	r1, r1, r0
 80038f6:	6021      	streq	r1, [r4, #0]
 80038f8:	6063      	str	r3, [r4, #4]
 80038fa:	6054      	str	r4, [r2, #4]
 80038fc:	e7cb      	b.n	8003896 <_free_r+0x22>
 80038fe:	bd38      	pop	{r3, r4, r5, pc}
 8003900:	20000374 	.word	0x20000374

08003904 <sbrk_aligned>:
 8003904:	b570      	push	{r4, r5, r6, lr}
 8003906:	4e0f      	ldr	r6, [pc, #60]	@ (8003944 <sbrk_aligned+0x40>)
 8003908:	460c      	mov	r4, r1
 800390a:	6831      	ldr	r1, [r6, #0]
 800390c:	4605      	mov	r5, r0
 800390e:	b911      	cbnz	r1, 8003916 <sbrk_aligned+0x12>
 8003910:	f000 fbaa 	bl	8004068 <_sbrk_r>
 8003914:	6030      	str	r0, [r6, #0]
 8003916:	4621      	mov	r1, r4
 8003918:	4628      	mov	r0, r5
 800391a:	f000 fba5 	bl	8004068 <_sbrk_r>
 800391e:	1c43      	adds	r3, r0, #1
 8003920:	d103      	bne.n	800392a <sbrk_aligned+0x26>
 8003922:	f04f 34ff 	mov.w	r4, #4294967295
 8003926:	4620      	mov	r0, r4
 8003928:	bd70      	pop	{r4, r5, r6, pc}
 800392a:	1cc4      	adds	r4, r0, #3
 800392c:	f024 0403 	bic.w	r4, r4, #3
 8003930:	42a0      	cmp	r0, r4
 8003932:	d0f8      	beq.n	8003926 <sbrk_aligned+0x22>
 8003934:	1a21      	subs	r1, r4, r0
 8003936:	4628      	mov	r0, r5
 8003938:	f000 fb96 	bl	8004068 <_sbrk_r>
 800393c:	3001      	adds	r0, #1
 800393e:	d1f2      	bne.n	8003926 <sbrk_aligned+0x22>
 8003940:	e7ef      	b.n	8003922 <sbrk_aligned+0x1e>
 8003942:	bf00      	nop
 8003944:	20000370 	.word	0x20000370

08003948 <_malloc_r>:
 8003948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800394c:	1ccd      	adds	r5, r1, #3
 800394e:	f025 0503 	bic.w	r5, r5, #3
 8003952:	3508      	adds	r5, #8
 8003954:	2d0c      	cmp	r5, #12
 8003956:	bf38      	it	cc
 8003958:	250c      	movcc	r5, #12
 800395a:	2d00      	cmp	r5, #0
 800395c:	4606      	mov	r6, r0
 800395e:	db01      	blt.n	8003964 <_malloc_r+0x1c>
 8003960:	42a9      	cmp	r1, r5
 8003962:	d904      	bls.n	800396e <_malloc_r+0x26>
 8003964:	230c      	movs	r3, #12
 8003966:	6033      	str	r3, [r6, #0]
 8003968:	2000      	movs	r0, #0
 800396a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800396e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003a44 <_malloc_r+0xfc>
 8003972:	f000 f869 	bl	8003a48 <__malloc_lock>
 8003976:	f8d8 3000 	ldr.w	r3, [r8]
 800397a:	461c      	mov	r4, r3
 800397c:	bb44      	cbnz	r4, 80039d0 <_malloc_r+0x88>
 800397e:	4629      	mov	r1, r5
 8003980:	4630      	mov	r0, r6
 8003982:	f7ff ffbf 	bl	8003904 <sbrk_aligned>
 8003986:	1c43      	adds	r3, r0, #1
 8003988:	4604      	mov	r4, r0
 800398a:	d158      	bne.n	8003a3e <_malloc_r+0xf6>
 800398c:	f8d8 4000 	ldr.w	r4, [r8]
 8003990:	4627      	mov	r7, r4
 8003992:	2f00      	cmp	r7, #0
 8003994:	d143      	bne.n	8003a1e <_malloc_r+0xd6>
 8003996:	2c00      	cmp	r4, #0
 8003998:	d04b      	beq.n	8003a32 <_malloc_r+0xea>
 800399a:	6823      	ldr	r3, [r4, #0]
 800399c:	4639      	mov	r1, r7
 800399e:	4630      	mov	r0, r6
 80039a0:	eb04 0903 	add.w	r9, r4, r3
 80039a4:	f000 fb60 	bl	8004068 <_sbrk_r>
 80039a8:	4581      	cmp	r9, r0
 80039aa:	d142      	bne.n	8003a32 <_malloc_r+0xea>
 80039ac:	6821      	ldr	r1, [r4, #0]
 80039ae:	4630      	mov	r0, r6
 80039b0:	1a6d      	subs	r5, r5, r1
 80039b2:	4629      	mov	r1, r5
 80039b4:	f7ff ffa6 	bl	8003904 <sbrk_aligned>
 80039b8:	3001      	adds	r0, #1
 80039ba:	d03a      	beq.n	8003a32 <_malloc_r+0xea>
 80039bc:	6823      	ldr	r3, [r4, #0]
 80039be:	442b      	add	r3, r5
 80039c0:	6023      	str	r3, [r4, #0]
 80039c2:	f8d8 3000 	ldr.w	r3, [r8]
 80039c6:	685a      	ldr	r2, [r3, #4]
 80039c8:	bb62      	cbnz	r2, 8003a24 <_malloc_r+0xdc>
 80039ca:	f8c8 7000 	str.w	r7, [r8]
 80039ce:	e00f      	b.n	80039f0 <_malloc_r+0xa8>
 80039d0:	6822      	ldr	r2, [r4, #0]
 80039d2:	1b52      	subs	r2, r2, r5
 80039d4:	d420      	bmi.n	8003a18 <_malloc_r+0xd0>
 80039d6:	2a0b      	cmp	r2, #11
 80039d8:	d917      	bls.n	8003a0a <_malloc_r+0xc2>
 80039da:	1961      	adds	r1, r4, r5
 80039dc:	42a3      	cmp	r3, r4
 80039de:	6025      	str	r5, [r4, #0]
 80039e0:	bf18      	it	ne
 80039e2:	6059      	strne	r1, [r3, #4]
 80039e4:	6863      	ldr	r3, [r4, #4]
 80039e6:	bf08      	it	eq
 80039e8:	f8c8 1000 	streq.w	r1, [r8]
 80039ec:	5162      	str	r2, [r4, r5]
 80039ee:	604b      	str	r3, [r1, #4]
 80039f0:	4630      	mov	r0, r6
 80039f2:	f000 f82f 	bl	8003a54 <__malloc_unlock>
 80039f6:	f104 000b 	add.w	r0, r4, #11
 80039fa:	1d23      	adds	r3, r4, #4
 80039fc:	f020 0007 	bic.w	r0, r0, #7
 8003a00:	1ac2      	subs	r2, r0, r3
 8003a02:	bf1c      	itt	ne
 8003a04:	1a1b      	subne	r3, r3, r0
 8003a06:	50a3      	strne	r3, [r4, r2]
 8003a08:	e7af      	b.n	800396a <_malloc_r+0x22>
 8003a0a:	6862      	ldr	r2, [r4, #4]
 8003a0c:	42a3      	cmp	r3, r4
 8003a0e:	bf0c      	ite	eq
 8003a10:	f8c8 2000 	streq.w	r2, [r8]
 8003a14:	605a      	strne	r2, [r3, #4]
 8003a16:	e7eb      	b.n	80039f0 <_malloc_r+0xa8>
 8003a18:	4623      	mov	r3, r4
 8003a1a:	6864      	ldr	r4, [r4, #4]
 8003a1c:	e7ae      	b.n	800397c <_malloc_r+0x34>
 8003a1e:	463c      	mov	r4, r7
 8003a20:	687f      	ldr	r7, [r7, #4]
 8003a22:	e7b6      	b.n	8003992 <_malloc_r+0x4a>
 8003a24:	461a      	mov	r2, r3
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	42a3      	cmp	r3, r4
 8003a2a:	d1fb      	bne.n	8003a24 <_malloc_r+0xdc>
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	6053      	str	r3, [r2, #4]
 8003a30:	e7de      	b.n	80039f0 <_malloc_r+0xa8>
 8003a32:	230c      	movs	r3, #12
 8003a34:	4630      	mov	r0, r6
 8003a36:	6033      	str	r3, [r6, #0]
 8003a38:	f000 f80c 	bl	8003a54 <__malloc_unlock>
 8003a3c:	e794      	b.n	8003968 <_malloc_r+0x20>
 8003a3e:	6005      	str	r5, [r0, #0]
 8003a40:	e7d6      	b.n	80039f0 <_malloc_r+0xa8>
 8003a42:	bf00      	nop
 8003a44:	20000374 	.word	0x20000374

08003a48 <__malloc_lock>:
 8003a48:	4801      	ldr	r0, [pc, #4]	@ (8003a50 <__malloc_lock+0x8>)
 8003a4a:	f7ff bf11 	b.w	8003870 <__retarget_lock_acquire_recursive>
 8003a4e:	bf00      	nop
 8003a50:	2000036c 	.word	0x2000036c

08003a54 <__malloc_unlock>:
 8003a54:	4801      	ldr	r0, [pc, #4]	@ (8003a5c <__malloc_unlock+0x8>)
 8003a56:	f7ff bf0c 	b.w	8003872 <__retarget_lock_release_recursive>
 8003a5a:	bf00      	nop
 8003a5c:	2000036c 	.word	0x2000036c

08003a60 <__ssputs_r>:
 8003a60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a64:	461f      	mov	r7, r3
 8003a66:	688e      	ldr	r6, [r1, #8]
 8003a68:	4682      	mov	sl, r0
 8003a6a:	42be      	cmp	r6, r7
 8003a6c:	460c      	mov	r4, r1
 8003a6e:	4690      	mov	r8, r2
 8003a70:	680b      	ldr	r3, [r1, #0]
 8003a72:	d82d      	bhi.n	8003ad0 <__ssputs_r+0x70>
 8003a74:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003a78:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003a7c:	d026      	beq.n	8003acc <__ssputs_r+0x6c>
 8003a7e:	6965      	ldr	r5, [r4, #20]
 8003a80:	6909      	ldr	r1, [r1, #16]
 8003a82:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003a86:	eba3 0901 	sub.w	r9, r3, r1
 8003a8a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003a8e:	1c7b      	adds	r3, r7, #1
 8003a90:	444b      	add	r3, r9
 8003a92:	106d      	asrs	r5, r5, #1
 8003a94:	429d      	cmp	r5, r3
 8003a96:	bf38      	it	cc
 8003a98:	461d      	movcc	r5, r3
 8003a9a:	0553      	lsls	r3, r2, #21
 8003a9c:	d527      	bpl.n	8003aee <__ssputs_r+0x8e>
 8003a9e:	4629      	mov	r1, r5
 8003aa0:	f7ff ff52 	bl	8003948 <_malloc_r>
 8003aa4:	4606      	mov	r6, r0
 8003aa6:	b360      	cbz	r0, 8003b02 <__ssputs_r+0xa2>
 8003aa8:	464a      	mov	r2, r9
 8003aaa:	6921      	ldr	r1, [r4, #16]
 8003aac:	f000 fafa 	bl	80040a4 <memcpy>
 8003ab0:	89a3      	ldrh	r3, [r4, #12]
 8003ab2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003ab6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003aba:	81a3      	strh	r3, [r4, #12]
 8003abc:	6126      	str	r6, [r4, #16]
 8003abe:	444e      	add	r6, r9
 8003ac0:	6026      	str	r6, [r4, #0]
 8003ac2:	463e      	mov	r6, r7
 8003ac4:	6165      	str	r5, [r4, #20]
 8003ac6:	eba5 0509 	sub.w	r5, r5, r9
 8003aca:	60a5      	str	r5, [r4, #8]
 8003acc:	42be      	cmp	r6, r7
 8003ace:	d900      	bls.n	8003ad2 <__ssputs_r+0x72>
 8003ad0:	463e      	mov	r6, r7
 8003ad2:	4632      	mov	r2, r6
 8003ad4:	4641      	mov	r1, r8
 8003ad6:	6820      	ldr	r0, [r4, #0]
 8003ad8:	f000 faac 	bl	8004034 <memmove>
 8003adc:	2000      	movs	r0, #0
 8003ade:	68a3      	ldr	r3, [r4, #8]
 8003ae0:	1b9b      	subs	r3, r3, r6
 8003ae2:	60a3      	str	r3, [r4, #8]
 8003ae4:	6823      	ldr	r3, [r4, #0]
 8003ae6:	4433      	add	r3, r6
 8003ae8:	6023      	str	r3, [r4, #0]
 8003aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003aee:	462a      	mov	r2, r5
 8003af0:	f000 fae6 	bl	80040c0 <_realloc_r>
 8003af4:	4606      	mov	r6, r0
 8003af6:	2800      	cmp	r0, #0
 8003af8:	d1e0      	bne.n	8003abc <__ssputs_r+0x5c>
 8003afa:	4650      	mov	r0, sl
 8003afc:	6921      	ldr	r1, [r4, #16]
 8003afe:	f7ff feb9 	bl	8003874 <_free_r>
 8003b02:	230c      	movs	r3, #12
 8003b04:	f8ca 3000 	str.w	r3, [sl]
 8003b08:	89a3      	ldrh	r3, [r4, #12]
 8003b0a:	f04f 30ff 	mov.w	r0, #4294967295
 8003b0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b12:	81a3      	strh	r3, [r4, #12]
 8003b14:	e7e9      	b.n	8003aea <__ssputs_r+0x8a>
	...

08003b18 <_svfiprintf_r>:
 8003b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b1c:	4698      	mov	r8, r3
 8003b1e:	898b      	ldrh	r3, [r1, #12]
 8003b20:	4607      	mov	r7, r0
 8003b22:	061b      	lsls	r3, r3, #24
 8003b24:	460d      	mov	r5, r1
 8003b26:	4614      	mov	r4, r2
 8003b28:	b09d      	sub	sp, #116	@ 0x74
 8003b2a:	d510      	bpl.n	8003b4e <_svfiprintf_r+0x36>
 8003b2c:	690b      	ldr	r3, [r1, #16]
 8003b2e:	b973      	cbnz	r3, 8003b4e <_svfiprintf_r+0x36>
 8003b30:	2140      	movs	r1, #64	@ 0x40
 8003b32:	f7ff ff09 	bl	8003948 <_malloc_r>
 8003b36:	6028      	str	r0, [r5, #0]
 8003b38:	6128      	str	r0, [r5, #16]
 8003b3a:	b930      	cbnz	r0, 8003b4a <_svfiprintf_r+0x32>
 8003b3c:	230c      	movs	r3, #12
 8003b3e:	603b      	str	r3, [r7, #0]
 8003b40:	f04f 30ff 	mov.w	r0, #4294967295
 8003b44:	b01d      	add	sp, #116	@ 0x74
 8003b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b4a:	2340      	movs	r3, #64	@ 0x40
 8003b4c:	616b      	str	r3, [r5, #20]
 8003b4e:	2300      	movs	r3, #0
 8003b50:	9309      	str	r3, [sp, #36]	@ 0x24
 8003b52:	2320      	movs	r3, #32
 8003b54:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003b58:	2330      	movs	r3, #48	@ 0x30
 8003b5a:	f04f 0901 	mov.w	r9, #1
 8003b5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b62:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003cfc <_svfiprintf_r+0x1e4>
 8003b66:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003b6a:	4623      	mov	r3, r4
 8003b6c:	469a      	mov	sl, r3
 8003b6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b72:	b10a      	cbz	r2, 8003b78 <_svfiprintf_r+0x60>
 8003b74:	2a25      	cmp	r2, #37	@ 0x25
 8003b76:	d1f9      	bne.n	8003b6c <_svfiprintf_r+0x54>
 8003b78:	ebba 0b04 	subs.w	fp, sl, r4
 8003b7c:	d00b      	beq.n	8003b96 <_svfiprintf_r+0x7e>
 8003b7e:	465b      	mov	r3, fp
 8003b80:	4622      	mov	r2, r4
 8003b82:	4629      	mov	r1, r5
 8003b84:	4638      	mov	r0, r7
 8003b86:	f7ff ff6b 	bl	8003a60 <__ssputs_r>
 8003b8a:	3001      	adds	r0, #1
 8003b8c:	f000 80a7 	beq.w	8003cde <_svfiprintf_r+0x1c6>
 8003b90:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003b92:	445a      	add	r2, fp
 8003b94:	9209      	str	r2, [sp, #36]	@ 0x24
 8003b96:	f89a 3000 	ldrb.w	r3, [sl]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	f000 809f 	beq.w	8003cde <_svfiprintf_r+0x1c6>
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	f04f 32ff 	mov.w	r2, #4294967295
 8003ba6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003baa:	f10a 0a01 	add.w	sl, sl, #1
 8003bae:	9304      	str	r3, [sp, #16]
 8003bb0:	9307      	str	r3, [sp, #28]
 8003bb2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003bb6:	931a      	str	r3, [sp, #104]	@ 0x68
 8003bb8:	4654      	mov	r4, sl
 8003bba:	2205      	movs	r2, #5
 8003bbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bc0:	484e      	ldr	r0, [pc, #312]	@ (8003cfc <_svfiprintf_r+0x1e4>)
 8003bc2:	f000 fa61 	bl	8004088 <memchr>
 8003bc6:	9a04      	ldr	r2, [sp, #16]
 8003bc8:	b9d8      	cbnz	r0, 8003c02 <_svfiprintf_r+0xea>
 8003bca:	06d0      	lsls	r0, r2, #27
 8003bcc:	bf44      	itt	mi
 8003bce:	2320      	movmi	r3, #32
 8003bd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003bd4:	0711      	lsls	r1, r2, #28
 8003bd6:	bf44      	itt	mi
 8003bd8:	232b      	movmi	r3, #43	@ 0x2b
 8003bda:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003bde:	f89a 3000 	ldrb.w	r3, [sl]
 8003be2:	2b2a      	cmp	r3, #42	@ 0x2a
 8003be4:	d015      	beq.n	8003c12 <_svfiprintf_r+0xfa>
 8003be6:	4654      	mov	r4, sl
 8003be8:	2000      	movs	r0, #0
 8003bea:	f04f 0c0a 	mov.w	ip, #10
 8003bee:	9a07      	ldr	r2, [sp, #28]
 8003bf0:	4621      	mov	r1, r4
 8003bf2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003bf6:	3b30      	subs	r3, #48	@ 0x30
 8003bf8:	2b09      	cmp	r3, #9
 8003bfa:	d94b      	bls.n	8003c94 <_svfiprintf_r+0x17c>
 8003bfc:	b1b0      	cbz	r0, 8003c2c <_svfiprintf_r+0x114>
 8003bfe:	9207      	str	r2, [sp, #28]
 8003c00:	e014      	b.n	8003c2c <_svfiprintf_r+0x114>
 8003c02:	eba0 0308 	sub.w	r3, r0, r8
 8003c06:	fa09 f303 	lsl.w	r3, r9, r3
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	46a2      	mov	sl, r4
 8003c0e:	9304      	str	r3, [sp, #16]
 8003c10:	e7d2      	b.n	8003bb8 <_svfiprintf_r+0xa0>
 8003c12:	9b03      	ldr	r3, [sp, #12]
 8003c14:	1d19      	adds	r1, r3, #4
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	9103      	str	r1, [sp, #12]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	bfbb      	ittet	lt
 8003c1e:	425b      	neglt	r3, r3
 8003c20:	f042 0202 	orrlt.w	r2, r2, #2
 8003c24:	9307      	strge	r3, [sp, #28]
 8003c26:	9307      	strlt	r3, [sp, #28]
 8003c28:	bfb8      	it	lt
 8003c2a:	9204      	strlt	r2, [sp, #16]
 8003c2c:	7823      	ldrb	r3, [r4, #0]
 8003c2e:	2b2e      	cmp	r3, #46	@ 0x2e
 8003c30:	d10a      	bne.n	8003c48 <_svfiprintf_r+0x130>
 8003c32:	7863      	ldrb	r3, [r4, #1]
 8003c34:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c36:	d132      	bne.n	8003c9e <_svfiprintf_r+0x186>
 8003c38:	9b03      	ldr	r3, [sp, #12]
 8003c3a:	3402      	adds	r4, #2
 8003c3c:	1d1a      	adds	r2, r3, #4
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	9203      	str	r2, [sp, #12]
 8003c42:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003c46:	9305      	str	r3, [sp, #20]
 8003c48:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003d00 <_svfiprintf_r+0x1e8>
 8003c4c:	2203      	movs	r2, #3
 8003c4e:	4650      	mov	r0, sl
 8003c50:	7821      	ldrb	r1, [r4, #0]
 8003c52:	f000 fa19 	bl	8004088 <memchr>
 8003c56:	b138      	cbz	r0, 8003c68 <_svfiprintf_r+0x150>
 8003c58:	2240      	movs	r2, #64	@ 0x40
 8003c5a:	9b04      	ldr	r3, [sp, #16]
 8003c5c:	eba0 000a 	sub.w	r0, r0, sl
 8003c60:	4082      	lsls	r2, r0
 8003c62:	4313      	orrs	r3, r2
 8003c64:	3401      	adds	r4, #1
 8003c66:	9304      	str	r3, [sp, #16]
 8003c68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c6c:	2206      	movs	r2, #6
 8003c6e:	4825      	ldr	r0, [pc, #148]	@ (8003d04 <_svfiprintf_r+0x1ec>)
 8003c70:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003c74:	f000 fa08 	bl	8004088 <memchr>
 8003c78:	2800      	cmp	r0, #0
 8003c7a:	d036      	beq.n	8003cea <_svfiprintf_r+0x1d2>
 8003c7c:	4b22      	ldr	r3, [pc, #136]	@ (8003d08 <_svfiprintf_r+0x1f0>)
 8003c7e:	bb1b      	cbnz	r3, 8003cc8 <_svfiprintf_r+0x1b0>
 8003c80:	9b03      	ldr	r3, [sp, #12]
 8003c82:	3307      	adds	r3, #7
 8003c84:	f023 0307 	bic.w	r3, r3, #7
 8003c88:	3308      	adds	r3, #8
 8003c8a:	9303      	str	r3, [sp, #12]
 8003c8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003c8e:	4433      	add	r3, r6
 8003c90:	9309      	str	r3, [sp, #36]	@ 0x24
 8003c92:	e76a      	b.n	8003b6a <_svfiprintf_r+0x52>
 8003c94:	460c      	mov	r4, r1
 8003c96:	2001      	movs	r0, #1
 8003c98:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c9c:	e7a8      	b.n	8003bf0 <_svfiprintf_r+0xd8>
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	f04f 0c0a 	mov.w	ip, #10
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	3401      	adds	r4, #1
 8003ca8:	9305      	str	r3, [sp, #20]
 8003caa:	4620      	mov	r0, r4
 8003cac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003cb0:	3a30      	subs	r2, #48	@ 0x30
 8003cb2:	2a09      	cmp	r2, #9
 8003cb4:	d903      	bls.n	8003cbe <_svfiprintf_r+0x1a6>
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d0c6      	beq.n	8003c48 <_svfiprintf_r+0x130>
 8003cba:	9105      	str	r1, [sp, #20]
 8003cbc:	e7c4      	b.n	8003c48 <_svfiprintf_r+0x130>
 8003cbe:	4604      	mov	r4, r0
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	fb0c 2101 	mla	r1, ip, r1, r2
 8003cc6:	e7f0      	b.n	8003caa <_svfiprintf_r+0x192>
 8003cc8:	ab03      	add	r3, sp, #12
 8003cca:	9300      	str	r3, [sp, #0]
 8003ccc:	462a      	mov	r2, r5
 8003cce:	4638      	mov	r0, r7
 8003cd0:	4b0e      	ldr	r3, [pc, #56]	@ (8003d0c <_svfiprintf_r+0x1f4>)
 8003cd2:	a904      	add	r1, sp, #16
 8003cd4:	f3af 8000 	nop.w
 8003cd8:	1c42      	adds	r2, r0, #1
 8003cda:	4606      	mov	r6, r0
 8003cdc:	d1d6      	bne.n	8003c8c <_svfiprintf_r+0x174>
 8003cde:	89ab      	ldrh	r3, [r5, #12]
 8003ce0:	065b      	lsls	r3, r3, #25
 8003ce2:	f53f af2d 	bmi.w	8003b40 <_svfiprintf_r+0x28>
 8003ce6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003ce8:	e72c      	b.n	8003b44 <_svfiprintf_r+0x2c>
 8003cea:	ab03      	add	r3, sp, #12
 8003cec:	9300      	str	r3, [sp, #0]
 8003cee:	462a      	mov	r2, r5
 8003cf0:	4638      	mov	r0, r7
 8003cf2:	4b06      	ldr	r3, [pc, #24]	@ (8003d0c <_svfiprintf_r+0x1f4>)
 8003cf4:	a904      	add	r1, sp, #16
 8003cf6:	f000 f87d 	bl	8003df4 <_printf_i>
 8003cfa:	e7ed      	b.n	8003cd8 <_svfiprintf_r+0x1c0>
 8003cfc:	0800422a 	.word	0x0800422a
 8003d00:	08004230 	.word	0x08004230
 8003d04:	08004234 	.word	0x08004234
 8003d08:	00000000 	.word	0x00000000
 8003d0c:	08003a61 	.word	0x08003a61

08003d10 <_printf_common>:
 8003d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d14:	4616      	mov	r6, r2
 8003d16:	4698      	mov	r8, r3
 8003d18:	688a      	ldr	r2, [r1, #8]
 8003d1a:	690b      	ldr	r3, [r1, #16]
 8003d1c:	4607      	mov	r7, r0
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	bfb8      	it	lt
 8003d22:	4613      	movlt	r3, r2
 8003d24:	6033      	str	r3, [r6, #0]
 8003d26:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003d2a:	460c      	mov	r4, r1
 8003d2c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003d30:	b10a      	cbz	r2, 8003d36 <_printf_common+0x26>
 8003d32:	3301      	adds	r3, #1
 8003d34:	6033      	str	r3, [r6, #0]
 8003d36:	6823      	ldr	r3, [r4, #0]
 8003d38:	0699      	lsls	r1, r3, #26
 8003d3a:	bf42      	ittt	mi
 8003d3c:	6833      	ldrmi	r3, [r6, #0]
 8003d3e:	3302      	addmi	r3, #2
 8003d40:	6033      	strmi	r3, [r6, #0]
 8003d42:	6825      	ldr	r5, [r4, #0]
 8003d44:	f015 0506 	ands.w	r5, r5, #6
 8003d48:	d106      	bne.n	8003d58 <_printf_common+0x48>
 8003d4a:	f104 0a19 	add.w	sl, r4, #25
 8003d4e:	68e3      	ldr	r3, [r4, #12]
 8003d50:	6832      	ldr	r2, [r6, #0]
 8003d52:	1a9b      	subs	r3, r3, r2
 8003d54:	42ab      	cmp	r3, r5
 8003d56:	dc2b      	bgt.n	8003db0 <_printf_common+0xa0>
 8003d58:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003d5c:	6822      	ldr	r2, [r4, #0]
 8003d5e:	3b00      	subs	r3, #0
 8003d60:	bf18      	it	ne
 8003d62:	2301      	movne	r3, #1
 8003d64:	0692      	lsls	r2, r2, #26
 8003d66:	d430      	bmi.n	8003dca <_printf_common+0xba>
 8003d68:	4641      	mov	r1, r8
 8003d6a:	4638      	mov	r0, r7
 8003d6c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003d70:	47c8      	blx	r9
 8003d72:	3001      	adds	r0, #1
 8003d74:	d023      	beq.n	8003dbe <_printf_common+0xae>
 8003d76:	6823      	ldr	r3, [r4, #0]
 8003d78:	6922      	ldr	r2, [r4, #16]
 8003d7a:	f003 0306 	and.w	r3, r3, #6
 8003d7e:	2b04      	cmp	r3, #4
 8003d80:	bf14      	ite	ne
 8003d82:	2500      	movne	r5, #0
 8003d84:	6833      	ldreq	r3, [r6, #0]
 8003d86:	f04f 0600 	mov.w	r6, #0
 8003d8a:	bf08      	it	eq
 8003d8c:	68e5      	ldreq	r5, [r4, #12]
 8003d8e:	f104 041a 	add.w	r4, r4, #26
 8003d92:	bf08      	it	eq
 8003d94:	1aed      	subeq	r5, r5, r3
 8003d96:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003d9a:	bf08      	it	eq
 8003d9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003da0:	4293      	cmp	r3, r2
 8003da2:	bfc4      	itt	gt
 8003da4:	1a9b      	subgt	r3, r3, r2
 8003da6:	18ed      	addgt	r5, r5, r3
 8003da8:	42b5      	cmp	r5, r6
 8003daa:	d11a      	bne.n	8003de2 <_printf_common+0xd2>
 8003dac:	2000      	movs	r0, #0
 8003dae:	e008      	b.n	8003dc2 <_printf_common+0xb2>
 8003db0:	2301      	movs	r3, #1
 8003db2:	4652      	mov	r2, sl
 8003db4:	4641      	mov	r1, r8
 8003db6:	4638      	mov	r0, r7
 8003db8:	47c8      	blx	r9
 8003dba:	3001      	adds	r0, #1
 8003dbc:	d103      	bne.n	8003dc6 <_printf_common+0xb6>
 8003dbe:	f04f 30ff 	mov.w	r0, #4294967295
 8003dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dc6:	3501      	adds	r5, #1
 8003dc8:	e7c1      	b.n	8003d4e <_printf_common+0x3e>
 8003dca:	2030      	movs	r0, #48	@ 0x30
 8003dcc:	18e1      	adds	r1, r4, r3
 8003dce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003dd2:	1c5a      	adds	r2, r3, #1
 8003dd4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003dd8:	4422      	add	r2, r4
 8003dda:	3302      	adds	r3, #2
 8003ddc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003de0:	e7c2      	b.n	8003d68 <_printf_common+0x58>
 8003de2:	2301      	movs	r3, #1
 8003de4:	4622      	mov	r2, r4
 8003de6:	4641      	mov	r1, r8
 8003de8:	4638      	mov	r0, r7
 8003dea:	47c8      	blx	r9
 8003dec:	3001      	adds	r0, #1
 8003dee:	d0e6      	beq.n	8003dbe <_printf_common+0xae>
 8003df0:	3601      	adds	r6, #1
 8003df2:	e7d9      	b.n	8003da8 <_printf_common+0x98>

08003df4 <_printf_i>:
 8003df4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003df8:	7e0f      	ldrb	r7, [r1, #24]
 8003dfa:	4691      	mov	r9, r2
 8003dfc:	2f78      	cmp	r7, #120	@ 0x78
 8003dfe:	4680      	mov	r8, r0
 8003e00:	460c      	mov	r4, r1
 8003e02:	469a      	mov	sl, r3
 8003e04:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003e06:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003e0a:	d807      	bhi.n	8003e1c <_printf_i+0x28>
 8003e0c:	2f62      	cmp	r7, #98	@ 0x62
 8003e0e:	d80a      	bhi.n	8003e26 <_printf_i+0x32>
 8003e10:	2f00      	cmp	r7, #0
 8003e12:	f000 80d3 	beq.w	8003fbc <_printf_i+0x1c8>
 8003e16:	2f58      	cmp	r7, #88	@ 0x58
 8003e18:	f000 80ba 	beq.w	8003f90 <_printf_i+0x19c>
 8003e1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003e20:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003e24:	e03a      	b.n	8003e9c <_printf_i+0xa8>
 8003e26:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003e2a:	2b15      	cmp	r3, #21
 8003e2c:	d8f6      	bhi.n	8003e1c <_printf_i+0x28>
 8003e2e:	a101      	add	r1, pc, #4	@ (adr r1, 8003e34 <_printf_i+0x40>)
 8003e30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003e34:	08003e8d 	.word	0x08003e8d
 8003e38:	08003ea1 	.word	0x08003ea1
 8003e3c:	08003e1d 	.word	0x08003e1d
 8003e40:	08003e1d 	.word	0x08003e1d
 8003e44:	08003e1d 	.word	0x08003e1d
 8003e48:	08003e1d 	.word	0x08003e1d
 8003e4c:	08003ea1 	.word	0x08003ea1
 8003e50:	08003e1d 	.word	0x08003e1d
 8003e54:	08003e1d 	.word	0x08003e1d
 8003e58:	08003e1d 	.word	0x08003e1d
 8003e5c:	08003e1d 	.word	0x08003e1d
 8003e60:	08003fa3 	.word	0x08003fa3
 8003e64:	08003ecb 	.word	0x08003ecb
 8003e68:	08003f5d 	.word	0x08003f5d
 8003e6c:	08003e1d 	.word	0x08003e1d
 8003e70:	08003e1d 	.word	0x08003e1d
 8003e74:	08003fc5 	.word	0x08003fc5
 8003e78:	08003e1d 	.word	0x08003e1d
 8003e7c:	08003ecb 	.word	0x08003ecb
 8003e80:	08003e1d 	.word	0x08003e1d
 8003e84:	08003e1d 	.word	0x08003e1d
 8003e88:	08003f65 	.word	0x08003f65
 8003e8c:	6833      	ldr	r3, [r6, #0]
 8003e8e:	1d1a      	adds	r2, r3, #4
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	6032      	str	r2, [r6, #0]
 8003e94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003e98:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e09e      	b.n	8003fde <_printf_i+0x1ea>
 8003ea0:	6833      	ldr	r3, [r6, #0]
 8003ea2:	6820      	ldr	r0, [r4, #0]
 8003ea4:	1d19      	adds	r1, r3, #4
 8003ea6:	6031      	str	r1, [r6, #0]
 8003ea8:	0606      	lsls	r6, r0, #24
 8003eaa:	d501      	bpl.n	8003eb0 <_printf_i+0xbc>
 8003eac:	681d      	ldr	r5, [r3, #0]
 8003eae:	e003      	b.n	8003eb8 <_printf_i+0xc4>
 8003eb0:	0645      	lsls	r5, r0, #25
 8003eb2:	d5fb      	bpl.n	8003eac <_printf_i+0xb8>
 8003eb4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003eb8:	2d00      	cmp	r5, #0
 8003eba:	da03      	bge.n	8003ec4 <_printf_i+0xd0>
 8003ebc:	232d      	movs	r3, #45	@ 0x2d
 8003ebe:	426d      	negs	r5, r5
 8003ec0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ec4:	230a      	movs	r3, #10
 8003ec6:	4859      	ldr	r0, [pc, #356]	@ (800402c <_printf_i+0x238>)
 8003ec8:	e011      	b.n	8003eee <_printf_i+0xfa>
 8003eca:	6821      	ldr	r1, [r4, #0]
 8003ecc:	6833      	ldr	r3, [r6, #0]
 8003ece:	0608      	lsls	r0, r1, #24
 8003ed0:	f853 5b04 	ldr.w	r5, [r3], #4
 8003ed4:	d402      	bmi.n	8003edc <_printf_i+0xe8>
 8003ed6:	0649      	lsls	r1, r1, #25
 8003ed8:	bf48      	it	mi
 8003eda:	b2ad      	uxthmi	r5, r5
 8003edc:	2f6f      	cmp	r7, #111	@ 0x6f
 8003ede:	6033      	str	r3, [r6, #0]
 8003ee0:	bf14      	ite	ne
 8003ee2:	230a      	movne	r3, #10
 8003ee4:	2308      	moveq	r3, #8
 8003ee6:	4851      	ldr	r0, [pc, #324]	@ (800402c <_printf_i+0x238>)
 8003ee8:	2100      	movs	r1, #0
 8003eea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003eee:	6866      	ldr	r6, [r4, #4]
 8003ef0:	2e00      	cmp	r6, #0
 8003ef2:	bfa8      	it	ge
 8003ef4:	6821      	ldrge	r1, [r4, #0]
 8003ef6:	60a6      	str	r6, [r4, #8]
 8003ef8:	bfa4      	itt	ge
 8003efa:	f021 0104 	bicge.w	r1, r1, #4
 8003efe:	6021      	strge	r1, [r4, #0]
 8003f00:	b90d      	cbnz	r5, 8003f06 <_printf_i+0x112>
 8003f02:	2e00      	cmp	r6, #0
 8003f04:	d04b      	beq.n	8003f9e <_printf_i+0x1aa>
 8003f06:	4616      	mov	r6, r2
 8003f08:	fbb5 f1f3 	udiv	r1, r5, r3
 8003f0c:	fb03 5711 	mls	r7, r3, r1, r5
 8003f10:	5dc7      	ldrb	r7, [r0, r7]
 8003f12:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003f16:	462f      	mov	r7, r5
 8003f18:	42bb      	cmp	r3, r7
 8003f1a:	460d      	mov	r5, r1
 8003f1c:	d9f4      	bls.n	8003f08 <_printf_i+0x114>
 8003f1e:	2b08      	cmp	r3, #8
 8003f20:	d10b      	bne.n	8003f3a <_printf_i+0x146>
 8003f22:	6823      	ldr	r3, [r4, #0]
 8003f24:	07df      	lsls	r7, r3, #31
 8003f26:	d508      	bpl.n	8003f3a <_printf_i+0x146>
 8003f28:	6923      	ldr	r3, [r4, #16]
 8003f2a:	6861      	ldr	r1, [r4, #4]
 8003f2c:	4299      	cmp	r1, r3
 8003f2e:	bfde      	ittt	le
 8003f30:	2330      	movle	r3, #48	@ 0x30
 8003f32:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003f36:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003f3a:	1b92      	subs	r2, r2, r6
 8003f3c:	6122      	str	r2, [r4, #16]
 8003f3e:	464b      	mov	r3, r9
 8003f40:	4621      	mov	r1, r4
 8003f42:	4640      	mov	r0, r8
 8003f44:	f8cd a000 	str.w	sl, [sp]
 8003f48:	aa03      	add	r2, sp, #12
 8003f4a:	f7ff fee1 	bl	8003d10 <_printf_common>
 8003f4e:	3001      	adds	r0, #1
 8003f50:	d14a      	bne.n	8003fe8 <_printf_i+0x1f4>
 8003f52:	f04f 30ff 	mov.w	r0, #4294967295
 8003f56:	b004      	add	sp, #16
 8003f58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f5c:	6823      	ldr	r3, [r4, #0]
 8003f5e:	f043 0320 	orr.w	r3, r3, #32
 8003f62:	6023      	str	r3, [r4, #0]
 8003f64:	2778      	movs	r7, #120	@ 0x78
 8003f66:	4832      	ldr	r0, [pc, #200]	@ (8004030 <_printf_i+0x23c>)
 8003f68:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003f6c:	6823      	ldr	r3, [r4, #0]
 8003f6e:	6831      	ldr	r1, [r6, #0]
 8003f70:	061f      	lsls	r7, r3, #24
 8003f72:	f851 5b04 	ldr.w	r5, [r1], #4
 8003f76:	d402      	bmi.n	8003f7e <_printf_i+0x18a>
 8003f78:	065f      	lsls	r7, r3, #25
 8003f7a:	bf48      	it	mi
 8003f7c:	b2ad      	uxthmi	r5, r5
 8003f7e:	6031      	str	r1, [r6, #0]
 8003f80:	07d9      	lsls	r1, r3, #31
 8003f82:	bf44      	itt	mi
 8003f84:	f043 0320 	orrmi.w	r3, r3, #32
 8003f88:	6023      	strmi	r3, [r4, #0]
 8003f8a:	b11d      	cbz	r5, 8003f94 <_printf_i+0x1a0>
 8003f8c:	2310      	movs	r3, #16
 8003f8e:	e7ab      	b.n	8003ee8 <_printf_i+0xf4>
 8003f90:	4826      	ldr	r0, [pc, #152]	@ (800402c <_printf_i+0x238>)
 8003f92:	e7e9      	b.n	8003f68 <_printf_i+0x174>
 8003f94:	6823      	ldr	r3, [r4, #0]
 8003f96:	f023 0320 	bic.w	r3, r3, #32
 8003f9a:	6023      	str	r3, [r4, #0]
 8003f9c:	e7f6      	b.n	8003f8c <_printf_i+0x198>
 8003f9e:	4616      	mov	r6, r2
 8003fa0:	e7bd      	b.n	8003f1e <_printf_i+0x12a>
 8003fa2:	6833      	ldr	r3, [r6, #0]
 8003fa4:	6825      	ldr	r5, [r4, #0]
 8003fa6:	1d18      	adds	r0, r3, #4
 8003fa8:	6961      	ldr	r1, [r4, #20]
 8003faa:	6030      	str	r0, [r6, #0]
 8003fac:	062e      	lsls	r6, r5, #24
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	d501      	bpl.n	8003fb6 <_printf_i+0x1c2>
 8003fb2:	6019      	str	r1, [r3, #0]
 8003fb4:	e002      	b.n	8003fbc <_printf_i+0x1c8>
 8003fb6:	0668      	lsls	r0, r5, #25
 8003fb8:	d5fb      	bpl.n	8003fb2 <_printf_i+0x1be>
 8003fba:	8019      	strh	r1, [r3, #0]
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	4616      	mov	r6, r2
 8003fc0:	6123      	str	r3, [r4, #16]
 8003fc2:	e7bc      	b.n	8003f3e <_printf_i+0x14a>
 8003fc4:	6833      	ldr	r3, [r6, #0]
 8003fc6:	2100      	movs	r1, #0
 8003fc8:	1d1a      	adds	r2, r3, #4
 8003fca:	6032      	str	r2, [r6, #0]
 8003fcc:	681e      	ldr	r6, [r3, #0]
 8003fce:	6862      	ldr	r2, [r4, #4]
 8003fd0:	4630      	mov	r0, r6
 8003fd2:	f000 f859 	bl	8004088 <memchr>
 8003fd6:	b108      	cbz	r0, 8003fdc <_printf_i+0x1e8>
 8003fd8:	1b80      	subs	r0, r0, r6
 8003fda:	6060      	str	r0, [r4, #4]
 8003fdc:	6863      	ldr	r3, [r4, #4]
 8003fde:	6123      	str	r3, [r4, #16]
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003fe6:	e7aa      	b.n	8003f3e <_printf_i+0x14a>
 8003fe8:	4632      	mov	r2, r6
 8003fea:	4649      	mov	r1, r9
 8003fec:	4640      	mov	r0, r8
 8003fee:	6923      	ldr	r3, [r4, #16]
 8003ff0:	47d0      	blx	sl
 8003ff2:	3001      	adds	r0, #1
 8003ff4:	d0ad      	beq.n	8003f52 <_printf_i+0x15e>
 8003ff6:	6823      	ldr	r3, [r4, #0]
 8003ff8:	079b      	lsls	r3, r3, #30
 8003ffa:	d413      	bmi.n	8004024 <_printf_i+0x230>
 8003ffc:	68e0      	ldr	r0, [r4, #12]
 8003ffe:	9b03      	ldr	r3, [sp, #12]
 8004000:	4298      	cmp	r0, r3
 8004002:	bfb8      	it	lt
 8004004:	4618      	movlt	r0, r3
 8004006:	e7a6      	b.n	8003f56 <_printf_i+0x162>
 8004008:	2301      	movs	r3, #1
 800400a:	4632      	mov	r2, r6
 800400c:	4649      	mov	r1, r9
 800400e:	4640      	mov	r0, r8
 8004010:	47d0      	blx	sl
 8004012:	3001      	adds	r0, #1
 8004014:	d09d      	beq.n	8003f52 <_printf_i+0x15e>
 8004016:	3501      	adds	r5, #1
 8004018:	68e3      	ldr	r3, [r4, #12]
 800401a:	9903      	ldr	r1, [sp, #12]
 800401c:	1a5b      	subs	r3, r3, r1
 800401e:	42ab      	cmp	r3, r5
 8004020:	dcf2      	bgt.n	8004008 <_printf_i+0x214>
 8004022:	e7eb      	b.n	8003ffc <_printf_i+0x208>
 8004024:	2500      	movs	r5, #0
 8004026:	f104 0619 	add.w	r6, r4, #25
 800402a:	e7f5      	b.n	8004018 <_printf_i+0x224>
 800402c:	0800423b 	.word	0x0800423b
 8004030:	0800424c 	.word	0x0800424c

08004034 <memmove>:
 8004034:	4288      	cmp	r0, r1
 8004036:	b510      	push	{r4, lr}
 8004038:	eb01 0402 	add.w	r4, r1, r2
 800403c:	d902      	bls.n	8004044 <memmove+0x10>
 800403e:	4284      	cmp	r4, r0
 8004040:	4623      	mov	r3, r4
 8004042:	d807      	bhi.n	8004054 <memmove+0x20>
 8004044:	1e43      	subs	r3, r0, #1
 8004046:	42a1      	cmp	r1, r4
 8004048:	d008      	beq.n	800405c <memmove+0x28>
 800404a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800404e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004052:	e7f8      	b.n	8004046 <memmove+0x12>
 8004054:	4601      	mov	r1, r0
 8004056:	4402      	add	r2, r0
 8004058:	428a      	cmp	r2, r1
 800405a:	d100      	bne.n	800405e <memmove+0x2a>
 800405c:	bd10      	pop	{r4, pc}
 800405e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004062:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004066:	e7f7      	b.n	8004058 <memmove+0x24>

08004068 <_sbrk_r>:
 8004068:	b538      	push	{r3, r4, r5, lr}
 800406a:	2300      	movs	r3, #0
 800406c:	4d05      	ldr	r5, [pc, #20]	@ (8004084 <_sbrk_r+0x1c>)
 800406e:	4604      	mov	r4, r0
 8004070:	4608      	mov	r0, r1
 8004072:	602b      	str	r3, [r5, #0]
 8004074:	f7fd f9f4 	bl	8001460 <_sbrk>
 8004078:	1c43      	adds	r3, r0, #1
 800407a:	d102      	bne.n	8004082 <_sbrk_r+0x1a>
 800407c:	682b      	ldr	r3, [r5, #0]
 800407e:	b103      	cbz	r3, 8004082 <_sbrk_r+0x1a>
 8004080:	6023      	str	r3, [r4, #0]
 8004082:	bd38      	pop	{r3, r4, r5, pc}
 8004084:	20000368 	.word	0x20000368

08004088 <memchr>:
 8004088:	4603      	mov	r3, r0
 800408a:	b510      	push	{r4, lr}
 800408c:	b2c9      	uxtb	r1, r1
 800408e:	4402      	add	r2, r0
 8004090:	4293      	cmp	r3, r2
 8004092:	4618      	mov	r0, r3
 8004094:	d101      	bne.n	800409a <memchr+0x12>
 8004096:	2000      	movs	r0, #0
 8004098:	e003      	b.n	80040a2 <memchr+0x1a>
 800409a:	7804      	ldrb	r4, [r0, #0]
 800409c:	3301      	adds	r3, #1
 800409e:	428c      	cmp	r4, r1
 80040a0:	d1f6      	bne.n	8004090 <memchr+0x8>
 80040a2:	bd10      	pop	{r4, pc}

080040a4 <memcpy>:
 80040a4:	440a      	add	r2, r1
 80040a6:	4291      	cmp	r1, r2
 80040a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80040ac:	d100      	bne.n	80040b0 <memcpy+0xc>
 80040ae:	4770      	bx	lr
 80040b0:	b510      	push	{r4, lr}
 80040b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80040b6:	4291      	cmp	r1, r2
 80040b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80040bc:	d1f9      	bne.n	80040b2 <memcpy+0xe>
 80040be:	bd10      	pop	{r4, pc}

080040c0 <_realloc_r>:
 80040c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040c4:	4680      	mov	r8, r0
 80040c6:	4615      	mov	r5, r2
 80040c8:	460c      	mov	r4, r1
 80040ca:	b921      	cbnz	r1, 80040d6 <_realloc_r+0x16>
 80040cc:	4611      	mov	r1, r2
 80040ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80040d2:	f7ff bc39 	b.w	8003948 <_malloc_r>
 80040d6:	b92a      	cbnz	r2, 80040e4 <_realloc_r+0x24>
 80040d8:	f7ff fbcc 	bl	8003874 <_free_r>
 80040dc:	2400      	movs	r4, #0
 80040de:	4620      	mov	r0, r4
 80040e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040e4:	f000 f81a 	bl	800411c <_malloc_usable_size_r>
 80040e8:	4285      	cmp	r5, r0
 80040ea:	4606      	mov	r6, r0
 80040ec:	d802      	bhi.n	80040f4 <_realloc_r+0x34>
 80040ee:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80040f2:	d8f4      	bhi.n	80040de <_realloc_r+0x1e>
 80040f4:	4629      	mov	r1, r5
 80040f6:	4640      	mov	r0, r8
 80040f8:	f7ff fc26 	bl	8003948 <_malloc_r>
 80040fc:	4607      	mov	r7, r0
 80040fe:	2800      	cmp	r0, #0
 8004100:	d0ec      	beq.n	80040dc <_realloc_r+0x1c>
 8004102:	42b5      	cmp	r5, r6
 8004104:	462a      	mov	r2, r5
 8004106:	4621      	mov	r1, r4
 8004108:	bf28      	it	cs
 800410a:	4632      	movcs	r2, r6
 800410c:	f7ff ffca 	bl	80040a4 <memcpy>
 8004110:	4621      	mov	r1, r4
 8004112:	4640      	mov	r0, r8
 8004114:	f7ff fbae 	bl	8003874 <_free_r>
 8004118:	463c      	mov	r4, r7
 800411a:	e7e0      	b.n	80040de <_realloc_r+0x1e>

0800411c <_malloc_usable_size_r>:
 800411c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004120:	1f18      	subs	r0, r3, #4
 8004122:	2b00      	cmp	r3, #0
 8004124:	bfbc      	itt	lt
 8004126:	580b      	ldrlt	r3, [r1, r0]
 8004128:	18c0      	addlt	r0, r0, r3
 800412a:	4770      	bx	lr

0800412c <_init>:
 800412c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800412e:	bf00      	nop
 8004130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004132:	bc08      	pop	{r3}
 8004134:	469e      	mov	lr, r3
 8004136:	4770      	bx	lr

08004138 <_fini>:
 8004138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800413a:	bf00      	nop
 800413c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800413e:	bc08      	pop	{r3}
 8004140:	469e      	mov	lr, r3
 8004142:	4770      	bx	lr
